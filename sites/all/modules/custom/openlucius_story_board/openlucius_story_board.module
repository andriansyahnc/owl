<?php
/**
 * @file
 * Code for the openlucius_story_board feature.
 */

include_once 'openlucius_story_board.features.inc';
include_once "includes/openlucius_story_board.func.inc";

/**
 * Implements hook_menu().
 */
function openlucius_story_board_menu() {
  return array(
    'owl-openlucius-board/check-status-availability/%node' => array(
      'title' => t('Check Status Availability'),
      'page callback' => 'openlucius_story_board_check_status',
      'page arguments' => array(2),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
      'file' => 'page.inc',
      'file path' => drupal_get_path('module', 'openlucius_story_board') . '/includes'
    )
  );
}

function openlucius_story_board_theme_registry_alter(&$theme_registry) {
  if(isset($theme_registry['openlucius_board_board'])) {
    $theme_registry['openlucius_board_board']['theme path'] = drupal_get_path('module', 'openlucius_story_board');
    $theme_registry['openlucius_board_board']['template'] = drupal_get_path('module', 'openlucius_story_board') . '/templates/openlucius_board_board';
  }
}

function openlucius_story_board_form_ol_todo_node_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  $node = $form_state['node'];
  $default = !empty($form_state['values']['field_story_teams']) ? $form_state['values']['field_story_teams'] : NULL;

  $form['field_story_teams']['#attributes']['class'][] = 'openlucius-hide-label';
  
  if(isset($node->nid) && !isset($node->is_new)) {
    if($node->field_story_teams[LANGUAGE_NONE] !== NULL) {
      $default = $node->field_story_teams[LANGUAGE_NONE][0]['nid'];
      $form['field_story_teams']['#access'] = FALSE;
    }     
  }
  $form['field_todo_user_reference']['#prefix'] = "<div id='todo-user-wrapper'>";
  $form['field_todo_user_reference']['#suffix'] = "</div>";
  // dpm($form['field_todo_user_reference']);

  $form['field_story_teams']['#ajax'] = array(
    'callback' => 'owl_story_teams_onchange',
    'wrapper' => 'todo-user-wrapper',
    'method' => 'replace',
    'effect' => 'fade',
  );

  $user_list = array();
  
  if($default != NULL) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'user')
      ->fieldCondition('field_user_teams', 'nid', $default);
    $results = $query->execute();
    foreach($results as $result) {
      foreach($result as $resultuid => $resultvalue) {
        $userdata = user_load($resultuid);
        $user_list[$resultuid] = $userdata->name;
      }
    }
  }
  
  $form['field_todo_user_reference'][LANGUAGE_NONE]['#options'] = array('_none' => t('- Select a user -')) + $user_list;

  // dpm($form);
}

function openlucius_story_board_js_alter(&$javascript) {
  $openlucius_board_file_loc = drupal_get_path('module', 'openlucius_board') . '/js/openlucius_story_board.js';  
}

function openlucius_story_board_page_alter(&$page) {
  // dpm($page);
}

function openlucius_story_board_menu_alter(&$items) {
  if($items['openlucius-board/%node']) {
    $items['openlucius-board/%node']['page callback']  =  'openlucius_board_custom_page';
    $items['openlucius-board/%node']['file path']      =  drupal_get_path('module', 'openlucius_story_board');
  }
}

class OpenluciusStoryBoard extends OpenluciusBoard {
  public function __construct($id, $type) {

    // Add ctools requirements for the modals.
    ctools_include('node.pages', 'node', '');
    ctools_include('ajax');
    ctools_include('modal');
    ctools_modal_add_js();

    // Add the jquery sortable.
    drupal_add_library('system', 'ui.sortable');

    // Add the jquery date picker.
    drupal_add_library('system', 'ui.datepicker');

    // Get the path to the module.
    $path_to_module = drupal_get_path('module', 'openlucius_board');
    $path_to_custom = drupal_get_path('module', 'openlucius_story_board');

    // Add styling.
    drupal_add_css($path_to_module . '/css/openlucius_board.css');

    // Add the javascript.
    drupal_add_js("//cdn.jsdelivr.net/jquery.ui-contextmenu/1.17.0/jquery.ui-contextmenu.min.js");
    drupal_add_js($path_to_custom . '/js/openlucius_story_board.js');
    drupal_add_css($path_to_custom . '/css/openlucius_story_board.css');

    $is_client = openlucius_core_user_is_client();

    // Add whether the user is a client or not.
    drupal_add_js(array(
      'openlucius_board_client' => $is_client,
      'openlucius_board_drag_drop' => user_access('drag and drop board items'),
    ), 'setting');

    // For storing the data before render.
    $data = array(
      'lists' => array(),
      'token' => drupal_get_token(),
    );

    // Load the basic query.
    $this->query = $this->getBaseQuery();

    // Switch on entity type.
    switch ($type) {

      case 'node':
        $this->query->condition('g.field_shared_group_reference_nid', $id, '=');

        // Fetch the available group users.
        $form = array(
          'select' => array(
            '#type'    => 'select',
            '#options' => array('_none' => t('- None -')) + openlucius_core_fetch_group_users($id),
          ),
        );

        $data['users'] = drupal_render($form);
        break;

      case 'user':
        $this->query->join('field_data_field_todo_user_reference', 'u', 'n.nid = u.entity_id');
        $this->query->condition('u.field_todo_user_reference_uid', $id, '=');
        break;

      default:
        drupal_set_message(t('Option not found in board'));
        return FALSE;
    }

    $this->query->leftJoin('openlucius_board_node_weights', 'b', 'n.nid = b.nid');
    $this->query->addField('b', 'weight', 'board_weight');

    // Add node access tag.
    $this->query->addTag('node_access');

    // Fetch all node id's.
    $results = $this->query->execute()->fetchAllKeyed(0, 1);

    // Fetch the available statuses.
    $data['statuses'] = openlucius_core_get_terms('labels_todo_s');
    $data['groups'] = array();
    $data['user_is_client'] = $is_client;

    if (!empty($results)) {
      $node_ids = array_keys($results);
      $nodes = node_load_multiple($node_ids);

      // Loop through each of the todo's.
      foreach ($nodes as $node) {

        // Fetch prerendered node data.
        $node_values = openlucius_story_board_extract_values($node);

        // Override weight by board weight if set.
        if (isset($results[$node->nid])) {
          $node_values['weight'] = $results[$node->nid];
        }

        // Node and user boards are different so check.
        if ($type == 'node') {

          // Unset group as the node is the group so it's obvious.
          unset($node_values['group']);

          $team = views_get_view_result('vw_user_get_team', 'master', $node_values['account']['uid']);
          if(!empty($team)) {
            $data['team'][$node_values['status']][$node_values['weight']][] = $team;
            $data['account_uid'][$node_values['status']][$node_values['weight']][] = $node_values['account']['uid'];
          } else {
            $data['team'][$node_values['status']][$node_values['weight']][] = null;
            $data['account_uid'][$node_values['status']][$node_values['weight']][] = $node_values['account']['uid'];
          }
          $data['board_id'] = $id;
          // Store renderable item in list at position.
          $data['raw_data'][$node_values['status']][$node_values['weight']][]  = $node_values;
          $data['lists'][$node_values['status']][$node_values['weight']][] = theme('openlucius_board_item', $node_values);
        }
        else {

          // Store group if not set for filtering.
          if (!isset($data['groups'][$node_values['group_id']])) {
            $data['groups'][$node_values['group_id']] = $node_values['group_title'];
          }

          // Store renderable item in list at position.
          $data['lists'][$node_values['status']][$node_values['group_id']][$node_values['weight']][] = theme('openlucius_board_item', $node_values);
        }
      }

      // Order by weight.
      ksort($data['lists']);
      foreach ($data['lists'] as &$list) {
        ksort($list);
      }
    }

    // Only add add button for node pages.
    if ($type == 'node') {

      // Append the add buttons.
      foreach ($data['statuses'] as $key => $label) {
        $data['modal_add_top'][$key] = ctools_modal_text_button(t('!icon Task', array('!icon' => '<span class="glyphicon glyphicon-plus-sign"></span>')), 'openlucius-board/nojs/' . $id . '/' . $key . '/ol_todo/form', t('Add task'), 'btn btn-default btn-xs board-top-link');
      }

      // Add setting for drag and drop ordering.
      drupal_add_js(array(
        'openlucius_board_ordering' => TRUE,
      ), 'setting');
    }
    else {
      // Build the filter.
      $filter = array(
        '#type' => 'select',
        '#options' => array('_none' => t('Show all tasks')) + $data['groups'],
        '#title' => t('Select group'),
        '#attributes' => array(
          'class' => array('board-filter'),
        ),
      );

      // Render the filter.
      $data['filter'] = drupal_render($filter);
    }

    // Store data for usage.
    $this->data = $data;

    // Return self for chaining.
    return $this;
  }

  private function getBaseQuery() {
    $query = db_select('node', 'n')->fields('n', array('nid'));
    $query->join('field_data_field_todo_label', 'l', 'n.nid = l.entity_id');
    $query->join('field_data_field_shared_group_reference', 'g', 'n.nid = g.entity_id');
    return $query->condition('n.status', 1, '=')
                 ->condition('n.type', 'ol_todo', '=')
                 ->condition('l.field_todo_label_tid', variable_get('todo_closedstatus_tid'), '<>');
  }
}

/**
 * Function to extract the node values for the ajax callback.
 *
 * @param \stdClass $node
 *   The node object for which the values need to be extracted.
 *
 * @return array|bool
 *   Returns either an array with values or FALSE when this is not a todo.
 */
function openlucius_story_board_extract_values(\stdClass $node) {

  // Check if this is a todo.
  if ($node->type == 'ol_todo') {

    // Wrap for easy access.
    $wrapper = entity_metadata_wrapper('node', $node);

    // Fetch label term id.
    $label = $wrapper->field_todo_label->value();

    // Fetch list.
    $list = $wrapper->field_todo_list_reference->value();

    // Fetch group.
    $group = $wrapper->field_shared_group_reference->value();

    // Build renderable array.
    $data = array(
      'nid'    => $node->nid,
      'title'  => ctools_modal_text_button($node->title, 'openlucius-board/nojs/' . $node->nid . '/comment/form/node-view', t('View')),
      'status' => $label->tid,
      'list'   => l($list->title, 'node/' . $list->nid),
      'group'  => l(t('!title', array('!title' => $group->title)), 'node/' . $group->nid, array(
        'attributes' => array(
          'class' => array(
            'board-group-label',
          ),
        ),
      )),
      'group_id' => $group->nid,
      'group_title' => $group->title,
      'group_no_clients' => $group->field_shared_show_clients[LANGUAGE_NONE][0]['value'] == 0,
    );

    // Load the move include.
    module_load_include('inc', 'openlucius_core', 'includes/openlucius_core_move_node');

    // Load the lists in the group.
    $lists = openlucius_core_load_todo_list($group->nid);

    // Check if there is more than one list.
    if (empty($lists) || count($lists) < 2) {

      // Hide the label.
      $data['hide_label'] = TRUE;
    }

    // Only add the edit link if the user may edit the node.
    if (node_access('update', $node)) {
      $data['edit_link'] = ctools_modal_text_button('', 'openlucius-board/nojs/' . $node->nid . '/form', t('Edit task'), 'glyphicon glyphicon-pencil edit-board-item ctools-modal-max-width');
    }

    // Fetch weight.
    $data['weight'] = $wrapper->field_todo_weight->value();
    if (empty($data['weight'])) {
      $data['weight'] = 0;
    }

    $files = $wrapper->field_shared_files->value();

    // The amount of comments for this item.
    $data['comments'] = array(
      'link'  => ctools_modal_text_button('<span class="badge-text"> ' . $node->comment_count .'</span>', 'openlucius-board/nojs/' . $node->nid . '/comment/form/comment-view', t('Add comment'), 'badge glyphicon glyphicon-comment add-board-comment'),
    );

    // The amount of attachments for this item.
    $data['attachments'] = array(
      'count' => count($files),
      'title' => t('Attachments'),
    );

    // The clients icons is bit different.
    $show_clients_label = $wrapper->field_shared_show_clients->value() ? t('Yes') : t('No');

    // Whether clients can see this.
    if (!openlucius_core_user_is_client() && !$data['group_no_clients']) {
      $icon = openlucius_core_icons('node_show_clients');
      $data['show_clients'] = array(
        'class' => openlucius_core_icon_classes($icon),
        'title' => t('Can clients see this?'),
        'label' => $show_clients_label,
      );
    }

    // Check the due date and set it to future or past task.
    $due_date = $wrapper->field_todo_due_date_singledate->value();
    $current_time = time();
    if (!empty($due_date)) {
      $current_time = time();
      $data['due_date'] = array(
        'class' => ($current_time > $due_date) ? 'is-due-past' : 'is-due-future',
        'date' => format_date($due_date, 'custom', 'd M'),
        'year' => date('Y', $due_date),
        'month' => date('m', $due_date),
        'day' => date('d', $due_date),
        'title' => ($current_time > $due_date) ? t('This task is running late') : t('This tasks due date lies in the future'),
      );
    }
    else {
      $data['due_date'] = array(
        'class' => 'is-due-future',
        'date' => '-',
        'year' => date('Y', $current_time),
        'month' => date('m', $current_time),
        'day' => date('d', $current_time),
        'title' => t('This tasks due date lies in the future'),
      );
    }

    // Load the required user data.
    $account = $wrapper->field_todo_user_reference->value();
    if (!empty($account)) {

      // Fetch username.
      $name = isset($account->realname) ? $account->realname : $account->name;
      $data['account'] = array(
        'uid'     => $account->uid,
        'name'    => $name,
        'picture' => openlucius_core_fetch_user_image($account, 'ol_50x50', $name, $name),
      );
    }
    // Set to unassigned.
    else {
      $data['account'] = array(
        'uid'     => '_none',
        'name'    => t('Unassigned'),
        'picture' => '<i class="fa fa-user-times"></i>',
        'unassigned' => TRUE,
      );
    }

    // Allow other modules to interact with the node values.
    drupal_alter('openlucius_board_node_values', $data);

    // Render placeholders if set.
    $placeholders = array('before', 'after');
    foreach ($placeholders as $placeholder) {
      if (!empty($data[$placeholder])) {
        $data[$placeholder] = drupal_render($data[$placeholder]);
      }
    }

    // Build meta information for the board item.
    $data['meta'] = theme('openlucius_board_item_meta', $data);
    $data['team'] = $wrapper->field_story_teams->value() === NULL ? NULL : $wrapper->field_story_teams->value()->nid;  

    return $data;
  }

  return FALSE;
}