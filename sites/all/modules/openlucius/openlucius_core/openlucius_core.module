<?php
/**
 * @file
 * This file contains all core functions.
 */

// Load includes.
include_once 'includes/helpers.inc';
include_once 'includes/base_form_id_alters.inc';
include_once 'includes/activity.inc';
include_once 'includes/groups.inc';
include_once 'includes/text-documents.inc';
include_once 'includes/inline_edit.inc';
include_once 'includes/tabs.inc';
include_once 'includes/blocks.inc';

// Define default user role (openlucius authenticated user).
define('OPENLUCIUS_CORE_OPENLUCIUS_DEFAULT_ROLE', 6);

// Define client user role.
define('OPENLUCIUS_CORE_OPENLUCIUS_CLIENT_ROLE', 5);

// Define manager role (can create groups).
define('OPENLUCIUS_CORE_OPENLUCIUS_MANAGER_ROLE', 4);

// Define admin role (admin).
define('OPENLUCIUS_CORE_OPENLUCIUS_ADMIN_ROLE', 3);

// Define maximum items in todolist on dashboard.
define('OPENLUCIUS_CORE_DASHBOARD_TODO_LIMIT', 5);

// Define todo status vocabulary.
define('OPENLUCIUS_CORE_TODO_STATUS_VOCABULARY_NAME', 'labels_todo_s');

define('OPENLUCIUS_CORE_LOCALE', 'openlucius_core');

// Define the grant realms.
define('OPENLUCIUS_CORE_NODE_VIEW_REALM', 'openlucius_core_node_access_view');
define('OPENLUCIUS_CORE_NODE_EDIT_REALM', 'openlucius_core_node_access_edit');
define('OPENLUCIUS_CORE_NODE_NONCLIENTS_VIEW_REALM', 'openlucius_core_node_access_view_nonclients');
define('OPENLUCIUS_CORE_NODE_NONCLIENTS_EDIT_REALM', 'openlucius_core_node_access_edit_nonclients');

// Extra grant realms for open groups.
define('OPENLUCIUS_CORE_OPEN_GROUP_NODE_VIEW_REALM', 'openlucius_core_open_group_node_access_view');
define('OPENLUCIUS_CORE_OPEN_GROUP_NODE_EDIT_REALM', 'openlucius_core_open_group_node_access_edit');
define('OPENLUCIUS_CORE_OPEN_GROUP_NODE_NONCLIENTS_VIEW_REALM', 'openlucius_core_open_group_node_access_view_nonclients');
define('OPENLUCIUS_CORE_OPEN_GROUP_NODE_NONCLIENTS_EDIT_REALM', 'openlucius_core_open_group_node_access_edit_nonclients');

// Define initial read more limit.
define('OPENLUCIUS_CORE_READ_MORE_LIMIT', 140);

// Define how many comments may be shown.
define('OPENLUCIUS_CORE_SHOWN_COMMENTS_LIMIT', 3);

/**
 * Implements hook_menu_alter().
 */
function openlucius_core_menu_alter(&$items) {

  // Set callbacks.
  $items['user/%user']['page callback'] = 'openlucius_core_redirect';

  // Prevent access to edit for certain users.
  $items['user/%user/edit']['access callback'] = 'openlucius_core_user_edit_access';

  // Prevent direct access to path node.
  $items['node']['access callback'] = FALSE;
  $items['node/add']['access arguments'] = array('access add content page');

  // Only those who may edit.
  $items['taxonomy/term/%']['access arguments'][] = array('administer taxonomy');
  $items['admin/structure/taxonomy']['access arguments'] = array('administer taxonomy');

  // Hide super admin only paths.
  $items['admin/people']['access callback'][] = 'openlucius_core_access_callback';
  $items['admin/people/people']['access callback'][] = 'openlucius_core_access_callback';
  $items['admin/people/permissions']['access callback'][] = 'openlucius_core_access_callback';
  $items['admin/people/permissions/list']['access callback'][] = 'openlucius_core_access_callback';
  $items['admin/people/permissions/roles']['access callback'][] = 'openlucius_core_access_callback';
  $items['admin/config/people/accounts']['access callback'][] = 'openlucius_core_access_callback';
  $items['admin/config/people/accounts/settings']['access callback'][] = 'openlucius_core_access_callback';

  $items['admin/people/permissions/roles/edit/%user_role']['access arguments'] = array('administer user settings');
  unset($items['admin/people/permissions/roles/edit/%user_role']['access callback']);

  $items['admin/people/permissions/roles/delete/%user_role']['access arguments'] = array('administer user settings');
  unset($items['admin/people/permissions/roles/delete/%user_role']['access callback']);
}

/**
 * Implements hook_init().
 */
function openlucius_core_init() {

  global $user;

  // Get the menu object and item.
  $node = menu_get_object();
  $item = menu_get_item();

  $params = drupal_get_query_parameters();

  // Check for the frontpage path.
  if ($item['path'] == 'recent-stuff' && !empty($params['hash'])) {

    // Check if there user is not logged in yet.
    if (!user_is_logged_in()) {

      // Get the uid from the hash in the URL.
      $uid = openlucius_core_hash_to_uid($params['hash']);

      // Check if there is a uid.
      if (!empty($uid)) {

        // Auto login the user.
        $account = array('uid' => $uid);
        user_login_submit(array(), $account);

        // Notify the user of the automated login.
        drupal_set_message(t('You have been automatically logged in.'));
      }

      // Redirect to the app page.
      drupal_goto('<front>');
    }
    else {
      // Insert the user into the openlucius_core_bookmarks table with status 0.
      $status = openlucius_core_get_bookmark_status($user->uid);

      // Add the javascript for the popup modal.
      drupal_add_js(drupal_get_path('module', 'openlucius_core') . '/js/ol_bookmarks.js');

      // Add the data to the javascript for further use.
      drupal_add_js(array(
        'modal_title'       => t("Create an 'App icon' on your phone"),
        'modal_body'        => openlucius_core_get_bookmark_info_block_content(),
        'modal_token'       => drupal_get_token(),
        'modal_success'     => t('You will no longer see this message'),
        'modal_close_text'  => t("I don't want to see this message again"),
        'user_id'           => $user->uid,
        'should_show'       => ($status === FALSE || $status == 0),
        'on_user_dashboard' => ($item['path'] == 'user/dashboard'),
        'redirect_link'     => openlucius_core_create_bookmark_link_for_user($user->uid),
      ), 'setting');

      // Check if the status is not found.
      if ($status === FALSE) {
        // Insert the bookmark status as 0.
        openlucius_core_bookmark_status_insert($user->uid);
      }
    }
  }
  // Check for the user dashboard path.
  elseif ($item['path'] == 'user/dashboard' || !empty($params['hash'])) {

    // Insert the user into the openlucius_core_bookmarks table with status 0.
    $status = openlucius_core_get_bookmark_status($user->uid);

    // Add the javascript for the popup modal.
    drupal_add_js(drupal_get_path('module', 'openlucius_core') . '/js/ol_bookmarks.js');

    // Add the data to the javascript for further use.
    drupal_add_js(array(
      'modal_title'       => t("Create an 'App icon' on your phone"),
      'modal_body'        => openlucius_core_get_bookmark_info_block_content(),
      'modal_token'       => drupal_get_token(),
      'modal_success'     => t('You will no longer see this message'),
      'modal_close_text'  => t("I don't want to see this message again"),
      'user_id'           => $user->uid,
      'should_show'       => ($status === FALSE || $status == 0),
      'on_user_dashboard' => ($item['path'] == 'user/dashboard'),
      'redirect_link'     => openlucius_core_create_bookmark_link_for_user($user->uid),
    ), 'setting');

    // Check if the status is not found.
    if ($status === FALSE) {
      // Insert the bookmark status as 0.
      openlucius_core_bookmark_status_insert($user->uid);
    }
  }

  // Store active group / active todo-list in session (required for ajax).
  if (!empty($node) && !empty($node->nid)) {
    // Check if it is a group.
    if (isset($node->type) && $node->type == 'ol_group') {
      // Due to ajax killing our fancy select view we have to use this
      // (remember group audience!).
      $_SESSION['active_group'] = $node->nid;
    }
    // Check if we're in a todo list.
    elseif (isset($node->type) && $node->type == 'ol_todo_list') {
      // Due to ajax killing our fancy select view we have to use this
      // (remember group audience!).
      $_SESSION['active_todo_list'] = $node->nid;
    }

    // We have no group get group from current node.
    if (!isset($_SESSION['active_group'])) {
      // Check if the current node has a group reference.
      if (isset($node->field_shared_group_reference[LANGUAGE_NONE][0]['nid'])) {
        $_SESSION['active_group'] = $node->field_shared_group_reference[LANGUAGE_NONE][0]['nid'];
      }
    }
  }

  // Check if user needs to login for this path.
  if (openlucius_core_path_access() == FALSE) {
    $menu = menu_get_item();
    $params = drupal_get_query_parameters();

    // First off check the path.
    if (!empty($menu['path'])) {

      // Check automatic login path.
      if ($menu['path'] == 'recent-stuff' && !empty($params['hash'])) {

      }
      elseif ($menu['path'] !== 'user/login' && $menu['page_callback'] !== 'services_endpoint_callback') {

        // Reroute user to login page.
        drupal_goto('user/login', array('query' => array('destination' => $_GET['q'])));
      }
    }
  }

  // Redirect for existing paths.
  // TODO remove, this shouldn't be necessary.
  openlucius_core_existing_path_redirect();

  $maintenance = variable_get('maintenance_mode', FALSE);

  if ($maintenance) {
    $messages = drupal_get_messages('status', FALSE);
    $maintenance_mode_message = variable_get('maintenance_mode_message');
    $found = FALSE;
    if (isset($messages['status'])) {
      foreach ($messages['status'] as $message) {
        if ($message == $maintenance_mode_message) {
          $found = TRUE;
          break;
        }
      }
    }
    if (!$found) {
      drupal_set_message(filter_xss_admin($maintenance_mode_message));
    }
  }

  // Fetch access for the todo's.
  $user_can_prioritize = user_access('openlucius todo prioritize');
  $user_can_transfer = user_access('openlucius todo transfer');
  $user_can_prioritize_list = user_access('openlucius todolist prioritize');

  // Add the draggable and droppable.
  drupal_add_library('system', 'ui.sortable');

  // Enable table drag if the user has access and they are on the overview.
  if ($user_can_prioritize || $user_can_transfer) {

    // Only enable on the todo-list overview of a group or on group dashboard.
    if (isset($item['path']) && $item['path'] == 'group-task-lists' || (isset($item['page_callback']) && $item['page_callback'] == 'node_page_view' && $item['page_arguments'][0]->type == 'ol_group')) {

      // Add the data to the javascript for further use.
      drupal_add_js(array(
        'openlucius_todo_prioritize'     => $user_can_prioritize ? $user_can_prioritize : $user_can_transfer,
        'openlucius_todolist_prioritize' => $user_can_prioritize_list ? $user_can_prioritize_list : FALSE,
        'openlucius_todo_transfer'       => $user_can_transfer,
      ), 'setting');
    }
  }

  // Add the todo breakdown js on todo pages.
  if (isset($node->type) && $node->type == 'ol_todo') {
    drupal_add_js(drupal_get_path('module', 'openlucius_core') . '/js/openlucius_core_todo_breakdown.js');
  }

  // Add the todo limit on group dashboard.
  if (isset($node->type) && $node->type == 'ol_group') {

    // Get the todo limit.
    $todo_limit = variable_get('openlucius_core_dashboard_todo_limit', OPENLUCIUS_CORE_DASHBOARD_TODO_LIMIT);

    // Add the limit to the openlucius_core.js javascript.
    drupal_add_js(array(
      'openlucius_core_dashboard_todo_limit' => $todo_limit,
    ), 'setting');
  }

  // Add css for hiding checkboxes other checkboxes.
  $individual_amount = variable_get('openlucius_notifications_individual_amount', 8);
  drupal_add_css('#edit-notify-individual .form-type-checkbox:nth-of-type(1n+' . ($individual_amount + 1) . ') {
      display: none;
    }', array(
      'group'      => CSS_THEME,
      'type'       => 'inline',
      'media'      => 'screen',
      'preprocess' => FALSE,
      'weight'     => '9999',
    )
  );

  // Add settings to js so javascript can use them.
  drupal_add_js(array(
    'openlucius_core_individual_amount' => $individual_amount,
    'openlucius_core_individual_more'   => '<span class="btn btn-default btn-xs show-all-individuals">' . t('Show all group members') . '</span>',
  ), 'setting');

  // Check the item path for user dashboard.
  if (!empty($item['path']) && $item['path'] == 'user/dashboard' && $user->uid != 1) {

    // Check the item map for the user id.
    if (!empty($item['map'][2]) && is_numeric($item['map'][2]) && $item['map'][2] !== $user->uid) {

      // Check if the user has access to view all dashboards.
      if (!user_access('access all user dashboards')) {

        // Check if the user has access to view associated users.
        if (user_access('access associated user dashboards')) {

          // Fetch the associated users.
          $associated_users = openlucius_core_fetch_associated_users(TRUE);

          // Check if the user is in one of your groups.
          if (!in_array($item['map'][2], $associated_users)) {
            // Limit access.
            drupal_access_denied();
          }
        }
        else {
          // Limit access.
          drupal_access_denied();
        }
      }
    }
  }

  // Check if menu isset.
  if (!empty($menu)) {

    // Redirection for app paths when disabled.
    openlucius_core_group_apps_redirect($menu);
  }

  // Add css for the streams.
  drupal_add_css(drupal_get_path('theme', 'openlucius') . '/css/stream.css');

  // Add js for the activity interact.
  drupal_add_js(drupal_get_path('module', 'openlucius_core') . '/js/openlucius_core_activity.js');

  // Check if the user is logged in before adding modal requirements.
  if (user_is_logged_in()) {

    // Add modal requirements.
    drupal_add_library('system', 'drupal.ajax');

    // Fetch path to module.
    $path_to_module = drupal_get_path('module', 'openlucius_core');

    // Add the javascript.
    drupal_add_js($path_to_module . '/js/openlucius_modal.js');
  }
}

/**
 * Implements hook_context_load_alter().
 */
function openlucius_core_context_load_alter(&$context) {
  // Alter the blocks for the dashboard.
  if ($context->name == 'group_index') {

    // Fetch block hashes for any blocks with a name longer than 32 characters.
    $block_hashes = variable_get('views_block_hashes');
    $node = menu_get_object();

    // Check if we have a node and it's a group.
    if (!empty($node) && $node->type == 'ol_group') {

      // Fetch group settings.
      $group_settings = variable_get('openlucius_core_group_settings', array());
      $blocks = openlucius_core_default_group_dashboard_blocks();

      // Check if we have group settings and context for the group.
      if (!empty($group_settings[$node->nid]) && !empty($context->reactions['block']['blocks'])) {

        // For storing block keys.
        $disable_blocks = array();

        // Loop through and process the blocks.
        foreach ($group_settings[$node->nid] as $key => $setting) {

          // Check if disabled.
          if ($setting === 0 && !empty($blocks[$key])) {

            // Check if one of more blocks.
            if (is_array($blocks[$key])) {
              $disable_blocks = array_merge($disable_blocks, $blocks[$key]);
            }
            else {
              $disable_blocks[] = $blocks[$key];
            }
          }
        }

        // Loop through blocks and check if the app is enabled.
        foreach ($context->reactions['block']['blocks'] as $key => $block) {

          // Check if the block delta is in the disabled blocks or if the block
          // delta is a hash which is set in the $block_hashes variable which
          // contains the block name.
          if (in_array($block['delta'], $disable_blocks) || isset($block_hashes[$block['delta']]) && in_array($block_hashes[$block['delta']], $disable_blocks)) {
            unset($context->reactions['block']['blocks'][$key]);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_permission().
 */
function openlucius_core_permission() {
  return array(
    'ol show non-client content'             => array(
      'title'       => t('Show non-client content'),
      'description' => t("Permission to view content that is marked as don't show to client"),
    ),
    'openlucius client'                      => array(
      'title'       => t('Restrict client access'),
      'description' => t("Permission to restrict what a client is allowed to see within OpenLucius"),
    ),
    'access add content page'                => array(
      'title'       => t('Offer access to the add content page'),
      'description' => t('Permission to check whether the user can access the node/add screen'),
    ),
    'administer openlucius configuration'    => array(
      'title'       => t('Offer access to OpenLucius configuration'),
      'description' => t('Permission to check whether the user can access the OpenLucius configuration'),
    ),
    'administer default group configuration' => array(
      'title'       => t('Configure default groups for new users'),
      'description' => t('Permission to check whether the user can access the default groups configuration'),
    ),
    'administer user settings'               => array(
      'title'       => t('Configure user settings'),
      'description' => t('Permission for certain setting pages, only give to administrators'),
    ),
    'openlucius todo toggle'                 => array(
      'title'       => t('Toggle todos'),
      'description' => t("Permission to use the todo toggle for quickly opening / closing todo's"),
    ),
    'openlucius todo transfer'               => array(
      'title'       => t("Drag todo to other lists"),
      'description' => t("Permission to transfer todo's from one list to another"),
    ),
    'openlucius todo prioritize'             => array(
      'title'       => t("Drag todo to prioritize within one list"),
      'description' => t("Permission to prioritize the todo's in a list"),
    ),
    'openlucius todolist prioritize'         => array(
      'title'       => t("Drag todolist to prioritize"),
      'description' => t("Permission to prioritize the todolists"),
    ),
    'move nodes'                             => array(
      'title'       => t('Move nodes'),
      'description' => t('Permission to move nodes'),
    ),
    'access todo breakdown'                  => array(
      'title'       => t('Access todo breakdown'),
      'description' => t('Permission to access todo breakdown'),
    ),
    'access user profile groups'             => array(
      'title'       => t('Access user profile groups'),
      'description' => t('Permission to access the group checkboxes on the user profile'),
    ),
    'access all user dashboards'             => array(
      'title'       => t('Access all user dashboards'),
      'description' => t('Permission to access all user dashboards'),
    ),
    'access associated user dashboards'      => array(
      'title'       => t('Access associated user dashboards'),
      'description' => t('Permission to access dashboards of the users you are in a group with'),
    ),
    'drag and drop documents'                => array(
      'title'       => t('Allow a user to drag and drop documents'),
      'description' => t('Permission to access the drag and drop functionality for text-documents'),
    ),
    'access inline editing'                  => array(
      'title'       => t('Allow a user use inline editing'),
      'description' => t("Permission to access the inline editing functionality for todo's"),
    ),
    'administer group app settings'          => array(
      'title'       => t('Administer group app settings'),
      'description' => t('Allow a user to administer group app settings'),
    ),
    'access user overview'                   => array(
      'title'       => t('Access user overview page'),
      'description' => t('Allow a user to access the overview page'),
    ),
    'notify all teams'                       => array(
      'title'       => t('Notify all teams'),
      'description' => t('Allow a user to notify all teams'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function openlucius_core_menu() {

  $items = array();

  // Autocomplete on node title.
  $items['autocomplete'] = array(
    'page callback'    => 'openlucius_core_autocomplete',
    'page arguments'   => array(1, 2, 3),
    'type'             => MENU_NORMAL_ITEM,
    'access arguments' => array('access content'),
  );

  // Remove user from group.
  $items['group-users/removefromgroup/%/%'] = array(
    'page callback'    => 'openlucius_core_remove_users_from_group',
    'page arguments'   => array(2, 3),
    'type'             => MENU_NORMAL_ITEM,
    'access arguments' => array('create ol_group content'),
  );

  // Recent stuff.
  $items['recent-stuff'] = array(
    'page callback'    => 'openlucius_core_get_recent_stuff',
    'type'             => MENU_NORMAL_ITEM,
    'access arguments' => array('access content'),
  );

  // Redirect for config to make configuration link translatable.
  $items['user/config/openlucius'] = array(
    'title'            => 'Configuration',
    'menu_name'        => 'user-menu',
    'type'             => MENU_NORMAL_ITEM,
    'weight'           => -47,
    'page callback'    => 'drupal_goto',
    'page arguments'   => array('admin/config/openlucius'),
    'access arguments' => array('administer openlucius configuration'),
  );

  // Placeholder for configuration.
  $items['admin/config/openlucius'] = array(
    'title'            => 'Configuration',
    'description'      => 'Placeholder for the other Openlucius configuration pages.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('openlucius_core_default_configuration_form'),
    'access arguments' => array('administer openlucius configuration'),
    'type'             => MENU_NORMAL_ITEM,
    'position'         => 'left',
    'weight'           => 0,
  );

  // Placeholder for configuration.
  $items['admin/config/openlucius/openlucius_app_defaults'] = array(
    'title'            => 'App configuration',
    'description'      => 'Configure your default apps and the app order.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('openlucius_core_default_apps_form'),
    'access arguments' => array('administer openlucius configuration'),
    'type'             => MENU_LOCAL_TASK,
    'tab_parent'       => 'admin/config/openlucius',
    'weight'           => 100,
  );

  // Placeholder for configuration.
  $items['admin/config/openlucius/general'] = array(
    'title'            => 'Configuration',
    'type'             => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => array('administer openlucius configuration'),
  );

  // Page for default group/team configuration.
  $items['admin/config/openlucius/groups'] = array(
    'title'            => 'Default group/team',
    'description'      => 'Configure members in default groups/teams.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('openlucius_core_default_group_settings_form'),
    'access arguments' => array('administer default group configuration'),
    'type'             => MENU_LOCAL_TASK,
    'tab_parent'       => 'admin/config/openlucius',
  );

  $items['task/toggle/%node'] = array(
    'page callback'    => 'openlucius_core_todo_toggle',
    'page arguments'   => array(2),
    'type'             => MENU_CALLBACK,
    'access arguments' => array('openlucius todo toggle'),
  );

  $items['task/transfer/%node'] = array(
    'page callback'    => 'openlucius_core_todo_transfer',
    'page arguments'   => array(2),
    'type'             => MENU_CALLBACK,
    'access arguments' => array('openlucius todo transfer'),
  );

  $items['task/update-weights'] = array(
    'page callback'    => '_openlucius_core_node_update_weights',
    'type'             => MENU_CALLBACK,
    'access arguments' => array('openlucius todo prioritize'),
  );

  $items['task-list/update-weights'] = array(
    'page callback'    => '_openlucius_core_node_update_weights',
    'type'             => MENU_CALLBACK,
    'access arguments' => array('openlucius todolist prioritize'),
  );

  $items['node/%node/move'] = array(
    'title'            => 'Move item',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('openlucius_core_move_node_form'),
    'access callback'  => 'openlucius_core_move_nodes_access',
    'access arguments' => array(1),
    'type'             => MENU_CALLBACK,
    'file'             => 'includes/openlucius_core_move_node.inc',
    'weight'           => 3,
  );

  // Ajax page for breaking down a todo.
  $items['node/%node/breakdown'] = array(
    'title'            => 'Break down task',
    'description'      => 'Ajax page for breaking down a task.',
    'page callback'    => 'openlucius_core_breakdown_todo',
    'page arguments'   => array(0, 1),
    'access arguments' => array('access todo breakdown'),
    'type'             => MENU_CALLBACK,
  );

  // Ajax page for breaking down a todo.
  $items['comment/%openlucius_core_comment_parent/breakdown'] = array(
    'title'            => 'Break down task',
    'description'      => 'Ajax page for breaking down a task.',
    'page callback'    => 'openlucius_core_breakdown_todo',
    'page arguments'   => array(0, 1),
    'access arguments' => array('access todo breakdown'),
    'type'             => MENU_CALLBACK,
  );

  // Update link for logged in user with redirect.
  $items['user/update'] = array(
    'title'            => 'Edit profile',
    'description'      => 'Page that redirects to edit page of logged in user',
    'page callback'    => 'openlucius_core_user_update_redirect',
    'access arguments' => array('access content'),
    'menu_name'        => 'user-menu',
    'type'             => MENU_NORMAL_ITEM,
    'weight'           => -48,
  );

  // Path for marking all nodes of a given as read.
  $items['mark_type_as_read/%/%'] = array(
    'page callback'    => 'openlucius_core_mark_type_as_read',
    'type'             => MENU_CALLBACK,
    'page arguments'   => array(1, 2),
    'access arguments' => array('access content'),
  );

  $items['group-activity/%'] = array(
    'page callback'   => 'openlucius_core_get_group_activity',
    'type'            => MENU_NORMAL_ITEM,
    'page arguments'  => array(1),
    'access callback' => 'openlucius_core_views_group_access',
  );

  $items['node/%node/archive'] = array(
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('openlucius_core_archive_node_form', 1),
    'type'             => MENU_NORMAL_ITEM,
    'access callback'  => 'node_access',
    'access arguments' => array('update', 1),
  );

  $items['node/%node/trash'] = array(
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('openlucius_core_trash_node_form', 1),
    'type'             => MENU_NORMAL_ITEM,
    'access callback'  => 'node_access',
    'access arguments' => array('update', 1),
    'file'             => 'forms.inc',
    'file path'        => drupal_get_path('module', 'openlucius_core') . '/includes',
  );

  // Path for registering a bookmark.
  $items['register-bookmark'] = array(
    'title'            => 'Path for marking as bookmarked',
    'page callback'    => 'openlucius_core_mark_as_bookmarked',
    'access arguments' => array('access content'),
  );

  // Path for resetting a bookmark.
  $items['reset-bookmark'] = array(
    'title'            => 'Path for resetting as bookmarked back to 0',
    'page callback'    => 'openlucius_core_unmark_as_bookmarked',
    'access arguments' => array('access content'),
  );

  $items['text-documents/%/documents.json'] = array(
    'page callback'    => 'openlucius_core_fetch_documents',
    'title'            => 'Documents',
    'type'             => MENU_NORMAL_ITEM,
    'page arguments'   => array(1),
    'access arguments' => array('access content'),
  );

  $items['inline-edit/%node'] = array(
    'page callback'    => 'openlucius_core_inline_todo_form',
    'type'             => MENU_NORMAL_ITEM,
    'page arguments'   => array(1),
    'access arguments' => array('access inline editing'),
  );

  $items['inline-edit/%node/save'] = array(
    'page callback'    => 'openlucius_core_inline_node_save',
    'type'             => MENU_NORMAL_ITEM,
    'page arguments'   => array(1),
    'access arguments' => array('access inline editing'),
  );

  $items['text-documents/insert'] = array(
    'page callback'    => 'openlucius_core_insert_order_documents',
    'title'            => 'Documents',
    'type'             => MENU_NORMAL_ITEM,
    'access arguments' => array('drag and drop documents'),
  );

  $items['update-group-settings/%'] = array(
    'page callback'    => 'openlucius_core_update_group_app_settings',
    'page arguments'   => array(1),
    'type'             => MENU_CALLBACK,
    'access arguments' => array('administer group app settings'),
  );

  $items['move-calendar-item'] = array(
    'title'            => 'Path for moving calendar nodes',
    'page callback'    => 'openlucius_core_move_calendar_item',
    'access arguments' => array('access content'),
  );

  // Page for default group/team configuration.
  $items['admin/config/openlucius/task-status'] = array(
    'title'            => 'Task statuses',
    'description'      => 'Configure task statuses.',
    'file'             => 'forms.inc',
    'file path'        => drupal_get_path('module', 'openlucius_core') . '/includes',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('openlucius_core_todo_status_settings_form'),
    'access arguments' => array('administer openlucius configuration'),
    'type'             => MENU_LOCAL_TASK,
    'tab_parent'       => 'admin/config/openlucius',
  );

  // Term edit form.
  $items['admin/config/openlucius/task-status/term/%taxonomy_term/edit'] = array(
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('openlucius_core_taxonomy_term_edit', 5),
    'access arguments' => array('administer openlucius configuration'),
    'type'             => MENU_LOCAL_TASK,
  );

  // Term delete form.
  $items['admin/config/openlucius/task-status/term/%taxonomy_term/delete'] = array(
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('openlucius_core_taxonomy_term_delete', 5),
    'access arguments' => array('administer openlucius configuration'),
    'type'             => MENU_LOCAL_TASK,
  );

  // Everyone link.
  $items['everyone'] = array(
    'title'            => 'Everyone',
    'page callback'    => 'drupal_goto',
    'page arguments'   => array('all-users'),
    'access arguments' => array('access user overview'),
    'menu_name'        => 'main-menu',
    'type'             => MENU_NORMAL_ITEM,
    'weight'           => -48,
  );

  // Calendar link.
  $items['calendar'] = array(
    'title'            => 'Calendar',
    'page callback'    => 'drupal_goto',
    'page arguments'   => array('all-calendar/month'),
    'access arguments' => array('access content'),
    'menu_name'        => 'main-menu',
    'type'             => MENU_NORMAL_ITEM,
    'weight'           => -50,
  );

  // Tasks dropdown.
  $items['tasks'] = array(
    'title'            => 'Tasks',
    'page callback'    => 'drupal_goto',
    'page arguments'   => array('<front>'),
    'access arguments' => array('access content'),
    'menu_name'        => 'user-menu',
    'type'             => MENU_NORMAL_ITEM,
    'weight'           => -60,
  );

  // My task calendar.
  $items['tasks/my-task-calendar'] = array(
    'title'            => 'My Task Calendar',
    'page callback'    => 'openlucius_core_custom_path_redirect',
    'page arguments'   => array('calendar'),
    'access arguments' => array('access content'),
    'menu_name'        => 'user-menu',
    'type'             => MENU_NORMAL_ITEM,
    'weight'           => -44,
    'file'             => 'redirect.inc',
    'file path'        => drupal_get_path('module', 'openlucius_core') . '/includes',
  );

  // My task list.
  $items['tasks/my-task-list'] = array(
    'title'            => 'My Task List',
    'page callback'    => 'openlucius_core_custom_path_redirect',
    'page arguments'   => array('dashboard', 'block-system-main'),
    'access arguments' => array('access content'),
    'menu_name'        => 'user-menu',
    'type'             => MENU_NORMAL_ITEM,
    'weight'           => -42,
    'file'             => 'redirect.inc',
    'file path'        => drupal_get_path('module', 'openlucius_core') . '/includes',
  );

  $items['openlucius-core/app-redirect/%node'] = array(
    'file'             => 'redirect.inc',
    'file path'        => drupal_get_path('module', 'openlucius_core') . '/includes',
    'page callback'    => 'openlucius_core_app_redirect',
    'page arguments'   => array(2),
    'access arguments' => array('access content'),
  );

  $items['reply-on-activity-item'] = array(
    'page callback'    => 'openlucius_core_reply_on_activity_item',
    'type'             => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );

  // Modal paths and callbacks.
  $items['openlucius-core/%ctools_js/%node/form'] = array(
    'page callback'    => 'openlucius_core_modal_form',
    'page arguments'   => array(1, 2),
    'access callback'  => 'node_access',
    'access arguments' => array('update', 2),
    'file'             => 'includes/modal.inc',
    'type'             => MENU_CALLBACK,
  );

  $items['openlucius-core/%ctools_js/%node/comment/form/%'] = array(
    'page callback'    => 'openlucius_core_modal_comment_form',
    'page arguments'   => array(1, 2, 5),
    'access callback'  => 'node_access',
    'access arguments' => array('view', 2),
    'file'             => 'includes/modal.inc',
    'type'             => MENU_CALLBACK,
  );

  $items['ajax/openlucius-core/%node/user-select'] = array(
    'page callback'    => 'openlucius_core_group_user_select',
    'page arguments'   => array(2),
    'access callback'  => 'openlucius_core_user_in_group',
    'access arguments' => array(2),
    'file'             => 'includes/modal.inc',
    'type'             => MENU_CALLBACK,
  );

  $items['ajax/openlucius-core/label-select'] = array(
    'page callback'    => 'openlucius_core_label_select',
    'page arguments'   => array(2),
    'access arguments' => array('access content'),
    'file'             => 'includes/modal.inc',
    'type'             => MENU_CALLBACK,
  );

  $items['openlucius-core/%node/update'] = array(
    'page callback'    => 'openlucius_core_modal_update_node',
    'page arguments'   => array(1),
    'access callback'  => 'node_access',
    'access arguments' => array('update', 1),
    'file'             => 'includes/modal.inc',
    'type'             => MENU_NORMAL_ITEM,
  );

  $items['openlucius-core/task-modal/%'] = array(
    'page callback'    => 'openlucius_core_task_modal',
    'page arguments'   => array(2),
    'access callback'  => 'openlucius_core_user_in_group',
    'access arguments' => array(2),
    'file'             => 'includes/modal.inc',
    'type'             => MENU_CALLBACK,
  );

  $items['openlucius-core/task-modal/%/%'] = array(
    'page callback'    => 'openlucius_core_task_modal',
    'page arguments'   => array(2, 3),
    'access callback'  => 'openlucius_core_user_in_group',
    'access arguments' => array(2),
    'file'             => 'includes/modal.inc',
    'type'             => MENU_CALLBACK,
  );

  $items['openlucius-core/task-modal/%/options'] = array(
    'page callback'    => 'openlucius_core_fetch_group_modal_fields_options',
    'page arguments'   => array(2),
    'access callback'  => 'openlucius_core_user_in_group',
    'access arguments' => array(2),
    'file'             => 'includes/modal.inc',
    'type'             => MENU_CALLBACK,
  );

  $items['openlucius-modal/%ctools_js/help-feedback'] = array(
    'access arguments' => array('access content'),
    'page callback'    => 'openlucius_core_help_modal',
    'page arguments'   => array(1),
    'file'             => 'includes/help.inc',
    'type'             => MENU_CALLBACK,
  );

  $items['openlucius-modal/%ctools_js/feedback-form'] = array(
    'access arguments' => array('access content'),
    'page callback'    => 'openlucius_core_feedback_modal',
    'page arguments'   => array(1, 2),
    'file'             => 'includes/help.inc',
    'type'             => MENU_CALLBACK,
  );

  $items['openlucius-modal/%ctools_js/feature-form'] = array(
    'access arguments' => array('access content'),
    'page callback'    => 'openlucius_core_feedback_modal',
    'page arguments'   => array(1, 2),
    'file'             => 'includes/help.inc',
    'type'             => MENU_CALLBACK,
  );

  // Add task dummy link.
  $items['tasks/add-task'] = array(
    'title'            => 'Add task (t)',
    'access arguments' => array('access content'),
    'menu_name'        => 'user-menu',
    'type'             => MENU_NORMAL_ITEM,
    'weight'           => -50,
  );

  return $items;
}

/**
 * Page callback function to show text to the user.
 *
 * @return string
 *   The output string.
 */
function openlucius_core_default_configuration_form() {

  $form = array();

  $form['#markup'] = t('This is the default tab which can be altered by other modules');

  // Checkbox to cluster the recent stuff.
  $form['openlucius_core_cluster_recent_stuff'] = array(
    '#title'         => t('Cluster recent stuff'),
    '#description'   => t('Do you want to cluster the recent stuff by unread?'),
    '#type'          => 'checkbox',
    '#default_value' => variable_get('openlucius_core_cluster_recent_stuff', 0),
    '#weight'        => 1,
  );

  // The show new badge.
  $form['openlucius_core_show_new_badge'] = array(
    '#title'         => t('Show new badge'),
    '#description'   => t('Do you want to show a new badge for unread items?'),
    '#type'          => 'checkbox',
    '#default_value' => variable_get('openlucius_core_show_new_badge', 0),
    '#weight'        => 2,
  );

  // Enable teams.
  $form['openlucius_core_enable_teams'] = array(
    '#title'         => t('Use teams'),
    '#description'   => t('Do you want to use teams?'),
    '#type'          => 'checkbox',
    '#default_value' => variable_get('openlucius_core_enable_teams', 1),
    '#weight'        => 3,
  );

  // Checkbox to cache private files.
  $form['openlucius_core_cache_private_files'] = array(
    '#title'         => t('Cache private files'),
    '#description'   => t('Do you want to enable private file caching?'),
    '#type'          => 'checkbox',
    '#default_value' => variable_get('openlucius_core_cache_private_files', 0),
    '#weight'        => 4,
  );

  // Checkbox for the document-navigation.
  $form['openlucius_core_fancytree_documents'] = array(
    '#title'         => t('Enable fancy tree for documents navigation'),
    '#description'   => t('Do you want to enable fancy tree for documents navigation?'),
    '#type'          => 'checkbox',
    '#default_value' => variable_get('openlucius_core_fancytree_documents', 1),
    '#weight'        => 5,
  );

  // Checkbox to cluster the recent stuff.
  $form['openlucius_core_notify_user_created'] = array(
    '#title'         => t('Notify admins of new account'),
    '#description'   => t('Do you want to send admins an email when a user is created?'),
    '#type'          => 'checkbox',
    '#default_value' => variable_get('openlucius_core_notify_user_created', 0),
    '#weight'        => 6,
  );

  // The group dropdown title.
  $form['openlucius_core_group_dropdown_title'] = array(
    '#title'         => t('Groups dropdown title'),
    '#description'   => t('The title of the groups dropdown'),
    '#type'          => 'textfield',
    '#default_value' => variable_get('openlucius_core_group_dropdown_title', t('Groups')),
    '#weight'        => 10,
  );

  // The group add button title.
  $form['openlucius_core_group_add_title'] = array(
    '#title'         => t('Groups add button title'),
    '#description'   => t('The title of the add group button'),
    '#type'          => 'textfield',
    '#default_value' => variable_get('openlucius_core_group_add_title', t('Group')),
    '#weight'        => 11,
  );

  // The recent stuff limit (pager).
  $form['openlucius_core_recent_stuff_limit'] = array(
    '#title'         => t('Items per page'),
    '#description'   => t('The amount of recent stuff items to show on each page'),
    '#type'          => 'textfield',
    '#default_value' => variable_get('openlucius_core_recent_stuff_limit', OPENLUCIUS_CORE_OPENLUCIUS_RECENT_STUFF_LIMIT),
    '#weight'        => 12,
  );

  // The group activity limit (pager).
  $form['openlucius_core_group_recent_stuff_limit'] = array(
    '#title'         => t('Amount of group activity items'),
    '#description'   => t('The amount of group activity items to show on each page'),
    '#type'          => 'textfield',
    '#default_value' => variable_get('openlucius_core_group_recent_stuff_limit', OPENLUCIUS_CORE_OPENLUCIUS_GROUP_RECENT_STUFF_LIMIT),
    '#weight'        => 13,
  );

  // The group activity limit (pager).
  $form['openlucius_core_user_recent_stuff_limit'] = array(
    '#title'         => t('Amount of user activity items'),
    '#description'   => t('The amount of user activity items to show on their dashboard'),
    '#type'          => 'textfield',
    '#default_value' => variable_get('openlucius_core_user_recent_stuff_limit', OPENLUCIUS_CORE_OPENLUCIUS_USER_RECENT_STUFF_LIMIT),
    '#weight'        => 14,
  );

  // The tasks in task list on dashboard limit.
  $form['openlucius_core_dashboard_todo_limit'] = array(
    '#title'         => t('Amount of tasks before show more'),
    '#description'   => t('The amount of tasks on the dashboard before adding a show more button'),
    '#type'          => 'textfield',
    '#default_value' => variable_get('openlucius_core_dashboard_todo_limit', OPENLUCIUS_CORE_DASHBOARD_TODO_LIMIT),
    '#weight'        => 15,
  );

  $form['openlucius_core_read_more_limit'] = array(
    '#title'         => t('Amount characters for read more processing'),
    '#description'   => t('The soft limit for the read more.'),
    '#type'          => 'textfield',
    '#default_value' => variable_get('openlucius_core_read_more_limit', OPENLUCIUS_CORE_READ_MORE_LIMIT),
    '#weight'        => 16,
  );

  $form['help_settings'] = array(
    '#type'   => 'fieldset',
    '#title'  => t('Feedback settings'),
    '#weight' => 17,
  );

  $form['help_settings']['openlucius_feedback_enabled'] = array(
    '#type'          => 'checkbox',
    '#title'         => t('Enable feedback block'),
    '#default_value' => variable_get('openlucius_feedback_enabled', 0),
    '#weight'        => 18,
  );

  $form['help_settings']['openlucius_feedback_target'] = array(
    '#type'          => 'textfield',
    '#title'         => t('The target mail address'),
    '#description'   => t('Who should receive the feedback? Please enter an email address'),
    '#default_value' => variable_get('openlucius_feedback_target', 'info@openlucius.com'),
    '#weight'        => 19,
  );

  // Add callback for cache clear.
  $form['#submit'][] = 'openlucius_core_clear_caches';

  return system_settings_form($form);
}

/**
 * Callback for clearing caches after a form submit.
 */
function openlucius_core_clear_caches($form, &$form_state) {
  cache_clear_all();
}

/**
 * Implements hook_views_plugins().
 */
function openlucius_core_views_plugins() {
  $plugins = array(
    'access' => array(
      'openlucius_core_custom_access'      => array(
        'title'   => t('Custom access check for groups'),
        'help'    => t('This is a custom access plugin for group access'),
        'handler' => 'openlucius_core_group_access_plugin',
        'path'    => drupal_get_path('module', 'openlucius_core'),
      ),
      'openlucius_core_custom_feed_access' => array(
        'title'   => t('Custom access check for ical feeds'),
        'help'    => t('This is a custom access plugin for ical feeds access'),
        'handler' => 'openlucius_core_ical_feed_access',
        'path'    => drupal_get_path('module', 'openlucius_core'),
      ),
    ),
  );

  return $plugins;
}

/**
 * Implements hook_preprocess_views_view_fields().
 */
function openlucius_core_preprocess_views_view_fields(&$vars) {
  $view = $vars['view'];

  // Alter views fields for users in groups, we need the edit url.
  if (user_access('create ol_group content') && $view->name == 'users_in_groups' && $view->current_display == 'page' && !empty($vars['fields']['nothing']->content)) {
    // We can't remove users from the all-users page.
    $icon = '<span class="glyphicon glyphicon-remove"></span>';
    $url = 'group-users/removefromgroup/' . $vars['view']->args[0] . '/' . $vars['row']->uid;
    $vars['fields']['nothing']->content = '<a href="' . url($url, array('query' => drupal_get_destination())) . '">' . $icon . '</a>';
  }
}

/**
 * Implements hook_views_query_alter().
 */
function openlucius_core_views_query_alter(&$view, &$query) {

  // Check if this is the user search view.
  if ($view->name == 'user_search' && module_exists('realname')) {

    // Create views join for realname.
    $join = new views_join();
    $join->table = 'realname';
    $join->left_table = 'users';
    $join->left_field = 'uid';
    $join->field = 'uid';
    $join->type = 'LEFT';
    $join->extra_type = 'AND';
    $join->adjusted = TRUE;

    // Perform the join.
    $query->table_queue['realname'] = array(
      'table'        => 'realname',
      'relationship' => 'users',
      'alias'        => 'realname',
      'join'         => $join,
    );

    // Loop through where to find the concat_ws formula.
    foreach ($query->where as $key => &$w) {

      // Loop through conditions.
      foreach ($w['conditions'] as &$condition) {

        // Check if we have the correct field.
        if (stristr($condition['field'], 'CONCAT_WS')) {

          // Fetch the content from in between the braces.
          preg_match_all('/\(+(.*?)\)/', $condition['field'], $matches);

          // Check if we have a match.
          if (!empty($matches[1][0])) {

            // Append the realname to the concat_ws.
            $condition['field'] = str_replace($matches[1][0], $matches[1][0] . ",' ', realname.realname", $condition['field']);
          }
        }
      }
    }
  }

  // Check if this is the user groups view.
  if ($view->name == 'users_in_groups') {

    // Check for the new users block (block_1).
    if ($view->current_display == 'block_1') {

      // The logged in user.
      global $user;

      // Check the permissions of the logged in user.
      if (openlucius_core_user_is_client()) {

        // Loop through the query where statements.
        foreach ($query->where as $key_where => $where) {

          // Loop through all conditions.
          foreach ($where['conditions'] as $key_condition => $condition) {

            // Check if the field is field_group_nid.
            if ($condition['field'] == 'field_data_field_groups.field_groups_nid') {

              // Change the condition to be IN (in array).
              $query->where[$key_where]['conditions'][$key_condition]['operator'] = 'IN';

              // Change the groups to the groups you are in.
              $query->where[$key_where]['conditions'][$key_condition]['value'] = openlucius_core_fetch_user_groups($user->uid);
            }
          }
        }
      }
    }
    // Check if this is the page.
    elseif ($view->current_display == 'page' && !empty($view->args) && openlucius_core_is_open_group($view->args[0])) {

      // Check if this is a group with clients.
      $group_with_clients = openlucius_core_is_node_with_clients($view->args[0]);

      // Check if we have where conditions.
      if (!empty($query->where)) {

        // Loop through items.
        foreach ($query->where as $item_key => &$item) {

          // Loop through and check if we can find a field_data_field_groups.
          foreach ($item as $key => &$condition) {

            // Fetch field.
            $field = !empty($condition[0]['field']) ? $condition[0]['field'] : '';

            // Check for groups field as we replace that one.
            if (strpos($field, 'field_data_field_groups') !== FALSE) {

              // Unset item.
              unset($query->where[$item_key]);

              // If this is a group without clients exclude clients.
              if (!$group_with_clients) {

                // Create views join for roles.
                $join = new views_join();
                $join->table = 'users_roles';
                $join->left_table = 'users';
                $join->left_field = 'uid';
                $join->field = 'uid';
                $join->type = 'INNER';

                // Perform the join.
                $query->table_queue['users_roles'] = array(
                  'table'        => 'users_roles',
                  'relationship' => 'users',
                  'alias'        => 'users_roles',
                  'join'         => $join,
                );

                // Add the where condition.
                $query->where[] = array(
                  'conditions' => array(
                    array(
                      'field'    => 'users_roles.rid',
                      'value'    => OPENLUCIUS_CORE_OPENLUCIUS_CLIENT_ROLE,
                      'operator' => '<>',
                    ),
                  ),
                  'args'       => array(),
                  'type'       => 'AND',
                );
              }
            }
          }
        }
      }
    }
    elseif ($view->current_display == 'page' && module_exists('realname')) {

      // Check if we have where conditions.
      if (!empty($query->where)) {

        // Loop through items.
        foreach ($query->where as $item_key => &$item) {

          // Loop through and check if we can find a users.name field.
          foreach ($item as $key => &$condition) {

            // Fetch field.
            $field = !empty($condition[0]['field']) ? $condition[0]['field'] : '';

            // Check for groups field as we replace that one.
            if (strpos($field, 'users.name') !== FALSE) {

              // Copy value for new condition.
              $value = $condition[0]['value'];

              // Unset old item.
              unset($query->where[$item_key][$key]);

              // Create views join for roles.
              $join = new views_join();
              $join->table = 'realname';
              $join->left_table = 'users';
              $join->left_field = 'uid';
              $join->field = 'uid';
              $join->type = 'LEFT';
              $join->extra_type = 'AND';
              $join->adjusted = TRUE;

              // Perform the join.
              $query->table_queue['realname'] = array(
                'table'        => 'realname',
                'relationship' => 'users',
                'alias'        => 'realname',
                'join'         => $join,
              );

              // Add the where condition.
              $query->where[] = array(
                'conditions' => array(
                  array(
                    'field'    => 'users.name',
                    'value'    => $value,
                    'operator' => 'LIKE',
                  ),
                  array(
                    'field'    => 'realname.realname',
                    'value'    => $value,
                    'operator' => 'LIKE',
                  ),
                ),
                'args'       => array(),
                'type'       => 'OR',
              );
            }
          }
        }
      }
    }
    elseif ($view->current_display == 'page_1' && module_exists('realname')) {
      // Holder for the name condition.
      $old_condition = NULL;

      // Check if we have where conditions.
      if (!empty($query->where)) {

        // Loop through items.
        foreach ($query->where as $item_key => &$where_list) {

          if (isset($where_list['conditions'])) {
            foreach ($where_list['conditions'] as $key => $condition) {

              // Copy old condition.
              if ($condition['field'] == 'users.name') {
                $old_condition = $condition;
                unset($where_list['conditions'][$key]);
              }
            }
          }
        }

        // Only continue the merge if we have the condition.
        if (!empty($old_condition)) {

          // Create views join for roles.
          $join = new views_join();
          $join->table = 'realname';
          $join->left_table = 'users';
          $join->left_field = 'uid';
          $join->field = 'uid';
          $join->type = 'LEFT';
          $join->extra_type = 'AND';
          $join->adjusted = TRUE;

          // Perform the join.
          $query->table_queue['realname'] = array(
            'table'        => 'realname',
            'relationship' => 'users',
            'alias'        => 'realname',
            'join'         => $join,
          );

          // Copy and rename field.
          $real_name_condition = $old_condition;
          $real_name_condition['field'] = 'realname.realname';

          // Append to where.
          $query->where[] = array(
            'conditions' => array(
              $old_condition,
              $real_name_condition,
            ),
            'args'       => array(),
            'type'       => 'OR',
          );
        }
      }
    }
  }
  // Fix for missing tasks in calendar.
  elseif ($view->name == 'group_calendar' && ($view->current_display == 'page_4' || $view->current_display == 'page_5')) {

    // Check if the contextual filter has been set.
    if (isset($query->where['date'])) {

      // Change the from date format to YYY-MM-DD.
      $view->query->where['date']['conditions'][0]['field'] = "DATE_FORMAT(FROM_UNIXTIME(field_data_field_todo_due_date_singledate.field_todo_due_date_singledate_value), '%Y-%m-%d') >= :node_date_argument AND DATE_FORMAT(FROM_UNIXTIME(field_data_field_todo_due_date_singledate.field_todo_due_date_singledate_value), '%Y-%m') <= :node_date_argument1";

      // Get the date given by the calendar.
      $date = $view->query->where['date']['conditions'][0]['value'][':node_date_argument'];

      // Subtract one day from the date to allow the missing items
      // to be viewed.
      $new_date = (date('Y-m-d', strtotime($date . ' this year -1 day')));
      $view->query->where['date']['conditions'][0]['value'][':node_date_argument'] = $new_date;
    }
  }
  elseif ($view->name == 'user_search') {

    // Find all combine fields and make them case insensitive.
    // @see https://www.drupal.org/node/1805272#comment-7998079
    foreach ($query->where as $group_key => $group) {
      foreach ($group['conditions'] as $key => $condition) {
        if (is_string($condition['field']) && (preg_match('/:views_combine/', $condition['field']))) {
          $query->where[$group_key]['conditions'][$key]['field'] = $condition['field'] . ' COLLATE utf8_general_ci';
        }
      }
    }

    foreach ($query->where as $key_where => &$where) {
      // Loop through all conditions.
      foreach ($where['conditions'] as $key_condition => &$condition) {
        if ($condition['field'] == 'users.uid') {
          // Change the condition to be IN (in array).
          $query->where[$key_where]['conditions'][$key_condition]['operator'] = 'IN';

          // Change the groups to the groups you are in.
          if (openlucius_core_user_is_client()) {
            $query->where[$key_where]['conditions'][$key_condition]['value'] = openlucius_core_fetch_associated_users(TRUE);
          }

          // Allow users to find all people (just like the all users page).
          else {
            $query->where[$key_where]['conditions'][$key_condition]['value'] = openlucius_core_fetch_all_active_uids();
          }
        }
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function openlucius_core_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  // Skip this form.
  if ($form_id == 'authorize_filetransfer_form') {
    return FALSE;
  }

  $menu_item = menu_get_item();

  if ($form_id == 'user_register_form') {
    $form['account']['pass']['#required'] = FALSE;
    $form['account']['pass']['#access'] = FALSE;
    $form['account']['status']['#access'] = FALSE;
  }

  // We don't want a client or standard user to have perms here.
  if ($form_id == 'user_profile_form' || $form_id == 'user_register_form') {

    // When uid1 adds a user, group is not required, so onboarding initial
    // end-user brings no problems.
    if ($user->uid == 1) {
      $form['field_groups'][LANGUAGE_NONE]['#required'] = FALSE;
    }

    // Add extra validation.
    $form['#validate'][] = 'openlucius_core_profile_validate';

    // Notify is usually needed, check it by default.
    $form['account']['notify']['#default_value'] = 1;
    $form['account']['notify']['#access'] = FALSE;
    $form['actions']['cancel']['#access'] = FALSE;

    // If a user user is editing another user pass an extra hidden parameter
    // to prevent them from accidentally removing that user from groups.
    if (isset($form['#user']->uid) && $form['#user']->uid !== $user->uid) {
      $form['edit_user_profile'] = array(
        '#type'  => 'hidden',
        '#value' => TRUE,
      );
    }

    // Replace checkboxes for 'single role'.
    $user_roles2 = $form['account']['roles'];
    // Replace title.
    $user_roles2['#title'] = t('Role');
    // Replace.
    $form['account']['roles2'] = $user_roles2;
    $form['account']['roles2']['#type'] = 'select';

    // Set client to default on empty.
    if (empty($form['account']['roles']['#default_value'])) {
      // Set default to client.
      $form['account']['roles']['#default_value'][OPENLUCIUS_CORE_OPENLUCIUS_DEFAULT_ROLE] = OPENLUCIUS_CORE_OPENLUCIUS_DEFAULT_ROLE;
      $form['account']['roles2']['#default_value'][OPENLUCIUS_CORE_OPENLUCIUS_DEFAULT_ROLE] = OPENLUCIUS_CORE_OPENLUCIUS_DEFAULT_ROLE;
    }

    // Add warning message.
    $form['hidden_message']['hidden_message'] = array(
      '#type'  => 'hidden',
      '#value' => t('Changing a user to client will remove them from all non client groups. Are you sure?'),
    );

    if (!user_access('administer users')) {
      $form['field_user_company']['#access'] = FALSE;
      $form['field_user_teams']['#access'] = FALSE;

      // Unset "Language settings" for now.
      $form['locale']['#access'] = FALSE;
    }

    if (!user_access('administer users') && !user_access('access user profile groups')) {
      $form['field_groups']['#access'] = FALSE;
    }

    // Check permission for administer users.
    if (!user_access('administer users')) {

      // Hide roles for non administrative users.
      $form['account']['roles']['#access'] = FALSE;
    }

    // Only super can change admin language and language.
    if ($user->uid != 1) {

      // Hide the admin language.
      if (isset($form['admin_language'])) {
        $form['admin_language']['#access'] = 0;
      }
    }
    // Remove admin role if not admin or super.
    if (!in_array('admin', $user->roles) && $user->uid != 1) {
      // Only admin can make people admin.
      foreach ($form['account']['roles']['#options'] as $key => $value) {
        if ($value == 'admin') {
          $adminkey = $key;
        }

        if (!empty($adminkey)) {
          unset($form['account']['roles']['#options'][$adminkey]);
          if (isset($form['account']['roles2'])) {
            unset($form['account']['roles2']['#options'][$adminkey]);
          }
        }
      }
    }
  }

  // Place loop-in in a fieldset for node/adds.
  if (isset($form['field_shared_loopin_email'])) {
    $form['field_shared_loopin_email']['#type'] = 'fieldset';
    $form['field_shared_loopin_email']['#weight'] = 2100;
    $form['field_shared_loopin_email']['#title'] = t('E-mail externals');
    $form['field_shared_loopin_email']['#collapsible'] = 1;
    $form['field_shared_loopin_email']['#collapsed'] = 1;
  }

  // We are in a node/add/ or node/edit form.
  if (isset($form['#node_edit_form']) && $form['#node_edit_form'] == 1) {

    // If we are on the edit form.
    if ($form['nid']['#value'] != NULL) {
      // TODO make Drupal.t work in jQuery this is unnecessary.
      if ($form_id == 'ol_group_node_form') {
        // Add hidden text to form.
        $form['hidden_message'] = array(
          '#type'  => 'hidden',
          '#value' => t('By changing this group to a group without clients, all clients will be removed. Are you sure?'),
        );
      }
    }

    // No revision info needed for now.
    $form['revision_information']['#access'] = 0;

    // Check if we are adding a new piece of content in a group.
    if (isset($form['#node_edit_form']) && $form['#node_edit_form'] && isset($form['nid']) && $form['nid']['#value'] == NULL) {

      // Check Group: is client access set to "Yes"? Load Group data.
      if (isset($menu_item['page_arguments'][1]) && is_numeric($menu_item['page_arguments'][1])) {
        $group_node = node_load($menu_item['page_arguments'][1]);
      }
      elseif (isset($menu_item['page_arguments'][1]) && is_object($menu_item['page_arguments'][1]) && $menu_item['page_arguments'][1]->type == 'ol_group') {
        $group_node = $menu_item['page_arguments'][1];
      }

      // Check if the form action has the group_id.
      if (empty($group_node)) {
        $parts = explode('/', $form['#action']);
        $last_part = end($parts);
        if (is_numeric($last_part) && openlucius_core_get_type_by_nid($last_part) == 'ol_group') {
          $group_node = node_load($last_part);
        }
      }

      if (!empty($group_node)) {
        if ($form['type']['#value'] != 'ol_group' && isset($form['field_shared_show_clients'])) {
          $wrapper = entity_metadata_wrapper('node', $group_node);

          // Hide if 0.
          if (!$wrapper->field_shared_show_clients->value()) {
            $form['field_shared_show_clients'][LANGUAGE_NONE]['#default_value'] = 0;
            $form['field_shared_show_clients']['#attributes']['style'] = array('display: none;');
            $form['field_shared_show_clients']['#is_hidden'] = TRUE;
          }

          // Hide 'show this to client' element for clients.
          if (openlucius_core_user_is_client()) {
            $form['field_shared_show_clients']['#attributes']['style'] = array('display: none;');
          }

          // Alter the weight so it comes after maximum time.
          $form['field_shared_group_reference']['#weight'] = 6;
          $form['field_shared_group_reference'][LANGUAGE_NONE]['#default_value'] = $group_node->nid;
        }
      }
    }

    // Check if we are editing a piece of content in a group.
    if (isset($form['#node_edit_form']) && $form['#node_edit_form'] && isset($form['nid']) && $form['nid']['#value'] != NULL) {

      if ($form['type']['#value'] != 'ol_group' && isset($form['field_shared_show_clients'])) {

        // Check Group: is client access set to "Yes"? Load Group data.
        $menu_object = menu_get_object();
        if (!empty($menu_object) && isset($menu_object->type)) {

          // Get the node wrapper.
          $node_wrapper = entity_metadata_wrapper('node', $menu_object);

          // Get the node group id.
          $node_group_id = $node_wrapper->field_shared_group_reference->value()->nid;

          // Check if this node has a group id.
          if (!empty($node_group_id)) {
            $loaded_node = node_load($node_group_id);
            $wrapper = entity_metadata_wrapper('node', $loaded_node);

            // Hide 'show this to client' element for Clients.
            if (!$wrapper->field_shared_show_clients->value() && $user->uid != 1) {
              $form['field_shared_show_clients'][LANGUAGE_NONE]['#default_value'] = 0;
              if (isset($form_state['openlucius_board_modal'])) {
                $form['field_shared_show_clients']['#attributes']['style'] = array('display: none;');
              }
            }
          }
          if (openlucius_core_user_is_client()) {
            $form['field_shared_show_clients']['#attributes']['style'] = array('display: none;');
          }
        }
      }
    }
  }

  // Check if node form.
  if (stristr($form_id, 'node_form')) {

    // Hide these items for clients on creation.
    if (openlucius_core_user_is_client()) {
      $fields = array(
        'field_todo_due_date_singledate',
        'field_todo_label',
        'field_todo_list_reference',
        'field_todo_user_reference',
        'field_shared_loopin_email',
        'field_todo_comm_show_clients',
        'field_shared_time_maximum',
        'field_todo_invoice_number',
      );

      foreach ($fields as $field) {
        if (isset($form[$field])) {
          $form[$field]['#attributes']['style'] = array('display: none;');
        }
      }
    }

    // Check the title.
    if (isset($form['title'])) {
      // If we are editing a file node, always add the title "Files".
      if ($form['type']['#value'] == "file") {
        $form['title']['#default_value'] = t("Files");
      }
      else {
        $form['title']['#attributes']['placeholder'] = strip_tags(t('New !type', array('!type' => node_type_get_name($form['type']['#value']))));
      }
    }

    // Hide and disable.
    if (isset($form['field_todo_weight'])) {
      $form['field_todo_weight']['#attributes']['style'] = array('display: none;');
      $form['field_todo_weight']['#disabled'] = TRUE;
    }

    // Check for group reference field.
    // There are certain lists with more than 2 options these should not be
    // disabled.
    if (isset($form['field_shared_group_reference']) && count($form['field_shared_group_reference'][LANGUAGE_NONE]['#options']) <= 2) {

      // TODO this causes issues with the new board module.
      // Get correct key, as the reference only contains one valid key grab
      // array keys and use second option.
      $keys = array_keys($form['field_shared_group_reference'][LANGUAGE_NONE]['#options']);
      if (isset($keys[1])) {
        $form['field_shared_group_reference'][LANGUAGE_NONE]['#default_value'] = $keys[1];
      }
      else {
        $form['field_shared_group_reference'][LANGUAGE_NONE]['#default_value'] = $keys[0];
      }

      // Disable field.
      $form['field_shared_group_reference']['#disabled'] = TRUE;

      // Replace cursor as this is just weird.
      $form['field_shared_group_reference']['#attributes']['style'][] = 'cursor: no-drop;';
    }

    // Only assign to users in this group / add default list using url param.
    if (stristr($form_id, 'ol_todo_node_form')) {

      // Chek if the group id was stored in the form_state.
      if (!isset($form_state['openlucius_core']['group_id'])) {

        // Load from form if possible.
        if (isset($form['#node']) && isset($form['#node']->field_shared_group_reference[LANGUAGE_NONE][0]['nid'])) {
          $group_id = $form['#node']->field_shared_group_reference[LANGUAGE_NONE][0]['nid'];
        }
        // This should happen on node/add.
        else {
          if (isset($menu_item['page_arguments'][1])) {
            $group_id = !is_object($menu_item['page_arguments'][1]) ? $menu_item['page_arguments'][1] : $menu_item['page_arguments'][1]->nid;
          }
          else {
            $group_id = 0;
          }
        }
        $form_state['openlucius_core']['group_id'] = $group_id;
      }
      $group_id = $form_state['openlucius_core']['group_id'];

      // Filter the lists.
      if (!empty($group_id)) {
        $form['field_todo_list_reference'][LANGUAGE_NONE]['#options'] = openlucius_core_get_lists_in_group($group_id);
      }

      // Check url for default list.
      if (!empty($menu_item['page_arguments'][2])) {
        $form['field_todo_list_reference'][LANGUAGE_NONE]['#default_value'] = $menu_item['page_arguments'][2];
      }
    }
  }

  // For comments and node_form.
  if (stristr($form_id, 'comment') || (stristr($form_id, 'node_form') && isset($form['type']) && in_array($form['type']['#value'], openlucius_core_get_content_types()))) {
    $form['field_wrapper'] = array(
      '#type'       => 'fieldset',
      '#attributes' => array(
        'class' => array('notifies'),
      ),
      '#weight'     => 100,
    );

    $plus_icon = '<span class="glyphicon glyphicon-plus-sign"></span>';
    $minus_icon = '<span class="glyphicon glyphicon-minus-sign"></span>';
    $uncheck = '<span class="uncheck-all hidden">' . t('Uncheck all') . $minus_icon . '</span>';

    // Add notify to node_form.
    $form['field_wrapper']['notify_individual_fieldset'] = array(
      '#type'       => 'fieldset',
      '#title'      => t('Notify Users') . '<span class="check-all">' . t('Select all') . $plus_icon . '</span>' . $uncheck,
      '#attributes' => array(
        'class' => array('inividual-fieldset'),
      ),
      '#weight'     => 8,
    );

    // Initiate empty.
    $node_id = NULL;

    if (!isset($form_state['openlucius_core']['node_id'])) {
      // These switch from url to url.
      if ($menu_item['page_callback'] == 'node_add') {
        $node_id = $menu_item['page_arguments'][1];
      }
      elseif ($menu_item['page_callback'] == 'node_page_edit' && isset($form['field_shared_group_reference'][LANGUAGE_NONE]['#default_value'][0])) {
        $node_id = $form['field_shared_group_reference'][LANGUAGE_NONE]['#default_value'][0];
      }
      else {
        if (isset($form['#node']->field_shared_group_reference[LANGUAGE_NONE][0]['nid'])) {
          $node_id = $form['#node']->field_shared_group_reference[LANGUAGE_NONE][0]['nid'];
        }
      }

      // Check if NULL.
      if ($node_id == NULL) {
        if (!empty($menu_item['page_arguments'][1]) && is_numeric($menu_item['page_arguments'][1])) {
          $node_id = $menu_item['page_arguments'][1];
        }

        // Last but not least try the session value.
        if ($node_id == NULL) {
          $node_id = $_SESSION['active_group'];
        }
      }
      $form_state['openlucius_core']['node_id'] = $node_id;
    }

    $node_id = $form_state['openlucius_core']['node_id'];

    // Initialize empty users array.
    $all_users = array();

    // Check if there is a group nid and the shared group reference field
    // is available, fix for session group nid.
    if (!empty($node_id) && (isset($form['field_shared_group_reference']) || $form['#entity_type'] == 'comment')) {

      // Check if this is an open group.
      $is_open_group = openlucius_core_is_open_group($node_id);
      if ($is_open_group) {

        // Fetch open group users.
        $all_users = openlucius_core_fetch_open_group_users($node_id);
      }
      // Fetch all users in group.
      else {
        if (!empty($node_id)) {
          $all_users = openlucius_core_fetch_users('group', $node_id);
        }
      }
    }
    else {
      drupal_alter('openlucius_core_fetch_notification_users', $all_users);
    }

    // Initiate array.
    $options = array();

    // Loop through all users.
    foreach ($all_users as $key => $item) {
      if (!empty($item->realname)) {
        // Set realname.
        $options[$key] = check_plain($item->realname);
      }
      else {
        // Set username.
        $options[$key] = check_plain($item->name);
      }
    }

    // Notify individual.
    $form['field_wrapper']['notify_individual_fieldset']['notify_individual'] = array(
      '#type'    => 'checkboxes',
      '#options' => $options,
      '#weight'  => 10,
    );

    // No passing by reference.
    $teams = openlucius_core_fetch_all_of_type('team');

    // Get the status of teams.
    $teams_enabled = variable_get('openlucius_core_enable_teams', 1);

    // Check if there are teams.
    if (!$teams_enabled) {

      // Add class to the notify wrapper.
      $form['field_wrapper']['notify_individual_fieldset']['#attributes']['class'][] = 'no-teams';
    }

    // Check if teams are enabled.
    if ($teams_enabled) {

      // Check if there are teams.
      $form['field_wrapper']['team_companies'] = array(
        '#type'       => 'fieldset',
        '#title'      => t('Notify Teams'),
        '#attributes' => array(
          'class' => array(
            'team-companies',
          ),
        ),
        '#weight'     => 9,
      );

      // Initiate empty array.
      $options = array();

      // Initiate array.
      $form['hidden_teams'] = array();

      // Loop through teams.
      foreach ($teams as $team_key => $team_item) {

        if (isset($team_item)) {

          // Fetch team users.
          $_users = openlucius_core_fetch_users('team', $team_key);

          // Add to options, for checkboxes this is not sanitized.
          $options['team_' . $team_key] = check_plain($team_item);

          // Place in hidden element for js.
          $form['hidden_teams']['team_' . $team_key] = array(
            '#type'  => 'hidden',
            '#value' => implode(',', array_keys($_users)),
          );
        }
      }

      $form['field_wrapper']['team_companies']['items'] = array(
        '#type'    => 'checkboxes',
        '#options' => $options,
      );
    }

    $form['actions']['#weight'] = 9000;
  }

  // Code for disabling the open and closed status in the todo vocabulary.
  // Get the variable values for the open and closed taxonomy terms.
  $closed_term = taxonomy_term_load(variable_get('todo_closedstatus_tid'))->tid;
  $open_term = taxonomy_term_load(variable_get('todo_openstatus_tid'))->tid;

  // If at the taxonomy vocabulary (with terms listed).
  if ($form_id == 'taxonomy_overview_terms') {

    // Add the do not remove text to these two terms.
    $form['tid:' . $open_term . ':0']['view']['#title'] .= ' (' . t('OpenLucius core status, do not remove') . ')';
    $form['tid:' . $closed_term . ':0']['view']['#title'] .= ' (' . t('OpenLucius core status, do not remove') . ')';

    // Unset the edit button for the open and closed term.
    $form['tid:' . $open_term . ':0']['edit']['#access'] = FALSE;
    $form['tid:' . $closed_term . ':0']['edit']['#access'] = FALSE;
  }

  // Exception for group_calendar month.
  if (isset($form['field_todo_user_reference_uid']) && $menu_item['path'] == 'group-calendar/month' && !empty($menu_item['page_arguments'][3])) {

    // Get the users in this active group.
    $users_in_group = openlucius_core_fetch_users('group', $menu_item['page_arguments'][3]);

    // Loop through users and rebuild new array.
    foreach ($users_in_group as $users) {
      $assigned_array[$users->uid] = $users->name;
    }

    // Initiate the all value since it's needed.
    $assigned_array['All'] = '- ' . t('Any') . ' -';

    // Sort the array keys.
    ksort($assigned_array);

    // Rebuild the options to pick.
    $form['field_todo_user_reference_uid']['#options'] = $assigned_array;
  }

  // Form alter for node/add Todo's:.
  // We don't want the type fields if there are no terms in that vocabulary.
  // TODO move all of this and other alters to
  // their hook_form_BASE_FORM_ID_alters.
  if ($form_id == 'ol_todo_list_node_form') {

    // $fixme: need to be language independent
    // Count the terms.
    $term_count = count($form['field_todolist_type'][LANGUAGE_NONE]['#options']);

    // If there is <=1 option ('none' counted), hide the field (there is no
    // term added in this voc).
    if ($term_count <= 1) {
      $form['field_todolist_type']['#access'] = FALSE;
    }
  }

  // We don't want clients to access the notify and loop-in e-mailing fields.
  // We do this to prevent clients from spamming.
  // Check if we are on node/add page.
  if (isset($form['#node_edit_form'])) {
    if (!user_access('ol show non-client content', $user)) {
      // Hide the loop-in e-mail wrapper.
      $form['field_shared_loopin_email']['#access'] = FALSE;
      // Hide the notify wrapper.
      $form['field_wrapper']['#access'] = FALSE;
    }
  }

  // We don't want the possibility to send a loop-in e-mail on node/edit.
  // Removed the field there.
  if ($menu_item['page_callback'] == 'node_page_edit' && isset($form['field_shared_loopin_email'])) {

    // Hide the loop-in e-mail wrapper.
    $form['field_shared_loopin_email']['#access'] = FALSE;
  }

  if ($form_id == 'openlucius_core_add_todo_form') {
    $form['todo_title']['#attributes']['placeholder'] = $form['todo_title']['#title'];
    $form['todo_title']['#title_display'] = 'invisible';
  }
}

/**
 * Implements hook_form_submit().
 */
function openlucius_core_comment_node_ol_todo_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  // Loop all the values in the form.
  foreach ($values as $key => $value) {
    // Check if its a field and the field is allowed to be altered.
    if (strpos($key, 'field_') === 0 && !in_array($key, $values['comment_alter']['fields'])) {
      // It is not allowed to be altered, unset it from the node
      // to prevent overwriting values with shared fields.
      if (isset($form_state['node']->$key)) {
        unset($form_state['node']->$key);
      }
      if (isset($form['#node']->$key)) {
        unset($form['#node']->$key);
      }
    }
  }
}

/**
 * Implements hook_node_access_records().
 */
function openlucius_core_node_access_records($node) {
  if (!empty($node)) {

    // Get 'show clients' field.
    $show_clients = field_get_items('node', $node, 'field_shared_show_clients');

    // Fetch 'show clients' value.
    $client_switch = !empty($show_clients) ? $show_clients[0]['value'] == 0 : FALSE;

    // Get 'open group' field.
    $open_group = field_get_items('node', $node, 'field_group_is_open');

    // Check if this group is open.
    $group_is_open = !empty($open_group) ? $open_group[0]['value'] == 1 : FALSE;

    // Initialise grants array.
    $grants = array();
    $openlucius_core_types = openlucius_core_get_content_types();

    // We start with setting grants for group.
    if ($node->type == "ol_group") {

      $grants[] = array(
        'realm'        => OPENLUCIUS_CORE_NODE_VIEW_REALM,
        'gid'          => $node->nid,
        'grant_view'   => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority'     => 0,
      );

      // Add open group grant if the group is set to open.
      if ($group_is_open) {

        $grants[] = array(
          'realm'        => OPENLUCIUS_CORE_OPEN_GROUP_NODE_VIEW_REALM,
          'gid'          => $node->nid,
          'grant_view'   => 1,
          'grant_update' => 0,
          'grant_delete' => 0,
          'priority'     => 0,
        );
      }

      // Add extra realm for non-client groups.
      if ($client_switch) {
        $grants[] = array(
          'realm'        => OPENLUCIUS_CORE_NODE_NONCLIENTS_VIEW_REALM,
          'gid'          => $node->nid,
          'grant_view'   => 1,
          'grant_update' => 0,
          'grant_delete' => 0,
          'priority'     => 10,
        );

        // Add open group non clients grant if the group is set to open.
        if ($group_is_open) {

          $grants[] = array(
            'realm'        => OPENLUCIUS_CORE_OPEN_GROUP_NODE_NONCLIENTS_VIEW_REALM,
            'gid'          => $node->nid,
            'grant_view'   => 1,
            'grant_update' => 0,
            'grant_delete' => 0,
            'priority'     => 30,
          );
        }
      }
    }

    // So now we've done Groups, it's time for other content types.
    // We need the Group reference nid from these guys, not nid.
    // Companies and teams are not referenced to a group in this context, skip
    // them.
    elseif (in_array($node->type, $openlucius_core_types)) {

      // Check reference field.
      if (!empty($node->field_shared_group_reference)) {

        // Get reference fields value.
        $shared_group_reference = field_get_items('node', $node, 'field_shared_group_reference');

        // Fetch shared group reference value.
        $nid = !empty($shared_group_reference) ? $shared_group_reference[0]['nid'] : 0;

        // Security message, when nid does not exist, there is no Group
        // referenced, that can't be in OpenLucius.
        // However the group reference can be 0 for open file nodes.
        if (empty($nid) && (!isset($shared_group_reference[0]['nid']) && $shared_group_reference[0]['nid'] == 0 && $node->type == 'file')) {
          drupal_set_message(t("Security Warning! This node is inconsistent with the OpenLucius Grants system") . ' ' . l($node->title, "node/" . $node->nid), "error");
        }

        // Set Grants.
        else {
          $grants[] = array(
            'realm'        => OPENLUCIUS_CORE_NODE_VIEW_REALM,
            'gid'          => $nid,
            'grant_view'   => 1,
            'grant_update' => 0,
            'grant_delete' => 0,
            'priority'     => 0,
          );
          $grants[] = array(
            'realm'        => OPENLUCIUS_CORE_NODE_EDIT_REALM,
            'gid'          => $nid,
            'grant_view'   => 1,
            'grant_update' => 1,
            'grant_delete' => 0,
            'priority'     => 0,
          );

          // Add open group grant if the group is set to open.
          if ($group_is_open) {

            $grants[] = array(
              'realm'        => OPENLUCIUS_CORE_OPEN_GROUP_NODE_VIEW_REALM,
              'gid'          => $nid,
              'grant_view'   => 1,
              'grant_update' => 0,
              'grant_delete' => 0,
              'priority'     => 10,
            );

            $grants[] = array(
              'realm'        => OPENLUCIUS_CORE_OPEN_GROUP_NODE_EDIT_REALM,
              'gid'          => $nid,
              'grant_view'   => 1,
              'grant_update' => 1,
              'grant_delete' => 0,
              'priority'     => 10,
            );
          }

          // Add extra realm for non-client nodes.
          if ($client_switch) {
            $grants[] = array(
              'realm'        => OPENLUCIUS_CORE_NODE_NONCLIENTS_VIEW_REALM,
              'gid'          => $nid,
              'grant_view'   => 1,
              'grant_update' => 0,
              'grant_delete' => 0,
              'priority'     => 10,
            );
            $grants[] = array(
              'realm'        => OPENLUCIUS_CORE_NODE_NONCLIENTS_EDIT_REALM,
              'gid'          => $nid,
              'grant_view'   => 1,
              'grant_update' => 1,
              'grant_delete' => 0,
              'priority'     => 10,
            );

            // Add open group grant if the group is set to open.
            if ($group_is_open) {

              $grants[] = array(
                'realm'        => OPENLUCIUS_CORE_OPEN_GROUP_NODE_NONCLIENTS_VIEW_REALM,
                'gid'          => $nid,
                'grant_view'   => 1,
                'grant_update' => 0,
                'grant_delete' => 0,
                'priority'     => 30,
              );
              $grants[] = array(
                'realm'        => OPENLUCIUS_CORE_OPEN_GROUP_NODE_NONCLIENTS_EDIT_REALM,
                'gid'          => $nid,
                'grant_view'   => 1,
                'grant_update' => 1,
                'grant_delete' => 0,
                'priority'     => 30,
              );
            }
          }
        }
      }
    }

    // Return grants.
    return $grants;
  }
}

/**
 * Implements hook_node_grants().
 */
function openlucius_core_node_grants($account, $op) {

  // Initialize as NULL.
  $user = NULL;

  // Load user entity.
  if ($account->uid != 0) {
    $user = user_load($account->uid);
  }
  elseif (isset($_GET['hash'])) {
    $uid = openlucius_core_hash_to_uid($_GET['hash']);
    $user = user_load($uid);
  }

  // Initialize empty array and fill using user field if we have a user.
  $group_ids = array();
  if ($user !== NULL) {
    // Load groups that user is granted.
    $group_ids = field_get_items('user', $user, 'field_groups');
  }

  // Provide the user his group grants.
  $grants = array();

  if (!empty($group_ids)) {

    foreach ($group_ids as $data) {

      // Grants access for non-client nodes.
      if (user_access("ol show non-client content")) {
        $grants[OPENLUCIUS_CORE_NODE_NONCLIENTS_VIEW_REALM][] = $data['nid'];
      }
      if (user_access("create ol_group content")) {

        // Check if Group is Archived, then don't give edit perms.
        // @TODO: for efficiency, do custom query.
        $groupnode = node_load($data['nid']);
        if (isset($groupnode->status) && $groupnode->status == 1) {
          $grants[OPENLUCIUS_CORE_NODE_EDIT_REALM][] = $data['nid'];
          $grants[OPENLUCIUS_CORE_NODE_NONCLIENTS_EDIT_REALM][] = $data['nid'];
        }
      }

      // Grants access for all other the nodes in users group.
      $grants[OPENLUCIUS_CORE_NODE_VIEW_REALM][] = $data['nid'];
    }
  }
  else {
    // Check if we can tell if this is triggered for a search index call.
    // TODO figure out whether this is the only way, this is really slow.
    $e = new Exception();
    $trace = $e->getTrace();

    // Loop through all function calls before this one.
    foreach ($trace as $item) {

      // Check if this is called by the comment_node_update_index function.
      // As only comments seem to be missing from the index.
      if ($item['function'] == 'comment_node_update_index') {
        $group_ids = openlucius_core_fetch_groups();

        // Grant view access to all nodes.
        foreach ($group_ids as $nid) {
          $grants[OPENLUCIUS_CORE_NODE_NONCLIENTS_VIEW_REALM][] = $nid;
          $grants[OPENLUCIUS_CORE_NODE_VIEW_REALM][] = $nid;

          // Open group grants.
          $grants[OPENLUCIUS_CORE_OPEN_GROUP_NODE_NONCLIENTS_VIEW_REALM][] = $nid;
          $grants[OPENLUCIUS_CORE_OPEN_GROUP_NODE_VIEW_REALM][] = $nid;
        }
      }
    }
  }

  // Append the grants for open groups.
  $open_group_query = db_select('node', 'n')
    ->fields('n', array(
      'status',
      'nid',
    ))
    ->fields('c', array('field_shared_show_clients_value'))
    ->condition('o.field_group_is_open_value', 1, '=')
    ->condition('n.type', 'ol_group', '=');

  // Join for clients field.
  $open_group_query->join('field_data_field_shared_show_clients', 'c', 'n.nid = c.entity_id');

  // Join for open group value.
  $open_group_query->join('field_data_field_group_is_open', 'o', 'n.nid = o.entity_id');

  // Fetch open groups.
  $open_groups = $open_group_query->execute()->fetchAll();

  // Check if we have open groups.
  if (!empty($open_groups)) {

    // Loop through open groups.
    foreach ($open_groups as $group_data) {

      // Add the default grant.
      $grants[OPENLUCIUS_CORE_NODE_VIEW_REALM][] = $group_data->nid;

      // Add open group node view grant.
      $grants[OPENLUCIUS_CORE_OPEN_GROUP_NODE_VIEW_REALM][] = $group_data->nid;

      // This group is without clients check if the user has the permission.
      if (user_access("ol show non-client content")) {

        // Add the default grant.
        $grants[OPENLUCIUS_CORE_NODE_NONCLIENTS_VIEW_REALM][] = $group_data->nid;

        // Add the open group grant.
        $grants[OPENLUCIUS_CORE_OPEN_GROUP_NODE_NONCLIENTS_VIEW_REALM][] = $group_data->nid;
      }

      // Check if the user has access to the ol_group content.
      if (user_access("create ol_group content")) {

        // Check if the group is published.
        if ($group_data->status == 1) {

          // Add the default grants.
          $grants[OPENLUCIUS_CORE_NODE_EDIT_REALM][] = $group_data->nid;
          $grants[OPENLUCIUS_CORE_NODE_NONCLIENTS_EDIT_REALM][] = $group_data->nid;

          // Add the open group grants.
          $grants[OPENLUCIUS_CORE_OPEN_GROUP_NODE_EDIT_REALM][] = $group_data->nid;
          $grants[OPENLUCIUS_CORE_OPEN_GROUP_NODE_NONCLIENTS_EDIT_REALM][] = $group_data->nid;
        }
      }
    }
  }

  // Tell good old Drupal about users grants.
  return $grants;
}

/**
 * Function to fetch all groups within the openlucius environment.
 *
 * @param bool $published
 *   Whether or not to add only published nodes.
 * @param bool $alphabetical
 *   Whether or not to return the array alphabetically.
 *
 * @return array
 *   Returns all available groups.
 */
function openlucius_core_fetch_groups($published = TRUE, $alphabetical = FALSE, $keyed = FALSE) {

  $groups = db_select('node', 'n');
  $groups->fields('n', array('nid', 'title'));
  $groups->condition('type', 'ol_group', '=');

  if ($published) {
    $groups->condition('n.status', NODE_PUBLISHED);
  }

  if ($alphabetical) {
    $groups->orderBy('n.title', 'ASC');
  }

  if ($keyed) {
    return $groups->execute()->fetchAllKeyed(0, 1);
  }

  $groups = $groups->execute()->fetchAllKeyed(0, 0);

  return array_keys($groups);
}

/**
 * Implements hook_user_presave().
 */
function openlucius_core_user_presave(&$edit, $account, $category) {
  global $user;

  // If the user didn't have the client role. And is getting the client role.
  if (!isset($account->original->roles[OPENLUCIUS_CORE_OPENLUCIUS_CLIENT_ROLE]) && isset($edit['roles'][OPENLUCIUS_CORE_OPENLUCIUS_CLIENT_ROLE]) && $edit['roles'][OPENLUCIUS_CORE_OPENLUCIUS_CLIENT_ROLE] != 0) {

    // Fetch all non client groups with this user in them.
    $query = db_select('field_data_field_groups', 'f')
      ->fields('f', array('field_groups_nid'))
      ->condition('f.entity_id', $account->uid, '=')
      ->condition('f2.field_shared_show_clients_value', 0, '=');

    $query->join('field_data_field_shared_show_clients', 'f2', 'f.field_groups_nid = f2.entity_id');
    $result = $query->execute()->fetchAllKeyed(0, 0);
    $groups = array_keys($result);

    // Loop through user groups.
    foreach ($account->field_groups[LANGUAGE_NONE] as $key => $group) {
      // Check if in non client array.
      if (in_array($group['nid'], $groups)) {
        unset($account->field_groups[LANGUAGE_NONE][$key]);
      }
    }

    // Replace field_groups.
    $edit['field_groups'][LANGUAGE_NONE] = $account->field_groups[LANGUAGE_NONE];
  }

  // Check if the user editing the profile is the user him/herself.
  // Other users may not have the same groups as the editor. (Grants issue)
  // This may lead to a loss of groups if an admin is not in that group.
  if ($user->uid != 1 && isset($edit['edit_user_profile']) && $edit['edit_user_profile'] && $user->uid !== $account->uid && isset($account->original) && !user_access('administer openlucius configuration')) {
    $edit['field_groups'] = $account->original->field_groups;
  }

  // Check if the user has a hash, if not generate a hash.
  if (empty($edit['field_user_hash'][LANGUAGE_NONE])) {
    $edit['field_user_hash'][LANGUAGE_NONE][0]['value'] = hash('sha512', microtime());
  }

  // Notify admins when user is created.
  $notify_enabled = variable_get('openlucius_core_notify_user_created', 0);

  // Check setting.
  if (!empty($notify_enabled) && $notify_enabled && $account->is_new) {

    // Get users with admin role.
    $users = openlucius_core_get_users_with_role(OPENLUCIUS_CORE_OPENLUCIUS_ADMIN_ROLE, FALSE);

    // Initialize new notification.
    $notification = new openlucius_Notification();

    // Create email body.
    $body = t('A new account has been created for %username', array(
      '%username' => $account->name,
    ));

    // Set the body.
    $notification->setBody($body);

    // Initialize targets array.
    $targets = array();

    // Loop through the users.
    foreach ($users as $u) {

      // Check if the user should receive an email.
      if ($u->field_user_notify_mail[LANGUAGE_NONE][0]['value'] == 1) {
        $targets[] = $u->mail;
      }
    }

    // Set the people to be notified.
    $notification->setTargets($targets);

    // Set the subject.
    $notification->setSubject(t('A new account has been created'));

    // Send the notifications.
    $notification->send();
  }
}

/**
 * Implements hook_node_update().
 */
function openlucius_core_node_update($node) {

  // Reset the cache.
  entity_get_controller('node')->resetCache(array($node->nid));

  // Change client settings for sub-nodes.
  if ($node->type == 'ol_group' || $node->type == 'ol_todo_list') {
    $node_children_update_required = $close_todos = FALSE;

    // Check if we need to update the child todos.
    if (isset($node->op) && isset($node->unpublish) && $node->op == $node->unpublish) {
      $close_todos = TRUE;
      $node_children_update_required = TRUE;
    }

    $client_access = $node->field_shared_show_clients[LANGUAGE_NONE][0]['value'];

    // If the previous value was TRUE And the new value is FALSE.
    if ($node->original->field_shared_show_clients[LANGUAGE_NONE][0]['value'] == 1 && $node->field_shared_show_clients[LANGUAGE_NONE][0]['value'] == 0) {
      openlucius_core_remove_clients($node->nid);
      $node_children_update_required = TRUE;
    }

    // If the child nodes need to be updated.
    if ($node_children_update_required) {

      // Group specific query.
      if ($node->type == 'ol_group') {

        // Get all nodes related to this group.
        $results = db_select('field_data_field_shared_group_reference', 'f')
          ->fields('f', array('entity_id'))
          ->condition('f.field_shared_group_reference_nid', $node->nid, '=')
          ->execute()
          ->fetchAll();
      }

      // Todo list specific query.
      else {
        // Get all todo nodes related to this todo-list.
        $results = db_select('field_data_field_todo_list_reference', 'f')
          ->fields('f', array('entity_id'))
          ->condition('f.field_todo_list_reference_nid', $node->nid, '=')
          ->execute()
          ->fetchAll();
      }

      // Loop through nodes.
      foreach ($results as $result) {

        // Use wrapper to alter field.
        $node_wrapper = entity_metadata_wrapper('node', $result->entity_id);

        // Change the show clients field to the new status.
        $node_wrapper->field_shared_show_clients->set($client_access);

        // Close todos if set.
        if ($close_todos) {
          if ($node_wrapper->__isset('field_todo_label')) {
            $node_wrapper->field_todo_label->set(variable_get('todo_closedstatus_tid'));
          }
        }

        // Save node.
        $node_wrapper->save();
      }
    }

    // Group specific settings check.
    if ($node->type == 'ol_group') {

      // Store group settings.
      openlucius_core_store_group_settings($node);
    }
  }

  // Send update notification.
  openlucius_notifications_notify_users($node);
}

/**
 * Implements hook_node_insert().
 */
function openlucius_core_node_insert($node) {

  // Get user.
  global $user;

  // Send insert notification.
  openlucius_notifications_notify_users($node);
  openlucius_notifications_send_loopin_mails(NULL, NULL, $node);

  // Check if type is group, if so add creator.
  if ($node->type == 'ol_group' && !drupal_is_cli()) {

    // Load user.
    $account = user_load($user->uid);

    // Get user wrapper, for easy-mode adding.
    $user_wrapper = entity_metadata_wrapper('user', $account);

    // Add user to group.
    $user_wrapper->field_groups[] = $node;

    // Save wrapper.
    $user_wrapper->save();

    // Save user.
    user_save($account);

    // Store group settings.
    openlucius_core_store_group_settings($node);

    // Create a new ol_todo node object.
    $todo_list = new stdClass();

    // Add the type and language.
    $todo_list->type = 'ol_todo_list';
    $todo_list->language = LANGUAGE_NONE;

    // Prepare the node object for editing.
    node_object_prepare($todo_list);

    // Add the required fields.
    $todo_list->uid = $user->uid;
    $todo_list->title = $node->title;
    $todo_list->field_shared_group_reference[LANGUAGE_NONE][0]['nid'] = $node->nid;

    // Check whether the group is shown to clients.
    $shown_clients = openlucius_core_group_shown_to_clients($node->nid);

    // Base the show clients of the task list on that value.
    $todo_list->field_shared_show_clients[LANGUAGE_NONE][0]['value'] = $shown_clients ? 1 : 0;

    // Save the node.
    node_save($todo_list);
  }
}

/**
 * Implements hook_node_delete().
 */
function openlucius_core_node_delete($node) {

  // Check for teams.
  if ($node->type == 'team') {

    $users = db_select('field_data_field_user_teams', 'f')
      ->fields('f', array('entity_id'))
      ->condition('entity_type', 'user', '=')
      ->condition('bundle', 'user', '=')
      ->condition('field_user_teams_nid', $node->nid, '=')
      ->execute()
      ->fetchAll();

    // Loop through the users and unset the team.
    foreach ($users as $item) {

      $user_object = user_load($item->entity_id);
      $teams = &$user_object->field_user_teams[LANGUAGE_NONE];

      // Loop through the teams.
      foreach ($teams as $key => $team) {
        if ($team['nid'] === $node->nid) {
          unset($teams[$key]);
        }
      }

      // Save the user.
      user_save($user_object);
    }
  }
  // Check for groups.
  elseif ($node->type == 'ol_group') {

    // Delete all content in the group.
    openlucius_core_delete_group($node);
  }
}

/**
 * Implements hook_block_info().
 */
function openlucius_core_block_info() {

  // Initialize array.
  $blocks = array();

  // Openlucius navbar.
  $blocks['openlucius_navbar'] = array(
    'info' => t('Openlucius navigation'),
  );
  // Openlucius mobile sidebar.
  $blocks['openlucius_navbar_aside'] = array(
    'info' => t('Openlucius navigation aside'),
  );
  // Ol group heading block.
  $blocks['ol_group_heading'] = array(
    'info' => t('Openlucius group heading'),
  );
  // Ol group heading block.
  $blocks['ol_textdoc'] = array(
    'info' => t('Book pages'),
  );
  // Ol list with my groups.
  $blocks['ol_mygroups'] = array(
    'info' => t('My Groups'),
  );
  $blocks['recent_stuff'] = array(
    'info' => t('Recent stuff'),
  );
  $blocks['frontpage-tabs'] = array(
    'info' => t('Frontpage tabs'),
  );
  $blocks['user_dashboard_tabs'] = array(
    'info' => t('User dashboard tabs'),
  );
  $blocks['ol_meta_data'] = array(
    'info' => t('Openlucius node metadata'),
  );
  $blocks['use_as_app_info'] = array(
    'info' => t('Use as app information'),
  );
  $blocks['ol_user_activity'] = array(
    'info' => t('Openlucius user activity'),
  );
  $blocks['ol_node_operations'] = array(
    'info' => t('Openlucius node operations'),
  );
  $blocks['ol_document_navigation'] = array(
    'info' => t('Openlucius text-document navigation'),
  );
  $blocks['ol_bottom_help'] = array(
    'info' => t('Openlucius bottom help block'),
  );
  $blocks['ol_group_overview_block'] = array(
    'info' => t('Openlucius overview block'),
  );
  $blocks['ol_group_activity_block'] = array(
    'info' => t('Openlucius group activity block'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function openlucius_core_block_view($delta = '') {

  // Initialize array.
  $block = array();

  switch ($delta) {
    case 'openlucius_navbar':
      $block['subject'] = NULL;
      $block['content'] = openlucius_core_navbar_content();
      break;

    case 'openlucius_navbar_aside':
      $block['subject'] = NULL;
      $block['content'] = openlucius_core_navbar_aside_content();
      break;

    // OL group heading block with buttons.
    case 'ol_group_heading':
      $block['subject'] = NULL;
      $block['content'] = openlucius_core_heading_content();
      break;

    case 'ol_textdoc':
      $block['subject'] = '<none>';
      $block['content'] = openlucius_core_textdocblock();
      break;

    case 'ol_mygroups':
      $block['subject'] = t('My Groups');
      $block['content'] = openlucius_core_my_groups_block();
      break;

    case 'recent_stuff':
      $block['subject'] = t('Recent stuff');
      $block['content'] = openlucius_core_get_recent_stuff();
      break;

    case 'frontpage-tabs':
      $block['subject'] = NULL;
      $block['content'] = openlucius_core_get_frontpage_tabs();
      break;

    case 'user_dashboard_tabs':
      $block['subject'] = NULL;
      $block['content'] = openlucius_core_get_user_dashboard_tabs();
      break;

    case 'ol_meta_data':
      $block['subject'] = NULL;
      $node = menu_get_object();
      if (!empty($node)) {
        $block['content'] = openlucius_core_node_render_meta_fields($node);
      }
      break;

    case 'use_as_app_info':
      $block['subject'] = NULL;
      $block['content'] = openlucius_core_get_bookmark_info_block_content();
      break;

    case 'ol_user_activity':
      $block['subject'] = t("User's activity");
      $block['content'] = openlucius_core_get_user_activity();
      break;

    case 'ol_node_operations':
      $block['subject'] = NULL;
      $block['content'] = openlucius_core_get_node_operations_block_content();
      break;

    case 'ol_document_navigation':
      $block['subject'] = NULL;
      $block['content'] = openlucius_core_get_document_navigation();
      break;

    case 'ol_bottom_help':
      if (user_is_logged_in()) {
        $block['subject'] = NULL;

        // Check if the block is enabled.
        if (variable_get('openlucius_feedback_enabled', 0) == 1) {

          // Add ctools requirements for the modals.
          ctools_include('ajax');
          ctools_include('modal');
          ctools_modal_add_js();

          drupal_add_js(array(
            'openlucius-help-feedback' => array(
              'modalSize' => array(
                'type'   => 'fixed',
                'width'  => 600,
                'height' => 260,
              ),
              // Animation mode.
              'animation' => 'fadeIn',
            ),
          ), 'setting');

          $block['content'] = ctools_modal_text_button(t('HELP & FEEDBACK'), 'openlucius-modal/nojs/help-feedback', t('Help & feedback'), 'ctools-modal-openlucius-help-feedback openlucius-help-feedback');
        }
      }
      break;

    case 'ol_group_overview_block':
      $block['subject'] = NULL;
      $block['content'] = openlucius_core_get_overview_block();
      break;

    case 'ol_group_activity_block':
      $group_id = openlucius_core_get_active_group();
      $block['subject'] = t('Recent activity');
      $block['content'] = openlucius_core_get_group_activity($group_id);
      break;
  }

  return $block;
}

/**
 * Implements hook_block_view_alter().
 */
function openlucius_core_block_view_alter(&$data, $block) {

  // Check for the teams block.
  if ($block->bid == 'views-users_companies_teams-block') {

    // Get the status of teams.
    $teams_enabled = variable_get('openlucius_core_enable_teams', 1);

    // Check if there are teams.
    if (!$teams_enabled) {

      // Hide the block.
      $data = array();
    }
  }
}

/**
 * Implements hook_file_download().
 */
function openlucius_core_file_download($uri) {
  global $user;

  // Check if the user is logged in and the image is a social one.
  if ($user->uid > 0 && (stristr($uri, 'social_home') || stristr($uri, 'status_update'))) {
    $info = image_get_info($uri);
    return array('Content-Type' => $info['mime_type']);
  }
  else {

    // Check theme settings.
    $theme_setting = variable_get('theme_openlucius_settings');
    if ($uri == $theme_setting['logo_path'] || $uri == $theme_setting['favicon_path']) {
      $info = image_get_info($uri);
      return array('Content-Type' => $info['mime_type']);
    }
  }
}

/**
 * Implements hook_theme().
 */
function openlucius_core_theme() {
  return array(
    'openlucius_core_nav'                       => array(
      'template' => 'templates/openlucius_core_nav',
    ),
    'openlucius_core_nav_left_sidebar'          => array(
      'template' => 'templates/openlucius_core_nav_left_sidebar',
    ),
    'openlucius_core_nav_left_sidebar_item'     => array(
      'template' => 'templates/openlucius_core_nav_left_sidebar_item',
    ),
    'openlucius_core_nav_item'                  => array(
      'template' => 'templates/openlucius_core_nav_item',
    ),
    'openlucius_core_button'                    => array(
      'variables' => array('vars' => NULL),
      'template'  => 'templates/openlucius_core_button',
    ),
    'openlucius_core_textdoc'                   => array(
      'variables' => array('vars' => NULL),
      'template'  => 'templates/openlucius_core_textdoc',
    ),
    'openlucius_core_add_todo'                  => array(
      'variables' => array('vars' => NULL),
      'template'  => 'templates/openlucius_core_add_todo',
    ),
    'openlucius_core_my_groups'                 => array(
      'variables' => array('vars' => NULL),
      'template'  => 'templates/openlucius_core_my_groups',
    ),
    'openlucius_core_recent_stuff_item'         => array(
      'variables' => array('vars' => NULL),
      'template'  => 'templates/openlucius_core_recent_stuff_item',
    ),
    'openlucius_core_recent_stuff'              => array(
      'variables' => array('vars' => NULL),
      'template'  => 'templates/openlucius_core_recent_stuff',
    ),
    'openlucius_core_help_block'                => array(
      'variables' => array('vars' => NULL),
      'template'  => 'templates/openlucius_core_help_block',
    ),
    'openlucius_core_toggle'                    => array(
      'template' => 'templates/openlucius_core_toggle',
    ),
    'openlucius_core_group_navigation'          => array(
      'template' => 'templates/openlucius_core_group_navigation',
    ),
    'openlucius_core_bookmark_info'             => array(
      'template' => 'templates/openlucius_core_bookmark_info',
    ),
    'openlucius_core_text-document_nav'         => array(
      'template' => 'templates/openlucius_core_text-document_nav',
    ),
    'openlucius_core_due_date_popup_field'      => array(
      'template' => 'templates/openlucius_core_due_date_popup_field',
    ),
    'openlucius_help_modal'                     => array(
      'template' => 'templates/openlucius_help_modal',
    ),
    'openlucius_core_todo_status_settings_form' => array(
      'render element' => 'element',
    ),
    'openlucius_core_activity_item_comment'     => array(
      'template' => 'templates/openlucius_core_activity_item_comment',
    ),
    'openlucius_core_frontpage_heading_tabs'    => array(
      'template' => 'templates/openlucius_core_frontpage_heading_tabs',
    ),
    'openlucius_core_stepper'                   => array(
      'template' => 'templates/openlucius_core_stepper',
    ),
    'openlucius_core_stepper_step'              => array(
      'template' => 'templates/openlucius_core_stepper_step',
    ),
    'openlucius_core_overview_panel'              => array(
      'template' => 'templates/openlucius_core_overview_panel',
    ),
    'openlucius_core_overview_panel_holder'              => array(
      'template' => 'templates/openlucius_core_overview_panel_holder',
    ),
    'openlucius_core_default_apps_form'         => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_theme_registry_alter().
 */
function openlucius_core_theme_registry_alter(&$theme_registry) {
  if (isset($theme_registry['checkbox'])) {
    $theme_registry['checkbox']['function'] = 'openlucius_core_theme_checkbox';
  }
}

/**
 * Form constructor for archive form.
 *
 * @param array $form
 *   The default form array.
 * @param array $form_state
 *   The form state array.
 * @param \stdClass $node
 *   The node where the actions will be performed on.
 *
 * @ingroup forms.
 *
 * @return array $form
 *   The rendered form.
 */
function openlucius_core_archive_node_form(array $form, array $form_state, \stdClass $node) {
  $form = array(
    'warning' => array(
      '#type'  => 'fieldset',
      '#title' => t('Do you want to archive: :title?', array(':title' => $node->title)),
    ),
    'node'    => array(
      '#type'  => 'hidden',
      '#value' => $node,
    ),
  );

  // Add appropriate warning for node type.
  switch ($node->type) {
    case 'ol_group':
      $form['warning']['#description'] = t("All task lists and tasks will be archived. Are you sure?");
      break;

    case 'ol_todo_list':
      $form['warning']['#description'] = t("All tasks will be archived. Are you sure?");
      break;

    default:
      break;

  }

  // Add submit button.
  $form['warning']['submit'] = array(
    '#type'  => 'submit',
    '#value' => t('Archive'),
  );

  return $form;
}

/**
 * Form submit handler for archive form.
 *
 * @see openlucius_core_archive_node_form()
 */
function openlucius_core_archive_node_form_submit($form, &$form_state) {
  // Fetch node from values.
  $node = $form_state['values']['node'];

  // Set both required fields to unpublish.
  $node->unpublish = $node->op = 'Unpublish';
  $node->status = 0;
  node_save($node);

  // Redirect to node that was archived.
  $form_state['redirect'] = 'node/' . $node->nid;
}

/**
 * Function for views access.
 */
function openlucius_core_views_group_access($account = NULL) {

  // The logged in user.
  global $user;

  // Check if account unset.
  if ($account == NULL) {
    $account = $user;
  }

  // Admins may see all.
  if ($account->uid == 1 || user_access('bypass node access', $account)) {
    return TRUE;
  }

  // Paths to check if match then access check.
  $group_paths = array(
    'group-messages',
    'group-task-lists',
    'group-textdocuments',
    'group-users',
    'group-activity',
    'group-users',
    'group-calendar',
  );

  // Allow other modules to override the group paths.
  drupal_alter('openlucius_core_views_group_access_paths', $group_paths);

  // Get the current path.
  $current_path = current_path();

  // Check if called from ajax.
  if ($current_path == 'views/ajax') {

    // Fetch the active_group from the session.
    $gid = $_SESSION['active_group'];

    // Check if this group is an open group.
    if (openlucius_core_is_open_group($gid)) {
      return TRUE;
    }

    return openlucius_core_user_in_group($gid, $account->uid);
  }
  else {

    foreach ($group_paths as $path) {

      // Check if this function is being called from group-users.
      if (strpos($current_path, $path) !== FALSE) {

        // Check for the group calendar path.
        if (strpos($current_path, 'group-calendar') !== FALSE) {

          // Explode the current path on slash.
          $parts = explode('/', current_path());

          // Get the group.
          $gid = $parts[3];
        }
        else {
          // Fetch the gid.
          $gid = str_replace($path . '/', '', current_path());
        }

        // Check if this group is an open group.
        if (openlucius_core_is_open_group($gid)) {

          // Get client status of the user.
          $is_client = openlucius_core_user_is_client($account);

          // Check if the user is client.
          if ($is_client) {

            // Check if the group has clients enabled.
            $clients_enabled = openlucius_core_group_clients_enabled($gid);

            // Return.
            return $clients_enabled;
          }
          return TRUE;
        }

        return openlucius_core_user_in_group($gid, $account->uid);
      }
    }
  }

  return FALSE;
}

/**
 * Function for views access.
 */
function openlucius_core_views_ical_access($account = NULL) {

  // Try to obtain a uid from the url hash parameter.
  $uid = openlucius_core_hash_to_uid();

  // Check if we have a valid uid.
  if (!empty($uid)) {
    // TODO menu_get_item and menu_get_object cannot be called here.
    // TODO Try to find another method.
    $query = filter_xss($_GET['q']);
    $arguments = explode('/', $query);

    // Check if the third argument is a node.
    if (isset($arguments[3]) && ($node = node_load($arguments[3])) && $node->type == 'ol_group') {

      // We're in a group so check if this user $uid may access the group.
      if (openlucius_core_user_in_group($node->nid, $uid)) {
        return TRUE;
      }
    }
    else {
      // TODO add access for global calendar.
    }
  }

  return FALSE;
}

/**
 * Implements hook_exit().
 */
function openlucius_core_exit($destination = NULL) {
  // Set variable to FALSE for new page-loads.
  if (variable_get('archived_message', FALSE)) {
    variable_set('archived_message', FALSE);
  }
}

/**
 * Custom select for groups.
 */
function openlucius_core_get_group_selector() {

  // The logged in user.
  global $user;

  // The user account.
  $account = user_load($user->uid);

  // Check if the user has groups.
  if (isset($account->field_groups[LANGUAGE_NONE])) {

    // Fetch the open groups.
    $open_groups = openlucius_core_fetch_open_groups();

    // Use metadata wrapper for easy access.
    $wrapper = entity_metadata_wrapper('user', $account);
    $groups = $wrapper->field_groups->value();

    // Fetch user groups.
    $user_groups = array();
    if (!empty($groups)) {
      foreach ($groups as $group) {
        if (is_object($group) && property_exists($group, 'status') && $group->status == NODE_PUBLISHED) {
          $user_groups[] = array('nid' => $group->nid, 'title' => $group->title);
        }
      }
    }

    if (!empty($open_groups)) {
      foreach ($open_groups as $gid) {
        $user_groups[] = array(
          'nid'   => $gid,
          'title' => openlucius_core_fetch_node_title($gid),
        );
      }
    }

    return openlucius_core_reference_select($user_groups, 'group_selector');
  }

  return FALSE;
}

/**
 * Method to fetch open groups.
 *
 * @return bool|FALSE
 *   Returns the open groups.
 */
function openlucius_core_fetch_open_groups() {
  $query = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('type', 'ol_group', '=')
    ->condition('o.field_group_is_open_value', 1, '=')
    ->condition('status', 1, '=');

  // Join for open group check.
  $query->join('field_data_field_group_is_open', 'o', 'n.nid = o.entity_id');

  // Add the node_access tag to prevent wrong results.
  $query->addTag('node_access');

  // Return result.
  return $query->execute()->fetchCol();
}

/**
 * Function to build a select from entity references.
 *
 * @param array[] $items
 *   The items to put into the select.
 * @param string $id
 *   The id to target, the select has nothing by itself.
 *
 * @return bool
 *   Build version of the select.
 */
function openlucius_core_reference_select($items, $id = "") {

  // Check if not empty.
  if (count($items) > 0) {

    // Create build for rendering.
    $build = array(
      '#type'       => 'select',
      '#attributes' => array(
        'class'            => array(
          'selectpicker',
        ),
        'data-live-search' => 'true',
        'data-width'       => 'auto',
      ),
    );

    // Add id if not empty.
    if ($id != '') {
      $build['#attributes']['id'] = $id;
    }

    // Initialize array.
    $options = array();

    // Loop through items.
    foreach ($items as $item) {

      // Fetch title.
      if (!empty($item['title'])) {
        $title = $item['title'];
      }
      else {
        $title = openlucius_core_fetch_node_title($item['nid']);
      }

      if (!empty($title)) {
        // Build path.
        $path = url('openlucius-core/app-redirect/' . $item['nid']);
        $options[$path] = $title;
      }
    }

    // Sort if not empty.
    if (!empty($options)) {
      asort($options);
    }

    $groups_dropdown_title = variable_get('openlucius_core_group_dropdown_title', t('Groups'));

    $options = array_merge(array(url('<front>') => $groups_dropdown_title), $options);

    // Add options.
    $build['#options'] = $options;

    return drupal_render($build);
  }

  return FALSE;
}

/**
 * Function to remove users from group.
 *
 * @param int $gid
 *   The group id.
 * @param int $uid
 *   The user id.
 * @param bool $batch
 *   Whether or not the users are removed in a batch.
 */
function openlucius_core_remove_users_from_group($gid, $uid, $batch = FALSE) {

  // The logged in user.
  global $user;

  // Load the group node.
  if (!openlucius_core_is_open_group($gid)) {

    // Load user.
    $user_to_remove = user_load($uid);

    // Check if user is not removing himself and check for batch.
    if ($user->uid == $uid && $batch === FALSE) {
      // Set message and link back.
      drupal_set_message(t("You can not remove yourself from a group"), 'warning');
      drupal_goto();
    }

    // Get user wrapper.
    $user_wrapper = entity_metadata_wrapper('user', $user_to_remove);

    // Loop through references of field.
    foreach ($user_wrapper->field_groups->value() as $key => $group) {

      // Check for match.
      if ($gid == $group->nid) {

        // Match found: delete the user/group reference.
        $user_wrapper->field_groups[$key]->set(NULL);
        $user_wrapper->save();

        // Check for batch.
        if ($batch === FALSE) {
          // Set message and link back.
          drupal_set_message(t("User %user successfully removed from Group", array('%user' => $user_to_remove->name)));
          drupal_goto();
        }
      }
    }

    // Check for batch.
    if ($batch === FALSE) {
      // No correct match found, provide error.
      drupal_set_message(t("Error: user not removed from Group, please contact OpenLucius administrator"), 'error');
    }
  }

  // Set message for open group.
  else {
    drupal_set_message(t("This is an open group, you can not remove people from an open group since it is open :) .
    It is however possible to restrict access for clients in an open group.
    You can do so by editting the group and change 'Group with Clients' to 'No'"), 'error');
  }

  // Check for batch.
  if ($batch === FALSE) {
    drupal_goto();
  }
}

/**
 * Extra redirect handler for existing paths.
 */
function openlucius_core_existing_path_redirect() {

  // The logged in user.
  global $user;
  $menu_item = menu_get_item();
  $menu_object = menu_get_object();

  // Check for user/dashboard path.
  if (isset($menu_item['page_arguments'][0]) && $menu_item['page_arguments'][0] == 'all_todo_lists_in_a_group' && isset($menu_item['page_arguments'][1]) && $menu_item['page_arguments'][1] == 'page_3' && !isset($menu_item['page_arguments'][2])) {
    drupal_goto($menu_item['path'] . '/' . $user->uid);
  }

  // Check for user-calendar/month.
  if (isset($menu_item['page_arguments'][0]) && $menu_item['page_arguments'][0] == 'group_calendar' && isset($menu_item['page_arguments'][1]) && $menu_item['page_arguments'][1] == 'page_4' && !isset($menu_item['page_arguments'][2])) {
    drupal_goto($menu_item['path'] . '/' . $user->uid);
  }

  // Check for viewing a file node directly, not allowed.
  if ($menu_item['page_callback'] == 'node_page_view' && isset($menu_object->type) && $menu_object->type == 'file') {
    $node = $menu_object;
    // Redirect to the group page files where this file belongs.
    drupal_goto("group-files/" . $node->field_shared_group_reference[LANGUAGE_NONE][0]['nid']);
  }
}

/**
 * Custom redirect handler.
 */
function openlucius_core_redirect($argument = NULL) {

  // The logged in user.
  global $user;

  if ($user->uid == 0) {
    drupal_goto('user/login');
  }
  else {
    $menu_item = menu_get_item();
    $menu_object = menu_get_object('user', 1);

    // Logged in user, redirect for menu link user/dashboard.
    if ($menu_item['load_functions'][1] == 'user_load' && !isset($menu_item['page_arguments'][1])) {
      // Redirect for other users than logged in user, who are visiting user/%.
      if ($user->uid != $menu_object->uid) {
        drupal_goto("user/dashboard/" . $menu_object->uid);
      }

      // Regular redirect to user dashboard.
      drupal_goto('user/' . $user->uid . '/edit');
    }
  }
}

/**
 * Function to check access to user edit.
 */
function openlucius_core_user_edit_access($account) {

  // The logged in user.
  global $user;

  // Do not allow other users to change root admin user.
  if ($account->uid == 1 && $user->uid != 1) {
    return FALSE;
  }

  if (user_access('administer users') || $account->uid == $user->uid) {
    return TRUE;
  }
}

/**
 * Implements hook_node_access().
 */
function openlucius_core_node_access($node, $op, $account) {
  // The logged in user.
  global $user;

  if ($op == 'create') {
    // Base exclude.
    $exclude = array('ol_group', 'file', 'team');

    // Allow other modules to add their types.
    drupal_alter('openlucius_core_node_add_access', $exclude);

    if (in_array($node, $exclude) && user_access('create ' . $node . ' content')) {
      return NODE_ACCESS_ALLOW;
    }
    elseif (isset($_SESSION['active_group']) && is_numeric($_SESSION['active_group'])) {
      $type = str_replace('_', '-', $node);
      $stripped_path = str_replace('node/add/' . $type, '', current_path());
      if ($stripped_path == '') {
        return NODE_ACCESS_DENY;
      }
      else {
        $stripped_path = explode('/', $stripped_path);
        $group = $stripped_path[1];
      }
    }

    if (!empty($group)) {
      // Check if user has access to group.
      if (openlucius_core_user_in_group($group, $user->uid) || openlucius_core_is_open_group($group)) {
        return NODE_ACCESS_ALLOW;
      }
      else {
        return NODE_ACCESS_DENY;
      }
    }
  }

  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_node_view().
 */
function openlucius_core_node_view($node, $view_mode, $langcode) {
  // Check if node view is not called from terminal.
  if (!drupal_is_cli()) {
    $menu_item = menu_get_item();

    // Check if we' not searching for nodes.
    if ($menu_item['map'][0] != 'search') {

      // Access is differently per type.
      if ($node->type == 'ol_group') {
        // Check if archived.
        if ($node->status == 0) {
          if (!variable_get('archived_message', FALSE)) {
            drupal_set_message(t("This group is archived and locked.") . l(t("Unarchive this Group"), "archived-groups"), "warning");
            // Set to TRUE to prevent double messages.
            variable_set('archived_message', TRUE);
          }
        }

        // Mark all content read.
        openlucius_core_mark_group_content_read($node->nid);
      }
      elseif (in_array($node->type, openlucius_core_get_content_types())) {

        // Get shared group reference field.
        $items = field_get_items('node', $node, 'field_shared_group_reference');
        // Check if there is a node reference.
        if (isset($items[0]['nid'])) {
          // Load the node.
          $groupnode = node_load($items[0]['nid']);

          // Handle other content for archived (unpublished) groups.
          if ($groupnode->status == 0 && !variable_get('archived_message', FALSE)) {
            drupal_set_message(t("The Group this content belongs to is archived and locked.") . " " . l(t("Unarchive the Group"), "archived-groups"), "warning");
            // Set to TRUE to prevent double messages.
            variable_set('archived_message', TRUE);
          }
        }
      }
    }

    // Check if overview setting is on.
    if ($node->type == 'ol_group') {
      $settings = variable_get('openlucius_core_group_settings', array());
      $group_settings = $settings[$node->nid];
      if (!empty($group_settings) && empty($group_settings['dashboard'])) {
        drupal_goto('openlucius-core/app-redirect/' . $node->nid);
      }
    }
  }
}

/**
 * Function to check if a user is in a group.
 *
 * @param int $gid
 *   The group id to check.
 * @param int|bool $uid
 *   The user id.
 *
 * @return bool
 *   TRUE or FALSE
 */
function openlucius_core_user_in_group($gid, $uid = FALSE) {
  global $user;

  // Admin may go everywhere, and everybody may see group 0 as it does not
  // exist.
  if ($uid == 1 || $user->uid == 1 || $gid == 0) {
    return TRUE;
  }

  // Fallback to current user.
  if (empty($uid)) {
    $uid = $user->uid;
  }

  // If this is an object please replace by node id only.
  if (is_object($gid) && !empty($gid->nid)) {
    $gid = $gid->nid;
  }

  // Load user.
  $u = user_load($uid);
  $user_group_ids = field_get_items('user', $u, 'field_groups');

  // Loop through group_ids.
  if (isset($user_group_ids) && !empty($user_group_ids)) {
    foreach ($user_group_ids as $data) {
      // If we have the group id we have access.
      if ($gid == $data['nid']) {
        return TRUE;
      }
    }
  }

  return FALSE;
}

/**
 * Function to check if a group is open and accessible for a user.
 *
 * @param int $gid
 *   The group node to be verified.
 *
 * @return bool
 *   Returns either FALSE when not found or TRUE when found.
 */
function openlucius_core_is_open_group($gid) {
  $query = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('type', 'ol_group', '=')
    ->condition('nid', $gid, '=')
    ->condition('o.field_group_is_open_value', 1, '=')
    ->addTag('user_access');

  // Join for open group check.
  $query->join('field_data_field_group_is_open', 'o', 'n.nid = o.entity_id');

  // Return result.
  $result = $query->execute()->fetchField();
  return !empty($result);
}

/**
 * Function to check if a node can be shown to a client.
 *
 * @param int $nid
 *   The node id to be checked.
 *
 * @return bool
 *   Returns either TRUE or FALSE.
 */
function openlucius_core_is_node_with_clients($nid) {
  return db_select('field_data_field_shared_show_clients', 'f')
    ->fields('f', array('field_shared_show_clients_value'))
    ->condition('entity_id', $nid, '=')
    ->execute()
    ->fetchField() == 1;
}

/**
 * Function to check if path requires login.
 */
function openlucius_core_path_access() {

  // Get the path.
  $path = request_uri();

  // Allow cron.
  if ($path == base_path() . 'cron.php?cron_key=' . variable_get('cron_key')) {
    return TRUE;
  }

  // Do not bother while installing.
  if (variable_get('install_task') != 'done') {
    return TRUE;
  }

  // Get menu item.
  $menu_item = menu_get_item();
  if ($menu_item['page_callback'] == 'user_page' && $menu_item['access_callback'] == 'user_is_anonymous') {
    return TRUE;
  }
  elseif ($menu_item['page_callback'] == 'drupal_get_form' && $menu_item['page_arguments'][0] == 'user_pass') {
    return TRUE;
  }
  elseif ($menu_item['page_callback'] == 'drupal_get_form' && $menu_item['page_arguments'][0] == 'user_pass_reset' && isset($menu_item['page_arguments'][3]) && !empty($menu_item['page_arguments'][3])) {
    return TRUE;
  }

  // Allow running Drupal from command line.
  if (drupal_is_cli()) {
    return TRUE;
  }

  // Allow access for certain arguments.
  if (in_array($menu_item['original_map'][0], array(
    'js',
    'admin_menu',
    'devel',
    'autocomplete',
  ))) {
    return TRUE;
  }

  // Added check for hash when checking for calendar.
  if ($menu_item['original_map'][0] == 'calendar' && isset($_GET['hash'])) {

    // Check if we can find a user with this hash.
    if ($uid = openlucius_core_hash_to_uid($_GET['hash'])) {

      // TODO check if there is another method to allow users to view a node.
      // Overriding grants still returns no results in the calendar view.
      global $user;
      $user = user_load($uid);
      return TRUE;
    }
  }

  // Check if user is logged in.
  if (user_is_logged_in()) {
    return TRUE;
  }

  // Return FALSE.
  return FALSE;
}

/**
 * Custom autocomplete function.
 */
function openlucius_core_autocomplete($type, $string, $string2) {

  // For safe cleaning.
  require_once drupal_get_path('module', 'ctools') . '/includes/cleanstring.inc';

  // Array for matching nodes / users.
  $matches = array();

  // Initialize variable.
  $result = NULL;

  // Different types have different queries.
  switch ($type) {

    case 'user':
      if (module_exists('realname')) {
        $result = db_query("
        SELECT u.uid as id,
        CASE
        WHEN LENGTH(r.realname) = 0
        OR r.realname IS NULL
        THEN u.name
        ELSE r.realname
        END AS title
        FROM {users} u
        INNER JOIN {realname} r
        ON u.uid = r.uid
        WHERE (lower(u.name) LIKE :like
        OR
        lower(r.realname) LIKE :like2)
        AND u.status = 1
        LIMIT 0, 5", array(
          ':like'  => '%' . db_like(ctools_cleanstring(strtolower($string))) . '%',
          ':like2' => '%' . db_like(ctools_cleanstring(strtolower($string))) . '%',
        ))->fetchAll();
      }
      else {
        $result = db_query("
          SELECT u.uid as id, u.name as title
          FROM {users} u
          WHERE lower(u.name) LIKE :like
          AND u.status = 1
          LIMIT 0, 5", array(':like' => '%' . db_like(ctools_cleanstring(strtolower($string))) . '%'))->fetchAll();
      }

      // Allow other modules to alter the results.
      drupal_alter('openlucius_core_autocomplete_user_results', $result);
      break;

    case 'ol_group':
    case 'team':
      $query = db_select('node', 'n')
        ->fields('n', array('title'))
        ->condition('n.type', $type, '=')
        ->where('LOWER(n.title) LIKE :like', array(':like' => '%' . db_like(ctools_cleanstring(strtolower($string))) . '%'));

      // Add field with alias.
      $query->addField('n', 'nid', 'id');
      $result = $query->addTag('node_access')
                      ->range(0, 5)
                      ->execute()
                      ->fetchAll();
      break;

    case 'group_user':
      if (module_exists('realname')) {
        $results = db_query("
          SELECT u.uid, r.realname, u.name
          FROM {users} u
          INNER JOIN {realname} r
          ON u.uid = r.uid
          INNER JOIN {field_data_field_groups} f
          ON u.uid = f.entity_id
          WHERE (lower(u.name) LIKE :like
          OR
          lower(r.realname) LIKE :like2)
          AND field_groups_nid = :nid
          AND u.status = 1
          LIMIT 0, 5", array(
            ':nid'   => $string,
            ':like'  => '%' . db_like(ctools_cleanstring(strtolower($string))) . '%',
            ':like2' => '%' . db_like(ctools_cleanstring(strtolower($string))) . '%',
          )
        )->fetchAll();

        // Loop through users.
        foreach ($results as $user) {
          $realname = $user->realname != '' ? $user->realname : $user->name;
          $matches[$realname . ' [uid:' . $user->uid . ']'] = check_plain($realname);
        }
      }
      else {
        // Database fields.
        $query = new \EntityFieldQuery();

        // Get entities of type user which are active.
        $query->entityCondition('entity_type', 'user')
              ->propertyCondition('status', 1)
              ->fieldCondition('field_groups', 'nid', $string, '=');

        // Add property condition.
        $query->propertyCondition('name', "%" . $string2 . "%", "LIKE");

        // Store the result(s).
        $results = $query->execute();

        // Get user id's for load.
        $user_ids = array_keys($results['user']);

        // Load users.
        $users = user_load_multiple($user_ids);

        // Loop through users.
        foreach ($users as $user) {
          $matches[$user->name . ' [uid:' . $user->uid . ']'] = check_plain($user->name);
        }
      }

      // Return for JS.
      drupal_json_output($matches);

      // Do not execute the other loop and drupal_json_output.
      drupal_exit();
      break;

    // Always have a default.
    default:
      break;
  }

  // Add matches to $matches.
  foreach ($result as $row) {
    $matches[$row->title . ' (' . $row->id . ')'] = check_plain($row->title);
  }

  // Return for JS.
  drupal_json_output($matches);
}

/**
 * Function to fetch node title.
 *
 * @param int $nid
 *   The node id.
 *
 * @return string
 *   The string.
 */
function openlucius_core_fetch_node_title($nid) {
  return db_select('node', 'n')
    ->fields('n', array('title'))
    ->condition('nid', $nid, '=')
    ->addTag('node_access')
    ->execute()
    ->fetchField();
}

/**
 * Function to fetch comment subject.
 *
 * @param int $cid
 *   The comment id.
 *
 * @return string
 *   Returns either the comment subject or FALSE.
 */
function openlucius_core_fetch_comment_subject($cid) {
  return db_select('comment', 'c')
    ->fields('c', array('subject'))
    ->condition('cid', $cid, '=')
    ->execute()
    ->fetchField();
}

/**
 * Function to fetch the title of the node a comment is attached to.
 *
 * @param int $cid
 *   The id of the comment that was reacted on.
 *
 * @return mixed
 *   Returns either the node title or FALSE when not found.
 */
function openlucius_core_fetch_comment_node_subject($cid) {
  $query = db_select('comment', 'c')
    ->fields('n', array('title'))
    ->condition('cid', $cid, '=');

  // Join on node table.
  $query->join('node', 'n', 'c.nid = n.nid');

  return $query->execute()->fetchField();
}

/**
 * Function to fetch the title of the node a comment is attached to.
 *
 * @param int $cid
 *   The id of the comment that was reacted on.
 *
 * @return mixed
 *   Returns either the title of the node or FALSE when not found.
 */
function openlucius_core_fetch_comment_parent_subject($cid) {
  $query = db_select('comment', 'c')
    ->fields('c2', array('subject'))
    ->condition('c.cid', $cid, '=');

  // Join on node table.
  $query->join('comment', 'c2', 'c.pid = c2.cid');

  return $query->execute()->fetchField();
}

/**
 * Function to fetch teams or companies.
 *
 * @param string $type
 *   The type to be used.
 *
 * @return array
 *   Containing (nid => title).
 */
function openlucius_core_fetch_all_of_type($type) {

  // The logged in user.
  global $user;

  // Get all values.
  $account = user_load($user->uid);

  // Get wrapper.
  $user_wrapper = entity_metadata_wrapper('user', $account);

  // For storing results.
  $results = array();

  // Check type.
  if ($type == 'team') {

    // Check if the user is allowed to notify all teams.
    if (user_access('notify all teams')) {

      // Load all teams.
      $teams = openlucius_core_fetch_nodes_of_type('team');

      // Get group selector.
      $gid = openlucius_core_get_active_group();

      // This can happen when users are performing ajax requests.
      if (empty($gid)) {
        $gid = isset($_SESSION['active_group']) ? $_SESSION['active_group'] : 0;
      }

      // Loop through the teams.
      foreach ($teams as $nid) {

        // Check if all users in the team are in this group.
        $contains_all_team_members = openlucius_core_group_contains_all_team_members($gid, $nid);

        // Check if it contains all team members.
        if ($contains_all_team_members) {
          $results[$nid] = openlucius_core_fetch_node_title($nid);
        }
      }
    }
    else {

      // Loop through user teams.
      foreach ($user_wrapper->field_user_teams->value() as $team) {

        // Check team.
        if (!empty($team)) {
          // Add result to array.
          $results[$team->nid] = $team->title;
        }
      }
    }

    // Return the items.
    return $results;
  }

  // Return false if not team.
  return FALSE;
}

/**
 * Function to remove all clients.
 *
 * @param int $gid
 *   The group id.
 */
function openlucius_core_remove_clients($gid) {
  $users_query = db_select('users_roles', 'u')
    ->fields('u', array('uid'))
    ->condition('u.rid', 5, '=')
    ->condition('f.field_groups_nid', $gid, '=');

  // Join for groups.
  $users_query->join('field_data_field_groups', 'f', 'u.uid = f.entity_id');
  $result = $users_query->execute()->fetchAllKeyed();

  // Fetch user id's.
  $uids = array_keys($result);

  // Load users.
  $users = user_load_multiple($uids);

  // Loop through users.
  foreach ($users as $user) {
    // Loop through user groups.
    foreach ($user->field_groups[LANGUAGE_NONE] as $key => $group) {
      // Check if group is correct.
      if ($group['nid'] == $gid) {
        // Unset group.
        unset($user->field_groups[LANGUAGE_NONE][$key]);
        // Save user.
        user_save($user);
        // Prevent unnecessary looping.
        break;
      }
    }
  }
}

/**
 * Implements hook_query_random_alter().
 */
function openlucius_core_query_random_alter($query) {
  $query->orderRandom();
}

/**
 * Function to fetch all members of an open group.
 *
 * @param int $gid
 *   The group to search users for.
 * @param bool|FALSE $count
 *   Whether a numeric value is requested or a list of users.
 * @param bool $keyed
 *   Whether the array should be in format mail => name.
 *
 * @return mixed
 *   Returns either an array when count is not set, a number or FALSE.
 */
function openlucius_core_fetch_open_group_users($gid, $count = FALSE, $keyed = FALSE) {
  $group_with_clients = db_select('field_data_field_shared_show_clients', 'f')
      ->fields('f', array('field_shared_show_clients_value'))
      ->condition('entity_id', $gid, '=')
      ->execute()
      ->fetchField() == 1;

  // This is a group with users so query all active users.
  if ($group_with_clients) {
    $query = db_select('users', 'u')
      ->fields('u', array('uid'))
      ->condition('status', 1, '=');
  }
  else {
    // Fetch all users which are not a client.
    $query = db_select('users_roles', 'r')
      ->fields('r', array('uid'))
      ->condition('r.rid', OPENLUCIUS_CORE_OPENLUCIUS_CLIENT_ROLE, '<>')
      ->condition('u.status', 1, '=');

    // Join on users table for status.
    $query->join('users', 'u', 'r.uid = u.uid');
  }

  // Return count.
  if ($count) {
    return $query->execute()->rowCount();
  }

  // Check if we should return keyed data.
  if ($keyed) {
    $query->addField('u', 'mail');
    $query->addField('u', 'name');
    return $query->execute()->fetchAllKeyed(1, 2);
  }

  // Fetch all users.
  $user_ids = $query->execute()->fetchCol();

  // Return loaded users.
  return user_load_multiple($user_ids);
}

/**
 * Function to fetch all users with certain settings.
 *
 * @param string $type
 *   The type to match (group, team).
 * @param int $value
 *   The value the user field must contain.
 * @param bool $count
 *   If TRUE this will return a user count.
 * @param bool $keyed
 *   If it should be returned with keys.
 * @param int $amount
 *   The amount of users to be fetched.
 * @param bool $random
 *   Whether the random tag should be applied.
 *
 * @return array
 *   Returns an array containing the users.
 */
function openlucius_core_fetch_users($type, $value, $count = FALSE, $keyed = FALSE, $amount = NULL, $random = NULL) {

  // Database fields.
  $fields = array(
    'group' => array(
      'table' => 'field_data_field_groups',
      'field' => 'field_groups_nid',
    ),
    'team'  => array(
      'table' => 'field_data_field_user_teams',
      'field' => 'field_user_teams_nid',
    ),
  );

  $query = db_select('users', 'u')
    ->fields('u', array('uid'));

  // Check if type and value are set.
  if (!empty($value) && !empty($type) && !empty($fields[$type])) {
    $query->join($fields[$type]['table'], 'f', 'u.uid = f.entity_id');
    $query->condition('f.' . $fields[$type]['field'], $value, '=');
  }
  else {
    drupal_set_message(t('Value and type cannot be empty'), 'error');
    return array();
  }

  // Check if user enabled.
  $query->condition('u.status', 1, '=');

  // If count is set execute count.
  if ($count) {
    return $query->execute()->rowCount();
  }

  // If a set amount is given return that amount.
  if (!empty($amount)) {
    $query->range(0, $amount);
  }

  // Order by name.
  $query->orderBy('u.name', 'ASC');

  // Check if random order required.
  if (!empty($random)) {
    $query->orderRandom();
  }

  // Execute query and fetch results.
  $results = $query->execute()->fetchCol();

  $users = array();
  if (!empty($results)) {

    // Load the users.
    $users = user_load_multiple($results);

    // If keyed we create an array containing uid => username.
    if ($keyed) {

      // Place to store the users.
      $list = array();

      // Loop through users.
      foreach ($users as $user) {

        // To prevent future problems with ldap.
        if (isset($user->mail) && $user->mail != '') {

          // Check if the user has a realname.
          if (!empty($user->realname)) {
            $user->name = $user->realname;
          }

          $list[$user->mail] = $user->name;
        }
      }
      // Return list.
      return $list;
    }
  }

  // Return loaded users.
  return $users;
}

/**
 * Function to fetch all users within a group.
 *
 * @param int $group_id
 *   The group for which the users should be fetched.
 *
 * @return mixed
 *   Returns either group users or FALSE.
 */
function openlucius_core_fetch_group_users($group_id) {
  if (module_exists('realname')) {
    $group_users = db_query('
        SELECT u.uid, CASE
        WHEN LENGTH(r.realname) = 0
        OR r.realname IS NULL
        THEN u.name
        ELSE r.realname
        END AS name
        FROM {realname} r
        INNER JOIN {users} u
        ON r.uid = u.uid
        INNER JOIN {field_data_field_groups} f
        ON u.uid = f.entity_id
        WHERE field_groups_nid = :gid AND u.status = 1
        ', array(':gid' => $group_id))->fetchAllKeyed(0, 1);
  }
  else {
    $group_users = db_query('
        SELECT u.uid, u.name
        FROM {users} u
        INNER JOIN {field_data_field_groups} f
        ON u.uid = f.entity_id
        WHERE field_groups_nid = :gid AND u.status = 1
        ', array(':gid' => $group_id))->fetchAllKeyed(0, 1);
  }

  // Allow other modules to alter the users.
  drupal_alter('openlucius_core_group_users', $group_users);

  return $group_users;
}

/**
 * Function to fetch all team users.
 *
 * @param int $tid
 *   The node id of the team.
 *
 * @return mixed|array
 *   Returns array of team users or false if team does not exist.
 */
function openlucius_core_fetch_team_users($tid) {

  // Query the teams table.
  $query = db_select('field_data_field_user_teams', 't');

  // Get the entity id that is the user id.
  $query->fields('t', array('entity_id'));

  // Sort on the team node id to match the $tid.
  $query->condition('t.field_user_teams_nid', $tid, '=');

  // Join towards the users table.
  $query->join('users', 'u', 'u.uid = t.entity_id');

  // Make sure the user is active.
  $query->condition('u.status', 1, '=');

  // Return.
  return $query->execute()->fetchCol();
}

/**
 * Function to get user groups.
 *
 * @param int $uid
 *   The user id.
 * @param bool $group_titled
 *   When TRUE, return 'group id' as key and 'group title' as value.
 *
 * @return array
 *   Array of user groups.
 */
function openlucius_core_fetch_user_groups($uid, $group_titled = FALSE) {

  // Load user.
  $account = user_load($uid);

  // Initiate user groups.
  $user_groups = array();

  // Check if the user is a member of a group.
  if (isset($account->field_groups[LANGUAGE_NONE]) && is_array($account->field_groups[LANGUAGE_NONE])) {

    // Fetch the open groups.
    $open_groups = openlucius_core_fetch_open_groups();

    // Check if we have open groups.
    if (!empty($open_groups)) {
      foreach ($open_groups as $gid) {
        if ($group_titled) {
          $user_groups[$gid] = openlucius_core_fetch_node_title($gid);
        }
        else {
          $user_groups[] = $gid;
        }
      }
    }

    // Use metadata wrapper for easy access.
    $wrapper = entity_metadata_wrapper('user', $account);
    $groups = $wrapper->field_groups->value();

    // Check if we have groups.
    if (!empty($groups)) {

      // Loop through groups and add items.
      foreach ($groups as $group) {

        // Check if published.
        if (is_object($group) && property_exists($group, 'status') && $group->status == NODE_PUBLISHED) {

          // Check if we need a title.
          if ($group_titled) {
            $user_groups[$group->nid] = $group->title;
          }
          else {
            $user_groups[] = $group->nid;
          }
        }
      }
    }
  }

  return $user_groups;
}

/**
 * Function to get user teams.
 *
 * @param int $uid
 *   The user id.
 * @param bool $titles
 *   When TRUE, return 'team id' as key and 'title' as value.
 *
 * @return array
 *   Array of teams.
 */
function openlucius_core_fetch_user_teams($uid, $titles = FALSE) {
  // Load user.
  $account = user_load($uid);

  // Initiate teams.
  $teams = array();

  // Loop through teams and add items.
  foreach ($account->field_user_teams[LANGUAGE_NONE] as $team) {

    // Return 'group id' as key and 'group title' as value.
    if ($titles) {
      $teams[$team['nid']] = openlucius_core_fetch_node_title($team['nid']);
    }

    // Only return group id's as values.
    else {
      $teams[] = $team['nid'];
    }
  }
  return $teams;
}

/**
 * Function to build the heading block.
 */
function openlucius_core_heading_content($items = FALSE) {

  // Get the menu item & object.
  $object = menu_get_object();
  $item = menu_get_item();

  // Skip and return nothing as there is no heading for an add group.
  if (!empty($item['path']) && $item['path'] == 'node/add/ol-group') {
    return "";
  }

  // Initialize search false by default.
  $search = FALSE;

  // Initialize variables.
  $vars = array();

  // Initialize group nid.
  $group_nid = '';

  // The group pages.
  $pages = array(
    'group-task-lists',
    'group-messages',
    'group-files',
    'group-users',
    'group-textdocuments',
  );

  // Special pages (calendar).
  $other_pages = array(
    'group-calendar',
  );

  // Get core content types.
  $content_types = openlucius_core_get_content_types();

  // Set map variable.
  $map = (!empty($item['map']) ? $item['map'] : '');

  // Check for group.
  if (!empty($object) && !empty($object->type) && $object->type == 'ol_group') {
    $vars['heading_title'] = $object->title;
    $group_nid = $object->nid;
    $vars['open'] = openlucius_core_is_open_group($group_nid);
  }
  // Check for core content types.
  elseif (!empty($object) && !empty($object->type) && in_array($object->type, $content_types)) {
    $group_nid = $object->field_shared_group_reference[LANGUAGE_NONE][0]['nid'];
    $vars['heading_title'] = openlucius_core_fetch_node_title($group_nid);
    $vars['open'] = openlucius_core_is_open_group($group_nid);
  }
  // Check for the regular group pages.
  elseif (!empty($map) && in_array($map[0], $pages) && is_numeric($map[1])) {
    $vars['heading_title'] = openlucius_core_fetch_node_title($map[1]);
    $group_nid = $map[1];
    $vars['open'] = openlucius_core_is_open_group($group_nid);
  }
  // Check for the special pages.
  elseif (!empty($map) && in_array($map[0], $other_pages) && is_numeric($map[3])) {
    $vars['heading_title'] = openlucius_core_fetch_node_title($map[3]);
    $group_nid = $map[3];
    $vars['open'] = openlucius_core_is_open_group($group_nid);
  }
  // Check for comment edit and node add.
  elseif (!empty($map[0]) && ($map[0] == 'comment' || $map[0] == 'node') && !empty($map[2]) && ($map[2] == 'edit' || $map[1] == 'add')) {
    $vars['heading_title'] = drupal_get_title();

    // Check for comment.
    if (isset($map[1]->nid) && is_numeric($map[1]->nid)) {
      $group_nid = openlucius_core_get_group_from_nid($map[1]->nid);
      $vars['heading_title'] = openlucius_core_fetch_node_title($group_nid);
      $vars['open'] = openlucius_core_is_open_group($group_nid);
    }
    // Check for node add.
    elseif (isset($map[3]) && is_numeric($map[3])) {
      $group_nid = $map[3];
      $vars['heading_title'] = openlucius_core_fetch_node_title($group_nid);
      $vars['open'] = openlucius_core_is_open_group($group_nid);
    }
  }

  // Check for search page.
  elseif (!empty($item['path']) && ($item['path'] == 'search/content/%' || $item['path'] == 'search/user/%' || $item['path'] == 'user-search')) {
    $vars['heading_title'] = t('Search');
    $vars['open'] = NULL;
  }
  // Group activity page.
  elseif (!empty($map[0]) && $map[0] == 'group-activity') {
    $group_nid = $map[1];
    $vars['heading_title'] = openlucius_core_fetch_node_title($group_nid);
    $vars['open'] = openlucius_core_is_open_group($group_nid);
  }

  // Check if we're in a group.
  if (!empty($group_nid)) {

    // Get node references bundled.
    $references = openlucius_core_group_get_referenced_items($group_nid);

    // Get files in group.
    $references['files'] = openlucius_files_count_group($group_nid);

    if (!openlucius_core_is_open_group($group_nid)) {

      // Get users with a reference to this node bundled.
      $references['users'] = openlucius_core_fetch_users('group', $group_nid, TRUE);
    }
    else {
      $references['users'] = openlucius_core_fetch_open_group_users($group_nid, TRUE);
    }
  }

  // Get the node type for the link.
  $nid = 0;
  if (!empty($object->nid)) {
    $nid = $object->nid;
  }

  // Initialize buttons array.
  $buttons = openlucius_core_default_group_header_buttons($group_nid, $nid, $references);

  // Check for the item map.
  if (!empty($item['map']) && $item['map'][0] == 'search' && ($item['map'][1] == 'content' || $item['map'][1] == 'user')) {

    // Set search true.
    $search = TRUE;

    // Search the search target.
    $search_target = $item['map'][2];
  }

  // Check for the user search page.
  if (!empty($item['map'][0]) && $item['map'][0] == 'user-search') {

    // Set search true.
    $search = TRUE;

    // Get the query parameters.
    $query_parameters = drupal_get_query_parameters();

    // Check the query parameters.
    if (!empty($query_parameters['combine'])) {

      // Set the search target.
      $search_target = $query_parameters['combine'];
    }
  }

  // Allow other modules to add/alter navigation buttons.
  drupal_alter('openlucius_core_navigation_buttons', $buttons);

  // Get the order settings.
  $settings = variable_get('openlucius_core_group_settings_order', array());

  // Check if there are settings.
  if (!empty($settings[$group_nid])) {

    // Loop through the settings.
    foreach ($settings[$group_nid] as $weight => $name) {

      // Check the class.
      if (!empty($buttons[$name]['class'])) {

        // Adjust the weight.
        $buttons[$name]['weight'] = $weight;
      }
    }

    // Use uasort to preserve the keys, with an anonymous function (5.3+).
    uasort($buttons, function ($a, $b) {
      return $a['weight'] - $b['weight'];
    });
  }

  if ($items == TRUE) {
    return $buttons;
  }

  if (!empty($group_nid)) {

    // Check whether the group has any disabled buttons.
    openlucius_core_process_check_enabled_group_buttons($group_nid, $buttons);
  }

  // Check if there are buttons.
  if ((!empty($buttons) && !empty($group_nid)) || $search == TRUE) {

    // Initialize list.
    $vars['group_navigation'] = '<ul>';

    // Loop through the buttons for the weight.
    foreach ($buttons as $key => $row) {
      $weight[$key] = $row['weight'];
    }

    // Sort by weight ascending.
    array_multisort($weight, SORT_ASC, $buttons);

    // Check for search page.
    if ($search == TRUE) {

      // Remove other buttons.
      unset($buttons);

      // Check the search target.
      if (!empty($search_target)) {

        // The view data.
        $view_name = 'user_search';

        // Set exposed filter arguments.
        $view_arguments = array('combine' => $search_target);

        // Get the view result count for the user search tab.
        $user_count = openlucius_core_get_view_result_count($view_name, 'default', $view_arguments);
      }

      // Create search buttons.
      $buttons = array(
        'search_content' => array(
          'class'  => 'search-content',
          'icon'   => 'fa fa-book',
          'link'   => 'search/content/' . $search_target,
          'text'   => t('Content'),
          'weight' => 1,
          'amount' => '',
        ),
        'search_user'    => array(
          'class'  => 'search-user',
          'icon'   => 'glyphicon glyphicon-user',
          'link'   => 'user-search',
          'query'  => 'combine',
          'value'  => $search_target,
          'text'   => t('Users'),
          'weight' => 2,
          'amount' => $user_count,
        ),
      );
    }

    // Loop through the buttons.
    foreach ($buttons as $settings) {

      // Initialize amount and class string.
      $amount = '';
      $class = '';

      // The link icon.
      $icon = '<span class="' . $settings['icon'] . '"></span>';

      // Set the link text.
      $text = '<span class="button-text">' . $settings['text'] . '</span>';

      // Check the amount.
      if (isset($settings['amount']) && !empty($settings['amount'])) {

        // Set the link text.
        $text = '<span class="button-text has-badge">' . $settings['text'] . '</span>';

        if ($settings['link'] == 'user-search') {
          $amount = '<span class="button-amount badge notifications_badge">' . $settings['amount'] . '</span>';
        }
        else {
          $amount = '<span class="button-amount">(' . $settings['amount'] . ')</span>';
        }
      }

      // Check for edit pages.
      if (!empty($map[0]) && ($map[0] == 'node' || $map[0] == 'comment') || (!empty($map[2]) && $map[2] == 'edit') || (!empty($map[2]) && $map[2] == 'add')) {

        // Get the node type from node add.
        if ($map[0] == 'node' && $map[1] == 'add') {
          $node_type = str_replace('-', '_', $map[2]);
        }
        // Get the node type from comment.
        else {
          if ($map[0] == 'comment') {
            $node_type = openlucius_core_get_type_by_nid($map[1]->nid);
          }
          // Get the node type from node.
          else {
            $node_type = $map[1]->type;
          }
        }

        // Check for todos and todo_lists.
        if (stristr($settings['link'], 'group-task-lists') != FALSE && ($node_type == 'ol_todo' || $node_type == 'ol_todo_list')) {
          $class = 'active';
        }

        // Check for text documents.
        if (stristr($settings['link'], 'group-textdocuments') != FALSE && $node_type == 'ol_text_document') {
          $class = 'active';
        }

        // Check for messages.
        if (stristr($settings['link'], 'group-messages') != FALSE && $node_type == 'ol_message') {
          $class = 'active';
        }

        // Check for event.
        if (stristr($settings['link'], 'group-calendar') != FALSE && $node_type == 'ol_event') {
          $class = 'active';
        }
      }

      // Check for the group activity page.
      if (stristr($settings['link'], 'group-activity') != FALSE && $map[0] == 'group-activity') {
        $class = 'active';
      }

      // Compare link with current path to add active class.
      if ($settings['link'] == current_path()) {
        $class = 'active';
      }

      // Set the list class.
      $list_class = (!empty($settings['class']) ? $settings['class'] : '');

      // Alternative check for the user search.
      if ($search == TRUE || (stristr($settings['link'], 'user-search') != FALSE && !empty($map[0]) && $map[0] == 'user-search') || $map[0] == 'node' && is_object($map[1])) {
        if (!empty($settings['query'])) {
          $link = url($settings['link'], array(
            'query' => array(
              $settings['query'] => $settings['value'],
            ),
          ));
        }
        else {
          $link = url($settings['link']);
        }
      }
      else {
        $link = url($settings['link']);
      }

      // Add the button using a template.
      $vars['group_navigation'] .= '<li class="link ' . $list_class . '"><a href="' . $link . '" class="' . $class . '">' . $icon . $text . ' ' . $amount . '</a></li>';
    }

    // Close the list.
    $vars['group_navigation'] .= '</ul>';
  }

  // Check group nid.
  if (!empty($group_nid)) {

    // Get group local tasks.
    $group_local_tasks = openlucius_core_get_specific_local_tasks($group_nid);

    // Check if there are tabs to display.
    if ($group_local_tasks['tabs']['count'] > 0) {

      // Filter out any unused local tasks.
      openlucius_core_filter_local_tasks($group_local_tasks);

      // Make the specific group local tasks alterable.
      drupal_alter('openlucius_core_group_local_tasks', $group_local_tasks);

      // Render the local tabs in a variable.
      $group_local_tasks = render($group_local_tasks);

      // Add variable for local tasks display.
      $vars['heading_local_tasks'] = '<i class="fa fa-angle-down"></i>' . '<ul class="dropdown-menu group-local-tasks">' . $group_local_tasks . '</ul>';
    }

    // Add variable for local tasks display.
    $vars['heading_local_tasks'] = '<i class="fa fa-angle-down"></i>' . '<ul class="dropdown-menu group-local-tasks">' . $group_local_tasks . '</ul>';
  }

  // Return themed output if there is output.
  if (!empty($group_nid) || !empty($vars['heading_title'])) {
    return theme('openlucius_core_group_navigation', array('vars' => $vars));
  }

  // Return empty string.
  return '';
}

/**
 * Function for altering the buttons based on settings within the group.
 *
 * @param int $group_nid
 *   The group node object.
 * @param array $buttons
 *   The array with the default group buttons.
 */
function openlucius_core_process_check_enabled_group_buttons($group_nid, &$buttons) {
  // Fetch Drupal settings.
  $group_settings = variable_get('openlucius_core_group_settings', array());

  // Check for enabled apps.
  if (!empty($group_settings[$group_nid])) {

    // Loop through group settings.
    foreach ($group_settings[$group_nid] as $key => $value) {

      // Check if the button exists and the group setting is enabled.
      if (isset($buttons[$key]) && $value === 0) {

        // Remove button as this app is disabled.
        unset($buttons[$key]);
      }
    }
  }
}

/**
 * Function to get referenced items.
 *
 * @param int $group
 *   The node id.
 * @param bool $count
 *   If set to false this function returns the objects.
 *
 * @return array
 *   Containing the values.
 */
function openlucius_core_group_get_referenced_items($group, $count = TRUE, $type = '') {

  // Get nodes with a reference to $group.
  $query = db_select('field_data_field_shared_group_reference', 'n')
    ->fields('n', array('bundle', 'entity_id'))
    ->condition('n.field_shared_group_reference_nid', $group)
    ->condition('m.status', 1, '=');

  $query->addTag('node_access');

  // Join on node table.
  $query->join('node', 'm', 'm.nid = n.entity_id');

  if ($type == 'todo') {

    // Add a join to the field_todo_label table.
    $query->join('field_data_field_todo_label', 'f', 'm.nid = f.entity_id');

    // Add where for skipping closed todos.
    $query->where("(f.field_todo_label_tid <> 2)");
  }

  // If count count else get everything.
  if ($count) {

    // Add a join to the field_todo_label table.
    $query->leftJoin('field_data_field_todo_label', 'f', 'm.nid = f.entity_id');

    // Add where for skipping closed todos.
    $query->where("(f.field_todo_label_tid <> 2 OR n.bundle <> 'ol_todo')");

    // Group by bundle so we have a bundle and amount.
    $query->groupBy('n.bundle');

    // Add the COUNT expression for the amount per bundle.
    $query->addExpression('COUNT(n.bundle)', 'count');

    // Return keyed.
    return $query->execute()->fetchAllKeyed(0, 2);
  }

  // Fetch all and return.
  return $query->execute()->fetchAll();
}

/**
 * Custom validation for user profile.
 */
function openlucius_core_profile_validate($form, &$form_state) {

  $values = $form_state['values'];
  $count = 0;

  // Loop through roles.
  foreach ($values['roles'] as $role) {
    // Check if set.
    if ($role == TRUE) {
      $count++;
    }
  }

  if ($count == 1) {
    form_set_error('roles', t('Select at least one extra role, otherwise the user will have no access.'));
  }
}

/**
 * Custom form for adding teams and members to active group.
 *
 * @see openlucius_core_add_form_validate()
 * @see openlucius_core_add_form_submit()
 */
function openlucius_core_add_form($form, &$form_state, $view) {

  // Only users with the 'create ol_group content' permission may see this form.
  if (!user_access('create ol_group content')) {
    return FALSE;
  }

  // Initialise the form.
  $form = array();

  $form['group_nid'] = array(
    '#type'       => 'hidden',
    // Cannot find documentation about #value in hidden, only when its a markup
    // but since we are loading an arguments from the view better sanitize it.
    '#value'      => check_plain($view->args[0]),
    '#attributes' => array('class' => array('group_nid')),
  );

  // Group section.
  $form['fieldset'] = array(
    '#type' => 'fieldset',
  );

  // Get the status of teams.
  $teams_enabled = variable_get('openlucius_core_enable_teams', 1);

  // Check if there are teams.
  if ($teams_enabled) {

    $form['fieldset']['add_team'] = array(
      '#type'              => 'textfield',
      '#attributes'        => array('placeholder' => array(t('Type to search team'))),
      '#autocomplete_path' => 'autocomplete/team',
    );
  }

  $form['fieldset']['add_user'] = array(
    '#type'              => 'textfield',
    '#attributes'        => array('placeholder' => array(t('Type to search user'))),
    '#autocomplete_path' => 'autocomplete/user',
  );
  $form['fieldset']['user_submit'] = array(
    '#type'       => 'submit',
    '#value'      => t('Add selected to this group'),
    '#attributes' => array('class' => array('btn', 'btn-default', 'btn-xs')),
  );

  return $form;
}

/**
 * Form validation handler for openlucius_core_add_form().
 *
 * @see openlucius_core_add_form_submit()
 */
function openlucius_core_add_form_validate($form, &$form_state) {
  $values = $form_state['values'];

  // Get group.
  $group = node_load($values['group_nid']);

  // Get wrapper.
  $node_wrapper = entity_metadata_wrapper('node', $group);
  if (!empty($values['add_user'])) {
    $type = 'user';

    // Get node id / user id from data.
    $id = openlucius_core_filter_id($values['add_user']);

    // Check if a user id was found.
    if (!empty($id)) {

      // Load the account.
      $account = user_load($id);

      // This group doesn't allow clients to be added.
      if (!$node_wrapper->field_shared_show_clients->value()) {

        // Check for client role.
        if (openlucius_core_user_is_client($account)) {
          form_set_error('add_user', t('This @type is a client, you must change
              the "Working with clients in this group?" setting to Yes if you wish
              to import.', array('@type' => $type)));
        }
      }
    }
    else {
      form_set_error('add_user', t('This user could not be found'));
    }
  }

  // Check if a team was added.
  if (!empty($values['add_team'])) {
    $type = 'team';
    $id = openlucius_core_filter_id($values['add_team']);

    // Check if the id is numeric.
    if (is_numeric($id)) {

      // Fetch users who are a member of type.
      $users = openlucius_core_fetch_users('team', $id);

      // This group doesn't allow clients to be added.
      if (!$node_wrapper->field_shared_show_clients->value()) {

        // Preliminary check on clients.
        foreach ($users as $user) {

          // Check for client.
          if (user_access('openlucius client', $user) && $user->uid != 1) {
            form_set_error('add_team', t('This @type contains a client, you must change
            the "Working with clients in this group?" setting to Yes if you wish
            to import.', array('@type' => $type)));
          }
        }
      }
    }
    else {
      form_set_error('add_team', t('This team could not be found'));
    }
  }
}

/**
 * Form submission handler for openlucius_core_add_form().
 *
 * @see openlucius_core_add_form_validate()
 */
function openlucius_core_add_form_submit($form, &$form_state) {
  $values = $form_state['values'];

  // Get group.
  $group = node_load($values['group_nid']);

  if (!empty($values['add_user'])) {
    $id = openlucius_core_filter_id($values['add_user']);
    $users = array(user_load($id));
  }
  elseif (!empty($values['add_team'])) {
    $id = openlucius_core_filter_id($values['add_team']);
    // Get all the users in the team.
    $users = openlucius_core_fetch_users('team', $id);
  }

  $user_count = 0;
  // Loop through users.
  foreach ($users as $user) {
    $in_group = FALSE;

    // Get user wrapper.
    $user_wrapper = entity_metadata_wrapper('user', $user);

    // Loop through references of field.
    foreach ($user_wrapper->field_groups->value() as $reference) {

      // Check for match in references.
      if ($reference->nid == $group->nid) {
        // User is already in group so break.
        $in_group = TRUE;
        break;
      }
    }

    // If the user is not in the group.
    if (!$in_group) {
      // Group id to field.
      $user_wrapper->field_groups[] = $group;
      $user_wrapper->save();

      // Save user.
      user_save($user);
      // Increase counter per user.
      $user_count++;
    }
  }

  // Message to be displayed after successful add.
  drupal_set_message(t('@number user(s) have been added to group @group', array(
    '@number' => $user_count,
    '@group'  => $group->title,
  )));
}

/**
 * Function to return the active group.
 *
 * @return int
 *   The current group id or 0.
 */
function openlucius_core_get_active_group() {
  $menu_item = menu_get_item();

  // Check for group files.
  if ($menu_item['path'] == 'group-files') {
    return $menu_item['page_arguments'][1];
  }
  // Check for group activity.
  elseif ($menu_item['path'] == 'group-activity/%') {
    return $menu_item['page_arguments'][0];
  }
  elseif ($menu_item['path'] == 'comment/reply/%') {
    $entity = $menu_item['page_arguments'][0];
  }
  // If this is a node being edited use the comment in the menu item.
  elseif ($menu_item['path'] == 'comment/%/edit') {
    $comment = $menu_item['page_arguments'][0];
    $entity = node_load($comment->nid);
  }
  // This is a comment so load the attached node.
  elseif ($menu_item['path'] == 'comment/%') {
    $comment = comment_load($menu_item['page_arguments'][0]);
    $entity = node_load($comment->nid);
  }
  else {
    $entity = menu_get_object('node', 1);
  }

  // By default the group is 0.
  $gid = 0;

  // Any node.
  if (isset($entity->type) && $entity->type) {
    if ($entity->type == 'ol_group') {
      $gid = $entity->nid;
    }
    elseif (!empty($entity->field_shared_group_reference)) {
      $gid = $entity->field_shared_group_reference[LANGUAGE_NONE][0]['nid'];
    }
  }
  elseif ($menu_item['page_callback'] == 'views_page' || $menu_item['page_callback'] == 'node_add') {
    // Some exceptions.
    if ($menu_item['page_arguments'][0] == 'group_calendar' && $menu_item['page_arguments'][1] == 'page_4') {
      return FALSE;
    }

    // Get numeric arguments.
    $numeric_args = array();
    foreach ($menu_item['page_arguments'] as $arg) {
      if (is_numeric($arg)) {
        $numeric_args[] = $arg;
      }
    }

    // If there are numeric arguments.
    if (count($numeric_args) > 0) {

      // Fetch all groups id's, which match the arguments.
      $group_ids = db_select('node', 'n')
        ->fields('n', array('nid'))
        ->condition('type', 'ol_group', '=')
        ->condition('nid', $numeric_args, 'IN')
        ->execute()
        ->fetchAllKeyed(0, 0);

      // Loop through the group ids.
      foreach ($group_ids as $arg) {
        if (in_array($arg, $numeric_args)) {
          $gid = $arg;
          break;
        }
      }
    }
  }

  return $gid;
}

/**
 * Function to check if an user is in the current group.
 *
 * @return bool
 *   If the user has access to the group.
 */
function openlucius_core_access_to_current_group() {

  // The logged in user.
  global $user;

  // Get the active group.
  $gid = openlucius_core_get_active_group();

  return (openlucius_core_user_in_group($gid, $user->uid) || openlucius_core_is_open_group($gid));
}

/**
 * Implements hook_view_post_render().
 *
 * Views conflicts with grants in a way when a relation with empty todos from
 * the list is added.
 */
function openlucius_core_views_post_render(&$view, &$output, &$cache) {
  // Only do on one view.
  if (($view->name == 'todos_in_group_dashboard' && $view->current_display == 'block') || $view->name == 'all_todo_lists_in_a_group') {

    // Only attach here if we have results.
    if (!empty($view->result)) {

      // Get the contextual filter.
      $group = $view->args[0];
      openlucius_core_attach_empty_active_todolists($output, $group);
    }
    else {

      // Hide if empty.
      if (empty($view->empty)) {
        $output = '';
      }
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function openlucius_core_views_pre_render(&$view) {

  global $user, $language;

  if (($view->name == 'todos_in_group_dashboard' && $view->current_display == 'block') || $view->name == 'all_todo_lists_in_a_group') {

    if (user_access('openlucius todo toggle') || user_access('openlucius todo prioritize')) {

      // Append token for the user.
      $view->token = drupal_get_token();
      $view->is_client = openlucius_core_user_is_client();
    }

    $output = '';
    $group = $view->args[0];
    openlucius_core_attach_empty_active_todolists($output, $group);
    if (isset($view->empty['area_text_custom']->options['content']) && !empty($output)) {
      $view->empty['area_text_custom']->options['content'] = $output;
    }
    else {
      $view->empty = array();
    }
  }
  elseif ($view->name == 'group_calendar') {
    if ($view->current_display == 'page_1') {
      $account = user_load($user->uid);
      $path = url('calendar/' . $view->args[0] . '/export.ics/' . $view->args[1], array('absolute' => TRUE));
      $webcal = str_replace('http://', 'webcal://', $path);

      if (isset($account->field_user_hash[LANGUAGE_NONE][0]['value'])) {
        if ($image = theme('image', array(
          'path'   => 'misc/feed.png',
          'width'  => 16,
          'height' => 16,
          'alt'    => t('Subscribe to calendar'),
        ))
        ) {
          $view->feed_icon = l($image, $webcal, array(
            'query'      => array('hash' => $account->field_user_hash[LANGUAGE_NONE][0]['value']),
            'html'       => TRUE,
            'attributes' => array('class' => array('feed-icon')),
          ));
        }
      }
    }
    /* User calendar */
    elseif ($view->current_display == 'page_4') {

      // Loop through results.
      foreach ($view->result as &$result) {

        // Place the string in variable.
        $string = &$result->field_field_todo_label[0]['rendered']['#markup'];

        // Expose string.
        i18n_string(OPENLUCIUS_CORE_LOCALE . ':' . $string, $string, array('update' => TRUE));

        // Add the string translate.
        $string = i18n_string(OPENLUCIUS_CORE_LOCALE . ':' . $string, $string, array(
          'langcode' => $language->language,
          'sanitize' => FALSE,
        ));
      }
    }
    elseif ($view->current_display == 'page_5') {
      $view->feed_icon = '';
    }
    // We need to alter the results.
    elseif ($view->current_display == 'feed_1' && isset($_GET['hash']) && empty($view->result)) {
      $uid = openlucius_core_hash_to_uid();
      if (!empty($uid)) {

        // Check if the hashed user is in this group.
        if (openlucius_core_user_in_group($view->args[1], $uid)) {

          // Replace the user.
          $user = user_load($uid);
          $view = views_get_view('group_calendar');
          $view->set_display('feed_1');
          $view->execute();
        }
      }
    }
  }
  elseif ($view->name == 'todos_on_todo_list_page') {
    if (user_access('openlucius todo toggle') || user_access('openlucius todo prioritize')) {
      // Append token for the user.
      $view->token = drupal_get_token();
      $view->is_client = openlucius_core_user_is_client();
    }

    // Get closed tid.
    $closed = variable_get('todo_closedstatus_tid');
    foreach ($view->result as &$result) {
      $result->is_closed = FALSE;
      // Check if the todo is closed.
      if ($result->field_field_todo_label[0]['raw']['tid'] == $closed) {
        $result->is_closed = TRUE;
      }
    }
  }
  elseif ($view->name == 'user_search') {

    // Get the query parameters.
    $params = drupal_get_query_parameters();

    // Check for the combine result.
    if (isset($params['combine'])) {

      // Store the query.
      $query = $params['combine'];

      // Loop through the view results.
      foreach ($view->result as &$result) {

        // Loop through result fields.
        foreach ($result as &$fields) {

          // Check if field is array.
          if (is_array($fields)) {

            // Loop through  fields.
            foreach ($fields as $key2 => &$view_fields) {

              // Check for numeric arrays.
              if (is_numeric($key2)) {

                // Extract the word from the string for replacing below.
                $word = substr(stristr($view_fields['rendered']['#markup'], $query), 0, strlen($query));

                // Find the word.
                if (stripos($view_fields['rendered']['#markup'], $query) !== FALSE) {
                  $view_fields['rendered']['#markup'] = str_ireplace($query, '<strong>' . $word . '</strong>', $view_fields['rendered']['#markup']);
                }
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Form constructor for the add todo form.
 *
 * @param int $todo_list_reference
 *   The todolist referenced in the todo.
 *
 * @ingroup forms
 *
 * @return mixed
 *   Returns the form.
 */
function openlucius_core_add_todo_form($form, &$form_state, $todo_list_reference) {

  // Get the menu object.
  $menu_object = menu_get_object();
  $menu_item = menu_get_item();

  // Initialize group reference.
  $group_reference = 0;

  // On groups the group reference is the node id.
  if (!empty($menu_object)) {
    $group_reference = $menu_object->nid;
  }
  elseif (!empty($menu_item) && $menu_item['path'] == 'group-task-lists') {
    $group_reference = $menu_item['map'][1];
  }

  // The hidden group reference.
  $form['group_reference'] = array(
    '#type'  => 'hidden',
    '#value' => $group_reference,
  );

  // The hidden task list reference.
  $form['todo_list_reference'] = array(
    '#type'  => 'hidden',
    '#value' => $todo_list_reference,
  );

  $form['add_link'] = array(
    '#markup' => '<button class="show_form show_form-' . check_plain($todo_list_reference) . ' btn btn-openlucius btn-xs" type="button"><span class="glyphicon glyphicon-plus-sign"> ' . t('Task') . '</span></button>',
  );

  // The task title textfield.
  $form['todo_title'] = array(
    '#title'      => t('Title'),
    '#type'       => 'textfield',
    '#attributes' => array(
      'class'        => array(
        'todo_input_field',
        'todo_input_field-' . $todo_list_reference,
      ),
      'autocomplete' => array('off'),
    ),
    '#weight'     => 0,
  );

  // Fetch all users.
  $all_users = openlucius_core_fetch_users('group', $group_reference);

  // Initiate array.
  $users = array();

  foreach ($all_users as $key => $item) {
    if (!empty($item->realname)) {
      $users[$key] = $item->realname;
    }
    else {
      $users[$key] = $item->name;
    }
  }

  $form['field_todo_user_reference'] = array(
    '#type'         => 'select',
    '#options'      => $users,
    '#empty_option' => '- ' . t('None') . ' -',
    '#attributes'   => array(
      'class' => array(
        'todo_assign_to',
        'todo_assign_to-' . $todo_list_reference,
      ),
    ),
    '#weight'       => 10,
  );

  $form['field_todo_due_date_singledate'] = array(
    '#title'           => '',
    '#type'            => 'date_popup',
    '#date_format'     => 'j F Y',
    '#date_year_range' => '0:+2',
    '#default_value'   => NULL,
    '#attributes'      => array(
      'class' => array(
        'todo_due_date',
        'todo_due_date-' . $todo_list_reference,
      ),
    ),
    '#weight'          => 20,
  );

  // Create notify button.
  $form['notify_button'] = array(
    '#type'       => 'button',
    '#weight'     => 25,
    '#prefix'     => '<div class="todo_notify_holder" data-toggle="tooltip" data-placement="top" title="' . t('Notify people') . '">',
    '#suffix'     => '</div>',
    '#value'      => '<span class="glyphicon glyphicon-user"> </span>',
    '#attributes' => array(
      'class'       => array(
        'btn',
        'btn-openlucius',
        'btn-xs',
        'todo_notify',
        'todo_notify-' . check_plain($todo_list_reference),
      ),
      'data-toggle' => 'modal',
      'data-target' => '.openlucius-notify-modal-' . $todo_list_reference,
    ),
  );

  // Modal prefix.
  $notify_modal_prefix =
    '<div class="modal openlucius-notify-modal openlucius-notify-modal-' . $todo_list_reference . '" tabindex="-1" role="dialog">
  <div class="modal-dialog">
  <div class="modal-content">
  <div class="modal-header">
  <button type="button" class="close" data-dismiss="modal" aria-label="Close">
  <span aria-hidden="true" class="glyphicon glyphicon-remove"></span>
  </button>
  <h4 class="modal-title">' . t('Select the people you wish to notify') . '</h4>
  </div>

  <div class="modal-header">
  <input placeholder="' . t('Filter users') . '" id="filterCheckboxes" type="text" />
  <span class="notify-everyone"><label><input type="checkbox" id="checkNotifyEveryone"/> ' . t('Everyone') . '</label></span>
  </div>

  <div class="modal-body">';

  // Modal suffix.
  $notify_modal_suffix =
    '</div>
  <div class="modal-footer">
  <button type="button" class="btn btn-primary" data-dismiss="modal">' . t('Ok') . '</button>
  </div>
  </div>
  </div>
  </div>';

  // A list of checkboxes with users.
  $form['notify_modal'] = array(
    '#prefix'  => $notify_modal_prefix,
    '#suffix'  => $notify_modal_suffix,
    '#type'    => 'checkboxes',
    '#options' => $users,
  );

  $form['submit'] = array(
    '#type'       => 'submit',
    '#value'      => t('Add'),
    '#attributes' => array(
      'class' => array(
        'add-todo',
        'btn-xs',
        'todo_submit',
        'todo_submit-' . $todo_list_reference,
      ),
    ),
    '#ajax'       => array(
      'callback' => 'openlucius_core_add_todo_form_ajax_submit',
      'wrapper'  => 'todo_title',
    ),
    '#weight'     => 30,
  );

  $form['done_link'] = array(
    '#markup' => '<a href="#" class="hide_form hide_form-' . check_plain($todo_list_reference) . '">' . t('Done adding') . '</a>',
    '#weight' => 40,
  );

  $form['feedback'] = array(
    '#markup' => '<span class="hidden feedback">' . t('Successfully added the task') . '</span>',
  );

  return $form;
}

/**
 * Helper function to filter the id from autocomplete results.
 *
 * @param string $string
 *   The string to filter, 'User (6)'.
 *
 * @return mixed
 *   The id as integer or FALSE.
 */
function openlucius_core_filter_id($string) {
  preg_match('#\((.*?)\)#', $string, $match);
  if (isset($match[1]) && is_numeric($match[1])) {
    return $match[1];
  }
  else {
    return FALSE;
  }
}

/**
 * Ajax form submission handler for openlucius_core_add_todo_form().
 */
function openlucius_core_add_todo_form_ajax_submit($form, $form_state) {

  // The logged in user.
  global $user;

  $commands = array();
  $values = $form_state['values'];

  // Add ctools requirements for the modals.
  ctools_include('ajax');
  ctools_include('modal');
  ctools_modal_add_js();

  // Add the jquery date picker.
  drupal_add_library('system', 'ui.datepicker');

  // Add whether the user is a client or not.
  drupal_add_js(array(
    'openlucius_core_client' => openlucius_core_user_is_client(),
  ), 'setting');

  // Include modal.inc.
  module_load_include('inc', 'openlucius_core', 'includes/modal');

  // Set variables for later use.
  $group_reference = $values['group_reference'];
  $title = $values['todo_title'];
  $assign_to = $values['field_todo_user_reference'];
  $due_date = strtotime($values['field_todo_due_date_singledate']);
  $todo_list_reference = $values['todo_list_reference'];

  // Only execute if there is a title inserted.
  if (!empty($title) && isset($title)) {

    // Create a new ol_todo node object.
    $node = new StdClass();

    // Add the type and language.
    $node->type = 'ol_todo';
    $node->language = LANGUAGE_NONE;

    // Prepare the node object for editing.
    node_object_prepare($node);

    // Add the required fields.
    $node->uid = $user->uid;
    $node->title = $title;
    $node->field_shared_group_reference[LANGUAGE_NONE][0]['nid'] = $group_reference;
    $node->field_todo_list_reference[LANGUAGE_NONE][0]['nid'] = $todo_list_reference;
    if (isset($assign_to) && is_numeric($assign_to)) {
      $node->field_todo_user_reference[LANGUAGE_NONE][0]['uid'] = $assign_to;
    }

    if (isset($due_date) && !empty($due_date)) {
      $node->field_todo_due_date_singledate[LANGUAGE_NONE][0]['value'] = $due_date;
      $node->field_todo_due_date_singledate[LANGUAGE_NONE][0]['value2'] = $due_date;
    }

    // Check if there are people to be notified.
    if (!empty($values['notify_modal'])) {
      $node->notify_individual = $values['notify_modal'];
    }

    // Allow other modules to alter the node before saving.
    drupal_alter('openlucius_core_inline_todo_save', $node, $values);

    // Save the node.
    node_save($node);
  }

  // Extract node values.
  $node_values = openlucius_core_extract_values($node);

  // Add the node id.
  $node_values['nid'] = $node->nid;

  // Add the comment count.
  $node_values['comment_count'] = ctools_modal_text_button('<span class="glyphicon glyphicon-comment"></span> 0', 'openlucius-core/nojs/' . $node->nid . '/comment/form/comment-view', t('Add comment'), 'openlucius-node-comments');

  // Add the time ago.
  $node_values['time_ago'] = t('@count sec', array('@count' => 1));

  // Add the token.
  $node_values['token'] = drupal_get_token();

  // Initialize the status.
  $status = '-';

  // Check if there is a status.
  if (!empty($node->field_todo_label)) {

    // Load the status term.
    $term = taxonomy_term_load($node->field_todo_label[LANGUAGE_NONE][0]['tid']);

    // Use the status name.
    $status = check_plain($term->name);
  }

  // Check the status.
  if ($status !== '-') {

    // Set the label term id.
    $node_values['label_tid'] = $node->field_todo_label[LANGUAGE_NONE][0]['tid'];
  }
  else {

    // Otherwise set the open status.
    $node_values['label_tid'] = variable_get('todo_openstatus_tid');
  }

  // Check for delete access.
  if (drupal_valid_path('node/' . $node->nid . '/delete')) {

    // Add delete link.
    $destination = array('query' => array('destination' => 'node/' . $group_reference));
    $node_values['delete_link'] = url('node/' . $node->nid . '/delete', $destination);
  }

  // And prepend the content before the row with that last id.
  $target = 'tr#quick-add-to-' . $todo_list_reference;

  // Trim the content, because the blank line coding standard from Drupal
  // breaks the inserting from Ajax, it adds a wrapper div.
  $content = trim(theme('openlucius_core_add_todo', $node_values));

  // Build the commands array.
  $commands[] = ajax_command_after($target, $content);

  // Invoke command.
  $commands[] = ajax_command_invoke(NULL, 'addedInlineTodo', array(array('nid' => $node->nid)));

  // Return ajax.
  return array(
    '#type'     => 'ajax',
    '#commands' => $commands,
  );
}

/**
 * Implements hook_heartbeat_activity_view().
 */
function openlucius_core_heartbeat_activity_view(HeartbeatActivity $heartbeatActivity, $view_mode = 'full', $language = NULL) {
  // If the username is set, remove it. We do not want it anywhere.
  if (isset($heartbeatActivity->content['username']) && !empty($heartbeatActivity->content['username'])) {
    unset($heartbeatActivity->content['username']);
  }
}

/**
 * Implements heartbeat_theme_alter().
 */
function openlucius_core_heartbeat_theme_alter(&$messages, HeartbeatStream $heartbeatStream) {

  foreach ($messages as $key => $message) {
    $message = &$messages[$key];
    // Since its not possible to translate the ' and ' separator
    // we use this function to make it translatable.
    // Get the current set separator.
    $separator = $message->template->concat_args['merge_end_separator'];
    // Only trigger if the string is found.
    if (strpos($message->message, $separator)) {
      // Check if it is translated.
      if (t('merge_end_separator') != 'merge_end_separator') {
        // Replace with the translated separator.
        $message->message = str_replace($separator, t('merge_end_separator'), $message->message);
      }
    }
  }
}

/**
 * Function to get all the lists within a group.
 *
 * @param int $group_id
 *   The id of a group.
 * @param bool $published
 *   Whether or not to add only published nodes.
 * @param bool $alphabetical
 *   Whether or not to return the array alphabetically.
 *
 * @return array
 *   Array of task lists in a group.
 */
function openlucius_core_get_lists_in_group($group_id, $published = TRUE, $alphabetical = FALSE) {
  $query = db_select('field_data_field_shared_group_reference', 'g');
  $query->join('node', 'n', 'n.nid = g.entity_id');
  $query->fields('n', array('nid', 'title'));
  $query->condition('g.bundle', 'ol_todo_list', '=');

  if ($published) {
    $query->condition('n.status', NODE_PUBLISHED);
  }

  $query->condition('g.field_shared_group_reference_nid', $group_id, '=');
  $query->orderBy('title', 'ASC');

  if ($alphabetical) {
    $query->orderBy('n.title', 'ASC');
  }

  $result = $query->execute()->fetchAllKeyed(0, 1);

  // Return the array.
  return $result;
}

/**
 * Function to get all the custom content types.
 *
 * @return array
 *   List of the custom content types.
 */
function openlucius_core_get_content_types() {

  $content_types = array(
    'file',
    'ol_event',
    'ol_file_folder',
    'ol_message',
    'ol_text_document',
    'ol_todo',
    'ol_todo_list',
  );

  // Allow other modules to alter the content types list.
  drupal_alter('openlucius_core_content_types', $content_types);

  return $content_types;
}

/**
 * Function to get all the custom content types.
 *
 * @return array
 *   List of the custom content types.
 */
function openlucius_core_get_recent_stuff_content_types() {

  $content_types = array(
    'ol_event',
    'ol_file_folder',
    'file',
    'ol_event',
    'ol_message',
    'ol_text_document',
    'ol_todo',
    'ol_todo_list',
  );

  // Allow other modules to alter the content types list.
  drupal_alter('openlucius_core_recent_stuff_content_types', $content_types);

  return $content_types;
}

/**
 * Function to get all the custom content types that have a signature checkbox.
 *
 * @return array
 *   List of the custom content types that can have a signature checkbox.
 */
function openlucius_core_get_content_types_with_signature() {

  $content_types = array(
    'ol_event',
    'ol_message',
    'ol_text_document',
    'ol_todo',
    'ol_todo_list',
  );

  drupal_alter('openlucius_core_content_types_with_signature', $content_types);

  return $content_types;
}

/**
 * Function to check if an user is a client.
 *
 * @param mixed $account
 *   Empty, user object or uid.
 *
 * @return bool
 *   Returns either TRUE or FALSE.
 */
function openlucius_core_user_is_client($account = NULL) {
  global $user;

  if ($account == NULL) {
    $account = $user;
  }
  elseif (!isset($account->uid)) {
    $account = user_load($account);
  }

  // Check if the user has the client role (and is not the admin).
  if (user_access('openlucius client', $account) && $account->uid != 1) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_heartbeat_messages_alter().
 */
function openlucius_core_heartbeat_messages_alter(&$messages, HeartbeatStream $heartbeatStream) {
  global $user;

  // Fetch group users.
  $my_groups = openlucius_core_fetch_user_groups($user->uid);

  foreach ($messages as &$message) {
    // Fetch groups from message user.
    $groups = openlucius_core_fetch_user_groups($message->uid);

    // Check if we have matching groups.
    $matches = array_intersect($my_groups, $groups);

    // If not hide the message.
    if (empty($matches)) {
      $message->access = HEARTBEAT_NONE;
      $message->uid_access = FALSE;
      $message->nid_access = FALSE;
    }
  }
}

/**
 * Implements hook_help().
 */
function openlucius_core_help($path, $arg) {

  global $user;

  // Check if we are on a Group Dashboard page.
  $nodetype = db_query('SELECT type FROM {node} WHERE nid = :nid', array(':nid' => $arg[1]))->fetchField();

  if ($arg[0] == 'node' && $arg[2] != 'edit' && $nodetype == 'ol_group' && user_access('access content')) {

    $node = menu_get_object();
    // Get node references bundled.
    $references = openlucius_core_group_get_referenced_items($node->nid);
    // TODO: merge with earlier bugfix, $references only checks on todo's now.
    // Get files in group.
    $file_count = openlucius_files_count_group($node->nid);

    // Check if 0.
    if ($file_count != 0) {
      $references['file'] = $file_count;
    }

    // If there are no items in Group yet, print help text:
    if (count($references) == 0) {
      $helptext = '<p><b>' . t('Hi') . ' ' . $user->name . t(', welcome to the dashboard of your new Group!') . '</b><p>';
      if (user_access('create ol_group content')) {
        $helptext .= t('Your next steps:');
        $helptext .= '</p><ul>';
        $helptext .= '<li>';
        $helptext .= t('Add Group members: click on the "Users" button.');
        $helptext .= '</li>';
      }
      $helptext .= '<li>' . t('You can start sharing your 1st items by clicking on one the tabs above.') . '</li></ul>';

      return $helptext;
    }
  }
}

/**
 * Function viewing 'my groups'.
 */
function openlucius_core_my_groups_block() {

  global $user;

  // Get all groups where user is added.
  $user_groups = openlucius_core_fetch_user_groups($user->uid, TRUE);

  // Sort.
  natcasesort($user_groups);

  // Initialize.
  $content = '';

  // Return 'group id' as key and 'group title' as value.
  // Build content for 'my groups'.
  foreach ($user_groups as $gid => $group_title) {

    // Initiate vars as empty array.
    $vars = array();

    // Make sure no unpublished Groups are shown.
    if (!empty($group_title)) {

      // Set group title.
      $vars['group_title'] = $group_title;

      // Check for unseen content.
      $vars['unseen_content'] = openlucius_core_group_has_unseen_content($gid);

      $vars['group_url'] = url('openlucius-core/app-redirect/' . $gid);
      $vars['open'] = openlucius_core_is_open_group($gid);

      // If this is not an open group.
      if (!$vars['open']) {
        $vars['group_users_count'] = openlucius_core_fetch_users('group', $gid, TRUE);
      }
      else {
        $vars['group_users_count'] = openlucius_core_fetch_open_group_users($gid, TRUE);
      }

      $vars['gid'] = $gid;
      $content .= theme('openlucius_core_my_groups', array('vars' => $vars));
    }
  }
  return $content;
}

/**
 * Page callback function for default groups.
 */
function openlucius_core_default_group_settings_form($form, &$form_state) {

  $form = array();

  // The groups as fieldset.
  $form['groups'] = array(
    '#title'       => t('The groups'),
    '#type'        => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed'   => FALSE,
  );

  // Fetch options.
  $options = openlucius_core_get_checkboxes('group');

  // If we have options display the form element.
  if (!empty($options)) {
    $form['groups']['openlucius_core_groups'] = array(
      '#title'         => t('Automatically add users to these groups when created'),
      '#type'          => 'checkboxes',
      '#options'       => $options,
      '#default_value' => variable_get('openlucius_core_groups', array()),
    );
  }

  // The teams as fieldset.
  $form['teams'] = array(
    '#title'       => t('The teams'),
    '#type'        => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed'   => FALSE,
  );

  // Fetch options.
  $options = openlucius_core_get_checkboxes('team');

  // Check if we have options if not hide the form element.
  if (!empty($options)) {
    $form['teams']['openlucius_core_teams'] = array(
      '#title'         => t('Automatically add users to these teams when created'),
      '#type'          => 'checkboxes',
      '#options'       => $options,
      '#default_value' => variable_get('openlucius_core_teams', array()),
    );
  }

  return system_settings_form($form);
}

/**
 * Function for getting the config paths.
 *
 * This function is used for the config pages and their vertical tabs.
 *
 * @return array
 *   Returns an array containing the paths.
 */
function openlucius_core_fetch_config_places() {
  $places = array(
    'user/login',
    'user/password',
    'admin/config/openlucius',
    'admin/config/openlucius/general',
    'admin/config/openlucius/groups',
    'admin/config/openlucius/task-status',
    'admin/config/openlucius/openlucius_app_defaults',
  );

  // Allow other modules to change the places array.
  drupal_alter('openlucius_core_config_places', $places);

  return $places;
}

/**
 * Function to get the groups/teams.
 *
 * @param string $type
 *   The type of checkbox list to get (group/team).
 *
 * @return mixed
 *   Returns array of key value ids.
 */
function openlucius_core_get_checkboxes($type) {

  // Check for the type of item to get.
  if ($type == 'group') {
    $type = 'ol_group';
  }
  elseif ($type == 'team') {
    $type = 'team';
  }

  // Query the database to get all the items.
  $results = db_select('node', 'n')
    ->fields('n', array('title', 'nid'))
    ->condition('n.type', $type, '=')
    ->condition('n.status', 1, '=')
    ->execute()
    ->fetchAll();

  // Initialise empty array.
  $ids_list = array();

  // Check if there are any results.
  if (!empty($results)) {

    // If so, loop through the results.
    foreach ($results as $result) {

      // Set array of node ids and values.
      $ids_list[$result->nid] = $result->title;
    }
  }

  // Return results.
  return $ids_list;
}

/**
 * Function to check if a todolist is empty.
 *
 * @param int $nid
 *   The todolist to be checked.
 *
 * @return bool
 *   Whether the list was empty.
 */
function openlucius_core_todolist_is_empty($nid) {
  // Get the closed status for label checking.
  $closed_tid = variable_get('todo_closedstatus_tid');

  $query = db_select('field_data_field_todo_list_reference', 'r')
    ->fields('r', array('entity_id'))
    ->condition('field_todo_list_reference_nid', $nid, '=');

  // Join for closed label check.
  $query->leftJoin('field_data_field_todo_label', 'l', 'r.entity_id = l.entity_id');

  // Add condition for label.
  $query->condition('l.field_todo_label_tid', $closed_tid, '<>');

  // Fetch results.
  $results = $query->execute()->fetchAll();

  return empty($results);
}

/**
 * Function to attach empty active todolists.
 *
 * @param string $output
 *   The output these results have to be attached to.
 * @param int $group
 *   The group for which these lists must be attached.
 */
function openlucius_core_attach_empty_active_todolists(&$output, $group) {
  // Fetch all todolists for this group.
  $query = db_select('node', 'n')->fields('n', array('title', 'nid'));

  $query->leftJoin('field_data_field_shared_group_reference', 'g', "n.nid = g.entity_id");

  $query->condition('g.field_shared_group_reference_nid', $group, '=')
        ->condition('n.status', 1, '=')
        ->condition('n.type', 'ol_todo_list', '=')
        ->orderBy('n.title', 'ASC');

  $result = $query->execute()->fetchAll();

  foreach ($result as $item) {
    // Check if this todolist is empty.
    $is_empty = openlucius_core_todolist_is_empty($item->nid);

    if ($is_empty) {
      $output .= '<h5 class="empty-todo-list"><span class="glyphicon glyphicon-list-alt"></span>' . l($item->title, 'node/' . $item->nid) . '</h5>';
    }
  }
}

/**
 * Function to obtain uid from attached hash.
 *
 * @param string $hash
 *   The hash to use if not in the URL.
 *
 * @return mixed
 *   Returns either the uid or FALSE.
 */
function openlucius_core_hash_to_uid($hash = NULL) {
  if (empty($hash)) {
    $hash = filter_xss($_GET['hash']);
  }
  return db_select('field_data_field_user_hash', 'h')
    ->fields('h', array('entity_id'))
    ->condition('h.field_user_hash_value', $hash, '=')
    ->execute()
    ->fetchField();
}

/**
 * Function to obtain hash from uid.
 *
 * @param int $uid
 *   The id of the user to get the hash for.
 *
 * @return mixed
 *   Returns either the hash or FALSE.
 */
function openlucius_core_uid_to_hash($uid) {
  return db_select('field_data_field_user_hash', 'h')
    ->fields('h', array('field_user_hash_value'))
    ->condition('h.entity_id', $uid, '=')
    ->execute()
    ->fetchField();
}

/**
 * Custom access callback function.
 */
function openlucius_core_access_callback() {
  global $user;
  return $user->uid == 1 || user_access('administer user settings');
}

/**
 * Function to return all terms for a vocabulary.
 *
 * @param string $machine_name
 *   The machine name of the vocabulary.
 * @param bool $full
 *   If you want the full terms or just the name.
 *
 * @return mixed
 *   Array of the terms.
 */
function openlucius_core_get_terms($machine_name, $full = FALSE) {
  $vocabulary = taxonomy_vocabulary_machine_name_load($machine_name);
  $raw_terms = taxonomy_get_tree($vocabulary->vid);
  $terms = array();
  foreach ($raw_terms as $term) {
    if (!$full) {
      $terms[$term->tid] = check_plain($term->name);
    }
    else {
      $terms[$term->tid] = taxonomy_term_load($term->tid);
    }
  }
  return $terms;
}

/**
 * Function to toggle a todo open / closed.
 *
 * @param \stdClass $node
 *   The node to be toggled.
 */
function openlucius_core_todo_toggle(\stdClass $node) {

  // The node types.
  $node_types = array(
    'ol_todo',
  );

  // Allow other modules to add their content types.
  drupal_alter('openlucius_core_todo_toggle_types', $node_types);

  // Check if we have a token, if it's invalid or not set return FALSE.
  // Check if the node type is correct otherwise return FALSE.
  if ((isset($_POST['token']) ? !drupal_valid_token($_POST['token']) : TRUE) || (!in_array($node->type, $node_types)) || !isset($_POST['status'])) {

    drupal_json_output(FALSE);
    drupal_exit();
  }

  // Get node wrapper for easy access.
  $node_wrapper = entity_metadata_wrapper('node', $node);

  // Close todo if status is 0.
  if (check_plain($_POST['status']) == 0) {
    $node_wrapper->field_todo_label->set(variable_get('todo_closedstatus_tid'));
  }
  // Reopen the todo.
  else {
    $old_status = variable_get('todo_openstatus_tid');
    if (isset($_POST['old_status'])) {
      $old_status = (int) check_plain($_POST['old_status']);
    }
    $node_wrapper->field_todo_label->set($old_status);
  }

  // Save node.
  $node_wrapper->save();

  // Return TRUE.
  drupal_json_output(TRUE);
  drupal_exit();
}

/**
 * Function to transfer a todo from one list to another.
 *
 * @param \stdClass $node
 *   The node to be transferred.
 */
function openlucius_core_todo_transfer(\stdClass $node) {

  // Check if we have a token, if it's invalid or not set return FALSE.
  // Check if the node type is correct otherwise return FALSE.
  if ((isset($_POST['token']) ? !drupal_valid_token($_POST['token']) : TRUE) || $node->type !== 'ol_todo' || !isset($_POST['new_list'])) {
    drupal_json_output(FALSE);
    drupal_exit();
  }

  // Get node wrapper for easy access.
  $node_wrapper = entity_metadata_wrapper('node', $node);

  // Get the list id for the new item.
  $node_list_id = (int) check_plain($_POST['new_list']);

  // Set new list.
  $node_wrapper->field_todo_list_reference->set($node_list_id);

  $node_wrapper->save();

  // Return TRUE;.
  drupal_json_output(TRUE);
  drupal_exit();
}

/**
 * Function for updating node weights.
 *
 * @throws \Exception
 */
function _openlucius_core_node_update_weights() {

  // Check if there's a valid token.
  if ((isset($_POST['token']) ? !drupal_valid_token($_POST['token']) : TRUE) || !isset($_POST['order'])) {
    drupal_json_output(FALSE);
    drupal_exit();
  }

  // The sent order is a list of joined node id's.
  $order = explode(',', check_plain($_POST['order']));

  // Update each node id using the key as weight.
  foreach ($order as $weight => $nid) {

    // Load the node id.
    $node = node_load($nid);

    // Check if the user may edit this node.
    if (node_access('update', $node)) {

      // Check if we have a node type.
      if (!empty($node->type)) {

        // Switch on node type as certain types may use their own fields.
        switch ($node->type) {

          // Todo is currently using it's own weight field.
          case 'ol_todo':
            $node->field_todo_weight[LANGUAGE_NONE][0]['value'] = $weight;
            break;

          default:
            // Check if this node is using the default shared weight field.
            if (isset($node->field_shared_weight)) {
              $node->field_shared_weight[LANGUAGE_NONE][0]['value'] = $weight;
            }
            // If this node is not using the core fields allow other modules
            // to influence the weight.
            else {
              drupal_alter('openlucius_core_node_update_weight', $node, $weight);
            }
            break;
        }

        // Save the updated node.
        node_save($node);
      }
    }
  }

  // Return TRUE to signal success.
  drupal_json_output(TRUE);
  drupal_exit();
}

/**
 * Filter callback for the OpenLucius links.
 *
 * @param string $text
 *   The text to be filtered.
 *
 * @return string
 *   The filtered text.
 */
function openlucius_core_filter($text) {

  // Preg match on the text to get the links.
  preg_match_all('/<a(.*?)>(.*?)<\/a>/', $text, $matches);

  // Extract the links.
  if (isset($matches[2]) && !empty($matches[2])) {

    // Loop through the links.
    foreach ($matches[2] as $i => $full_link) {

      // Only apply to internal links.
      if (stristr($full_link, $_SERVER['HTTP_HOST'])) {

        // Assign the absolute link and the complete link.
        $link_path = $matches[0][$i];

        // Preg match on the links to get the node id.
        preg_match('!node\/(\d+)!', $full_link, $number);

        // Preg match any fragments.
        preg_match('!#(.+)!', $full_link, $fragment);

        // Check if the node id is set.
        if (isset($number[1])) {

          // Skip 'sla' links.
          if (stripos($full_link, $number[1] . '/time/sla') === FALSE) {

            // Create a new link with the replace info.
            if (isset($fragment[1])) {
              $new_link = _openlucius_core_replace_link($number[1], $fragment[1]);
            }
            else {
              $new_link = _openlucius_core_replace_link($number[1]);
            }

            // Replace the links.
            $text = str_replace($link_path, $new_link, $text);
          }
        }
      }
    }
  }

  // Return the new html.
  return $text;
}

/**
 * Callback function for replacing the links inside a comment.
 *
 * @param int $nid
 *   The node id to get the information for.
 * @param mixed $fragment
 *   A fragment to be applied to the link.
 *
 * @return mixed
 *   Returns the link with additional information.
 */
function _openlucius_core_replace_link($nid, $fragment = NULL) {

  // TODO replace query by node load.
  // Get the node title.
  $query = db_select('node', 'n')
    ->fields('n', array('title', 'type'))
    ->fields('f', array('field_todo_label_tid'))
    ->fields('p', array('name'));

  // Join on the todolabel for status.
  $query->leftJoin('field_data_field_todo_label', 'f', 'n.nid = f.entity_id');

  // Join on the user reference to get user id.
  $query->leftjoin('field_data_field_todo_user_reference', 'u', 'n.nid = u.entity_id');

  // Join on the user table to get username.
  $query->leftjoin('users', 'p', 'u.field_todo_user_reference_uid = p.uid');

  // Add node id condition.
  $object = $query->condition('n.nid', $nid, '=')->execute()->fetchObject();

  // Check if we have a usable object.
  if (empty($object)) {
    return FALSE;
  }

  $options = array();
  if (!empty($fragment)) {
    $options['fragment'] = $fragment;
  }

  // Add the link to the html.
  $html = l($object->title, 'node/' . $nid, $options);

  // Append status and user for todo's.
  if ($object->type == 'ol_todo') {

    // Do a taxonomy load to get the status as string.
    $status = taxonomy_term_load($object->field_todo_label_tid)->name;

    // Add the status to the html.
    $html .= '<span class="filter-info"> [' . $status;

    // Check if there is an assignee, if so add it, otherwise close brackets.
    $html .= $object->name ? ' | ' . $object->name . ']' : ']';

    $html .= '</span>';
  }

  // Return the html.
  return $html;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function openlucius_core_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  global $user;

  // Get the menu-item and menu-object.
  $object = isset($router_item['page_arguments'][0]) ? $router_item['page_arguments'][0] : '';

  // Check if node type is of ol_group or ol-todo-list if so add archive link.
  if (!empty($object->type) && in_array($object->type, array(
      'ol_group',
      'ol_todo_list',
    )) && !empty($data['tabs'][0])) {

    $data['tabs'][0]['count']++;
    $data['tabs'][0]['output'][] = array(
      '#theme' => 'menu_local_task',
      '#link'  => array(
        'path'              => 'node/%node/archive',
        'title'             => t('Archive'),
        'href'              => 'node/' . $object->nid . '/archive',
        'localized_options' => array(
          'attributes' => array(),
        ),
      ),
    );
  }

  if (isset($router_item['tab_root_href']) && $router_item['tab_root_href'] == 'admin/config/openlucius' && !empty($data['tabs'][0])) {
    $data['tabs'][0]['count']++;
    $data['tabs'][0]['output'][] = array(
      '#theme' => 'menu_local_task',
      '#link'  => array(
        'path'              => 'admin/content',
        'title'             => t('Content'),
        'href'              => 'admin/content',
        'localized_options' => array(
          'attributes' => array(),
        ),
      ),
    );
  }

  // Check if the user is allowed to move nodes.
  if (user_access('move nodes')) {
    $can_move = TRUE;

    // Check if the content type is allowed to be moved.
    if (!empty($object->type) && in_array($object->type, openlucius_core_get_content_types_with_move_option())) {
      // Check the path.
      if (isset($router_item['path']) && $router_item['path'] != 'node/%node/move') {

        // Openlucius Authenticated users can only move their own nodes.
        if (in_array('openlucius authenticated user', $user->roles) && $object->uid !== $user->uid) {
          $can_move = FALSE;
        }

        // Check if the user can move.
        if ($can_move && !empty($data['tabs'][0])) {
          $data['tabs'][0]['count']++;
          $data['tabs'][0]['output'][] = array(
            '#theme' => 'menu_local_task',
            '#link'  => array(
              'path'              => 'node/%node/move',
              'title'             => t('Move'),
              'href'              => 'node/' . $object->nid . '/move',
              'localized_options' => array(
                'attributes' => array(),
              ),
            ),
          );
        }
      }
    }
  }

  // Archive content.
  if (!empty($data['tabs'][0]['output'])) {
    foreach ($data['tabs'][0]['output'] as $i => $task) {
      if (!empty($task['#link']['path']) && $task['#link']['path'] == 'node/%node/archive') {
        $node = (!empty($object->nid) ? node_load($object->nid) : 0);
        if (!node_access('update', $node)) {
          unset($data['tabs'][0]['output'][$i]);
          $data['tabs'][0]['count']--;
        }
      }
    }
  }

  // Check the path.
  if (isset($router_item['path']) && $router_item['path'] != 'node/%node/trash') {

    // Check if we have the properties we need to check for.
    if (property_exists($object, 'nid') && property_exists($object, 'type')) {

      // Check if the user can move.
      if (node_access('update', $object->nid) && !empty($data['tabs'][0]) && !in_array($object->type, array(
          'ol_todo_list',
          'ol_group',
        ))) {
        $data['tabs'][0]['count']++;
        $data['tabs'][0]['output'][] = array(
          '#theme' => 'menu_local_task',
          '#link'  => array(
            'path'              => 'node/%node/trash',
            'title'             => t('Place in trashcan'),
            'href'              => 'node/' . $object->nid . '/trash',
            'localized_options' => array(
              'query'      => array(
                'redirect' => isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] : 'node/' . $object->nid,
              ),
              'attributes' => array(),
            ),
          ),
        );
      }
    }
  }
}

/**
 * Implements hook_openlucius_node_detail_local_tasks_alter().
 */
function openlucius_core_openlucius_node_detail_local_tasks_alter(&$local_tasks) {
  // Check if we are on a node.
  $object = menu_get_object();
  if (!empty($object)) {

    // Loop through tasks.
    foreach ($local_tasks as $key => $local_task) {

      // Remove all but the timer.
      if (!stripos($local_task['#link']['href'], '/start-timer')) {
        unset($local_tasks[$key]);
      }
    }
  }
}

/**
 * Implements hook_preprocess_comment().
 */
function openlucius_core_preprocess_comment(&$variables) {

  // Check for node type of the comment.
  if (isset($variables['node']->type) && $variables['node']->type == 'ol_todo') {

    // Get the comment id.
    $cid = $variables['comment']->cid;

    // Get the breakdown button.
    $button_values = openlucius_core_get_breakdown_button($cid, 'comment', TRUE);
    if (!empty($button_values) && !empty($variables['content']['links']['comment']['#links'])) {

      $variables['content']['links']['comment']['#links']['breakdown'] = array(
        'title'      => '<span class="glyphicon glyphicon-plus"></span><span class="glyphicon glyphicon-check"></span>',
        'href'       => '',
        'html'       => TRUE,
        'attributes' => $button_values,
      );
    }

    // Get the referenced items html.
    $list = openlucius_core_get_referenced_items($cid, 'comment');
    $variables['references_list'] = !empty($list) ? $list : '';
  }

  // Fetch user.
  $author = user_load($variables['comment']->uid);

  // Fetch picture.
  $picture = openlucius_core_fetch_user_image($author, '65x65');

  // Build link to user.
  $variables['avatar'] = l($picture, 'user/' . $author->uid, array('html' => TRUE));

  // Add username to the list of variables.
  $name = !empty($author->realname) ? check_plain($author->realname) : $author->name;
  $variables['username'] = l(t('@name', array('@name' => $name)), 'user/' . $author->uid, array('attributes' => array('class' => array('name'))));

  // Add timestamp.
  $variables['timestamp'] = format_interval(($_SERVER['REQUEST_TIME'] - $variables['comment']->changed), 1);

  // Add border for frontpage items.
  if (drupal_is_front_page()) {
    openlucius_stream_item_border($variables);

    // If show new badge is enabled and we have a teaser view.
    if (variable_get('openlucius_core_show_new_badge', 0)) {
      $is_new = FALSE;

      // Check if we have a comment id.
      if (!empty($variables['comment']->cid)) {

        // Check if the node has been seen.
        $is_new = openlucius_core_item_has_been_seen($variables['comment']->cid, '', 'comment');
      }

      // Add glyphicon if new for this user.
      if ($is_new) {
        $variables['seen'] = '<div class="status"><i class="glyphicon glyphicon-certificate"></i> ' . t('new') . '</div>';
      }
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function openlucius_core_preprocess_node(&$variables) {

  // Check for node type.
  if (isset($variables['type']) && $variables['type'] == 'ol_todo') {

    // Get the node id.
    $nid = $variables['node']->nid;

    // Get the breakdown button.
    $button = openlucius_core_get_breakdown_button($nid, 'node');
    $variables['breakdown_todo'] = !empty($button) ? $button : '';

    // Get the referenced items html.
    $list = openlucius_core_get_referenced_items($nid, 'node');
    $variables['references_list'] = !empty($list) ? $list : '';
  }

  // Exclude types.
  $excludes = array('ol_text_document', 'ol_group', 'ol_todo_list');

  // Allow other modules to change the node types to be processed.
  drupal_alter('openlucius_core_node_preprocess_excludes', $excludes);

  // Add node requirements.
  if (isset($variables['type']) && !in_array($variables['type'], $excludes)) {
    $variables['classes_array'][] = 'activity-item-wrapper';
    $nid = $variables['nid'];
    $cid = $variables['cid'];

    // Hide title on teaser.
    if (!$variables['teaser']) {
      $variables['title'] = '';
    }

    // Add border color if possible.
    openlucius_stream_item_border($variables);

    // Load the author.
    $author = user_load($variables['uid']);

    // Fetch picture.
    $picture = openlucius_core_fetch_user_image($author, '65x65');

    // Build link to user.
    $variables['avatar'] = l($picture, 'user/' . $author->uid, array('html' => TRUE));

    // Build date format.
    $variables['time_ago'] = format_interval(($_SERVER['REQUEST_TIME'] - $variables['created']), 1);

    // For teasers build the read more.
    if ($variables['teaser'] && !empty($variables['content']['body'][0]['#markup'])) {
      openlucius_core_render_read_more($variables['content']['body'][0]['#markup'], $variables);
    }

    // Add username to the list of variables.
    $name = !empty($author->realname) ? check_plain($author->realname) : $author->name;
    $variables['username'] = l(t('@name', array('@name' => $name)), 'user/' . $author->uid);

    // If this is a node which we may view add the detail link.
    if ($variables['teaser'] && node_access('view', $variables['type'])) {
      $variables['node_link'] = url('node/' . $nid);
    }

    // Check if the group reference is set.
    if (!empty($variables['field_shared_group_reference']) && $variables['teaser']) {
      $group_nid = $variables['field_shared_group_reference'][LANGUAGE_NONE][0]['nid'];
      $title = openlucius_core_fetch_node_title($group_nid);
      $variables['group_link'] = l(t('@name', array('@name' => $title)), 'app-redirect/' . $group_nid);
    }

    // Add comment link for teasers if there's a detail page.
    if ($variables['teaser'] && node_access('view', $nid)) {
      $comments = $variables['comment_count'] > 0;
      $comment_counter = $comments ? '(' . $variables['comment_count'] . ')' : '';
      $comment_link = $comments ? url('node/' . $variables['nid']) : url('node/' . $nid);

      // Basic options.
      $options = array(
        'attributes' => array(
          'class' => 'comment-button',
        ),
      );

      // Append fragment if we have comments.
      if ($comments) {
        $options['fragment'] = 'comment-' . $variables['cid'];
      }

      $variables['comment_link'] = l(t('Comment @comments', array('@comments' => $comment_counter)), $comment_link, $options);
    }

    // Add show more button if required.
    $variables['show_more_comments'] = format_plural($variables['comment_count'], 'View 1 more comment', 'View @count more comments');

    // If show new badge is enabled and we have a teaser view.
    if (variable_get('openlucius_core_show_new_badge', 0) && $variables['teaser']) {

      // Check if we have a comment id.
      if (!empty($cid)) {

        // Check if the node has been seen.
        $is_new = openlucius_core_item_has_been_seen($cid, '', 'comment');
      }

      // Check if the node has been seen.
      else {
        $is_new = openlucius_core_item_has_been_seen($nid, $variables['type'], 'node');
      }

      // Add glyphicon if new for this user.
      if ($is_new) {
        $variables['seen'] = '<div class="status"><i class="glyphicon glyphicon-certificate"></i> ' . t('new') . '</div>';
      }
    }
  }
}

/**
 * Implements hook_preprocess_region().
 */
function openlucius_core_preprocess_region(&$variables) {

  // Get the menu item.
  $menu_item = menu_get_item();

  // Check for the content region.
  if ($variables['region'] == 'content') {

    // Check for the node edit page callback.
    if (isset($menu_item['page_callback']) && $menu_item['page_callback'] != 'node_page_edit') {

      // Set the excludes array of content types.
      $excludes = array('ol_text_document', 'ol_group', 'ol_todo_list');

      // Get the menu object, the node.
      $node = menu_get_object();

      // Allow other modules to change the node types to be processed.
      drupal_alter('openlucius_core_node_preprocess_excludes', $excludes);

      // Check if the node type is there and it's not in the excludes array.
      if (!empty($node->type) && !in_array($node->type, $excludes)) {

        // TODO find other way to prevent well from being rendered for nodes.
        $variables['ignore_classes'] = TRUE;
      }
    }

    // Check for the group documents.
    if (!empty($menu_item['path']) && $menu_item['path'] == 'group-textdocuments') {

      // TODO find other way to prevent well from being rendered for nodes.
      $variables['ignore_classes'] = TRUE;
    }

    // Check for the node add page callback.
    if ($menu_item['page_callback'] == 'node_add') {

      // Check for the node add text docs.
      if (!empty($menu_item['path']) && $menu_item['path'] == 'node/add/ol-text-document') {

        // TODO find other way to prevent well from being rendered for nodes.
        $variables['ignore_classes'] = TRUE;
      }
    }
  }
}

/**
 * Function to generate breakdown button.
 *
 * @param int $id
 *   The node or comment id.
 * @param string $type
 *   The type being node or comment.
 * @param bool $raw
 *   Whether the raw value are required or the rendered html.
 *
 * @return bool|string
 *   Returns the button or FALSE.
 */
function openlucius_core_get_breakdown_button($id, $type, $raw = FALSE) {

  // Check the permission.
  if (user_access('access todo breakdown')) {

    // Generate token.
    $token = drupal_get_token();

    // The current node id.
    $gid = openlucius_core_get_active_group();

    // Send a translatable success message.
    $success_message = t('A new task has been created') . '!';

    if (!$raw) {
      // Create the anchor tag for the breakdown.
      return '<button class="todo-breakdown" data-success="' . $success_message . '" data-token="' . $token . '" data-type="' . $type . '" data-gid="' . $gid . '" data-id="' . $id . '"><span class="glyphicon glyphicon-plus"></span><span class="glyphicon glyphicon-check"></span></button>';
    }
    else {
      return array(
        'class'        => array(
          'todo-breakdown',
        ),
        'data-success' => $success_message,
        'data-token'   => $token,
        'data-type'    => $type,
        'data-gid'     => $gid,
        'data-id'      => $id,
      );
    }
  }

  // Return false if no access.
  return FALSE;
}

/**
 * Function for getting the html for the referenced items.
 *
 * @param int $id
 *   The id to get the references for.
 * @param string $type
 *   The type entity to fetch references for.
 *
 * @return bool|string
 *   Returns the html for the referenced items or FALSE.
 */
function openlucius_core_get_referenced_items($id, $type) {

  $output = '';

  // Check if the type is a node.
  if ($type == 'node') {
    $back_links = openlucius_core_node_reference_get($id, 'node');
    $related_node = openlucius_core_node_reference_get($id, 'node_reference');
    $related_comment = openlucius_core_node_reference_get($id, 'comment_reference');

    // Check if this node has back_links.
    if (!empty($back_links)) {
      $serialized_references = $back_links;
      $serialized_related = !empty($related_node) ? $related_node : $related_comment;
    }
    // Check if this node has a related node.
    elseif (!empty($related_node)) {
      $serialized_references = $related_node;
    }
    // Check if this node has a related comment.
    elseif (!empty($related_comment)) {
      $serialized_references = $related_comment;
    }
  }
  elseif ($type == 'comment') {
    $serialized_related = openlucius_core_node_reference_get($id, 'comment');
  }

  // First go for the references.
  if (!empty($serialized_references)) {

    // Get the type of reference.
    $type = array_keys($serialized_references);

    if (!empty($type[0])) {
      $type = $type[0];

      // Check if there are node references.
      if (!empty($serialized_references[$type])) {
        $output .= openlucius_core_build_referenced_items_list($serialized_references[$type], $type);
      }
    }
  }

  // Now fetch the related items.
  if (!empty($serialized_related)) {

    // Get the type of reference.
    $type = array_keys($serialized_related);
    if (!empty($type[0])) {
      $type = $type[0];

      // Check if there are node references.
      if (!empty($serialized_related[$type])) {
        $output .= openlucius_core_build_referenced_items_list($serialized_related[$type], $type);
      }
    }
  }

  return $output;
}

/**
 * Function to generate references.
 *
 * @param mixed $references
 *   The serialized references.
 * @param string $type
 *   The type of reference.
 *
 * @return string
 *   Returns a string of html.
 */
function openlucius_core_build_referenced_items_list($references, $type) {

  $output = '';

  // Unserialize them references.
  $references = unserialize($references);

  // Check if there are array items.
  if (isset($references) && !empty($references)) {

    // Initialize items array.
    $items = array();

    // Loop through the related items.
    foreach ($references as $id) {

      switch ($type) {
        case 'node':
        case 'node_reference':
        case 'comment':
          $items[] = _openlucius_core_replace_link($id);
          break;

        case 'comment_reference':
          $comment = comment_load($id);
          $items[] = _openlucius_core_replace_link($comment->nid, 'comment-' . $id);
          break;
      }
    }
  }

  // Create a list of the referenced items.
  $item_list = theme('item_list', array(
    'items'      => $items,
    'title'      => NULL,
    'type'       => ($type == 'node_reference' || $type == 'comment_reference') ? 'ul' : 'ol',
    'attributes' => array(),
  ));

  // Check if the related items is set and not empty.
  if (!empty($item_list)) {

    // Create a list for 'Referenced from'.
    if ($type == 'node_reference' || $type == 'comment_reference') {
      $output .= '<div class="referenced-from-wrapper"><h3>' . t('Referenced from') . ':</h3>' . $item_list . '</div>';
    }

    if ($type == 'node' || $type == 'comment') {
      $output .= '<div class="related-wrapper"><h3>' . t('Related') . ':</h3>' . $item_list . '</div>';
    }
  }

  // Return the output.
  return $output;
}

/**
 * Function for breaking down todos.
 *
 * @param string $type
 *   The type data to be to be processed.
 * @param \stdClass $node
 *   The node object to be used.
 */
function openlucius_core_breakdown_todo($type, \stdClass $node) {

  // The logged in user.
  global $user;

  // Check for post values and check if the token is a valid token.
  if (isset($_POST['text']) && isset($_POST['token']) && drupal_valid_token($_POST['token'])) {

    // Sanitize the text sent by javascript.
    $todo_text = check_plain($_POST['text']);

    // Split the text in words.
    $todo_text_pieces = explode(" ", $todo_text);

    // Get the first 3 words for the title.
    $todo_title = implode(" ", array_splice($todo_text_pieces, 0, 3));

    // Instantiate a new node object.
    $todo = new StdClass();

    // Add the type and language.
    $todo->type = 'ol_todo';
    $todo->language = LANGUAGE_NONE;

    // Prepare the node object for editing.
    node_object_prepare($todo);

    // Add the required fields.
    $todo->uid = $user->uid;
    $todo->title = $todo_title;
    $todo->field_shared_group_reference[LANGUAGE_NONE][0]['nid'] = $node->field_shared_group_reference[LANGUAGE_NONE][0]['nid'];
    $todo->field_todo_list_reference[LANGUAGE_NONE][0]['nid'] = $node->field_todo_list_reference[LANGUAGE_NONE][0]['nid'];;
    $todo->body[LANGUAGE_NONE][0]['value'] = $todo_text;

    // Set the status to new.
    $todo->field_todo_label[LANGUAGE_NONE][0]['tid'] = variable_get('todo_openstatus_tid');

    // Save the node.
    node_save($todo);

    if ($type == 'node') {
      // Register a node reference.
      openlucius_core_register_node_references('node', $node->nid, $todo->nid);
    }
    elseif ($type == 'comment') {
      // Use menu get item obtaining the comment id.
      $menu = menu_get_item();

      // Register a node reference.
      openlucius_core_register_node_references('comment', $menu['original_map'][1], $todo->nid);
    }
  }
  else {
    drupal_json_output(array(
      'type'  => 'error',
      'value' => t('An error has occurred'),
    ));
    drupal_exit();
  }
}

/**
 * Wildcard loader for comment parent.
 *
 * @param int $cid
 *   The comment cid to be loaded.
 *
 * @return bool|mixed
 *   Returns either a node object or FALSE.
 */
function openlucius_core_comment_parent_load($cid) {
  // Load the comment.
  $comment = comment_load($cid);

  // Return the parent node of the comment.
  return !empty($comment) ? node_load($comment->nid) : FALSE;
}

/**
 * Function to register a node / comment reference.
 *
 * @param string $type
 *   The type, node or comment.
 * @param int $id
 *   The base id.
 * @param int $reference_nid
 *   The node reference id.
 */
function openlucius_core_register_node_references($type, $id, $reference_nid) {

  // Check the table for the node id.
  $exists = db_select('openlucius_core_node_references', 'n')
    ->fields('n', array('rid', 'node_references'))
    ->condition('rid', $id, '=')
    ->condition('type', $type, '=')
    ->execute()
    ->fetchObject();

  // Check if there is a reference.
  if (!empty($exists)) {

    // Unserialize the reference.
    $references = unserialize($exists->node_references);

    // Push the new reference to the array of references.
    $references[] = $reference_nid;

    // Serialize the new array of references.
    $new_references = serialize($references);

    // Update the node reference.
    openlucius_core_node_reference_update($exists->rid, $new_references, $type);
    openlucius_core_node_reference_insert_original($reference_nid, $type, serialize(array($id)));
  }
  else {
    // Create a new node reference entry with node id and reference node id.
    openlucius_core_node_reference_insert($id, $type, serialize(array($reference_nid)));
    openlucius_core_node_reference_insert_original($reference_nid, $type, serialize(array($id)));
  }
}

/**
 * Function for inserting a node reference into the database.
 *
 * @param int $id
 *   The id to insert.
 * @param string $type
 *   The type to insert.
 * @param array $reference
 *   The serialized references to insert.
 */
function openlucius_core_node_reference_insert($id, $type, $reference) {

  // Create a new node reference entry with node id and reference node id.
  db_insert('openlucius_core_node_references')->fields(array(
    'rid'             => $id,
    'type'            => $type,
    'node_references' => $reference,
  ))->execute();
}

/**
 * Function for inserting a node reference into the database.
 *
 * @param int $id
 *   The id to insert.
 * @param string $type
 *   The type to insert.
 * @param array $reference
 *   The serialized references to insert.
 */
function openlucius_core_node_reference_insert_original($id, $type, $reference) {

  // Check the type.
  $type = $type == 'node' ? 'node_reference' : 'comment_reference';

  // Create a new node reference entry with node id and reference node id.
  db_insert('openlucius_core_node_references')->fields(array(
    'rid'             => $id,
    'type'            => $type,
    'node_references' => $reference,
  ))->execute();
}

/**
 * Function for update a node reference in the database.
 *
 * @param int $id
 *   The id.
 * @param array $reference
 *   The references.
 * @param string $type
 *   The type to be updated.
 */
function openlucius_core_node_reference_update($id, $reference, $type) {
  // Update the database with the new references.
  db_update('openlucius_core_node_references')
    ->fields(array('node_references' => $reference))
    ->condition('rid', $id, '=')
    ->condition('type', $type, '=')
    ->execute();
}

/**
 * Function to get all the references to the current node.
 *
 * @param int $id
 *   The node to get the references for.
 * @param string $type
 *   The type of reference to get.
 *
 * @return string|bool
 *   Returns a serialized string of node references or FALSE.
 */
function openlucius_core_node_reference_get($id, $type) {

  // Query the database to get the references to this node.
  $references = db_select('openlucius_core_node_references', 'n')
    ->fields('n', array('type', 'node_references'))
    ->condition('rid', $id, '=')
    ->condition('type', $type, '=')
    ->execute()
    ->fetchAllKeyed(0, 1);

  // Return if set otherwise false.
  return !empty($references) ? $references : FALSE;
}

/**
 * Function to insert an item after a certain key.
 *
 * @param array $haystack
 *   The array to be altered.
 * @param string $needle
 *   The key to be searched.
 * @param array $item
 *   The item array ('key' => value) to be inserted.
 *
 * @return array
 *   Returns either the altered array or the original
 *   if the needle is not found.
 */
function openlucius_core_array_insert_after(array &$haystack, $needle, array $item) {
  $i = 0;
  foreach ($haystack as $key => $value) {
    $i++;
    if ($key == $needle) {
      return array_slice($haystack, 0, $i, TRUE) + $item + array_slice($haystack, $i, count($haystack) - 1, TRUE);
    }
  }
  return $haystack;
}

/**
 * Implements hook_comment_view_alter().
 */
function openlucius_core_comment_view_alter(&$build) {
  // Check if the todo list has been changed.
  if (isset($build['comment_alter']['#changed_fields']['field_todo_list_reference'])) {

    // Check the old field.
    if (isset($build['comment_alter']['#changed_fields']['field_todo_list_reference'][0]['old'][0])) {

      // Perform a strip tags and decode entities to place the html back
      // correctly.
      $stripped = strip_tags($build['comment_alter']['#changed_fields']['field_todo_list_reference'][0]['old'][0]);
      $decoded = decode_entities($stripped);

      // Change the link to the newly created one.
      $build['comment_alter']['#changed_fields']['field_todo_list_reference'][0]['old'][0] = $decoded;
    }
    // Check the new field.
    if (isset($build['comment_alter']['#changed_fields']['field_todo_list_reference'][0]['new'][0])) {

      // Perform a strip tags and decode entities to place the html back.
      $stripped = strip_tags($build['comment_alter']['#changed_fields']['field_todo_list_reference'][0]['new'][0]);
      $decoded = decode_entities($stripped);

      // Change the link to the newly created one.
      $build['comment_alter']['#changed_fields']['field_todo_list_reference'][0]['new'][0] = $decoded;
    }
  }
}

/**
 * Function to obtain the node type.
 *
 * @param int $nid
 *   The node id.
 *
 * @return mixed
 *   The node type or FALSE if it could not be found.
 */
function openlucius_core_get_type_by_nid($nid) {
  return db_select('node', 'n')
    ->fields('n', array('type'))
    ->condition('nid', $nid, '=')
    ->execute()
    ->fetchField();
}

/**
 * Openlucius navbar constructor.
 *
 * @throws \Exception
 */
function openlucius_core_navbar_content() {
  $variables = array(
    'left'  => array(
      // Append the toggle as first item.
      array(
        'content'           => '<span class="sr-only">' . t('Toggle navigation') . '</span><span class="icon-bar"></span><span class="icon-bar"></span><span class="icon-bar"></span>',
        'attributes'        => array(
          'class' => array('hidden-md hidden-lg'),
        ),
        'button_attributes' => array(
          'class'       => array('navbar-toggle'),
          'data-toggle' => array('layout'),
          'data-action' => array('sidebar_toggle'),
        ),
        'is_button'         => TRUE,
      ),
    ),
    'right' => array(),
  );

  // Build logo.
  $logo = array('path' => theme_get_setting('logo'), 'alt' => t('Home'));
  $logo_image = theme('image', $logo);

  // Fetch the site_name.
  $site_name = variable_get('site_name');

  // Append the logo to the variables.
  $variables['left'][] = array(
    'content'    => l($logo_image . ' ' . $site_name, '<front>', array(
      'html'       => TRUE,
      'attributes' => array(
        'class' => array(
          'logo navbar-btn',
          'pull-left',
          'navbar-brand',
          'hidden-xs',
          'hidden-sm',
        ),
      ),
    )),
  );

  // Append the home button to the variables for smaller resolutions.
  $variables['left'][] = array(
    'content'    => l('<span class="glyphicon glyphicon-home"></span>', '<front>', array(
      'html'       => TRUE,
      'attributes' => array(
        'class' => array(
          'home-btn navbar-btn',
          'pull-left',
          'navbar-brand',
          'hidden-lg',
          'hidden-md',
        ),
      ),
    )),
  );

  // Append Groups.
  $group_selector = openlucius_core_get_group_selector();
  $variables['left'][] = array(
    'content'    => $group_selector,
    'attributes' => array(
      'class' => array('hidden-xs', 'hidden-sm', 'no-absolute'),
    ),
  );

  // Append main menu items.
  $menu_items = menu_tree_all_data('main-menu');
  $menu_output = menu_tree_output($menu_items);
  foreach ($menu_output as $key => $item) {

    // Check if numeric, the numeric items are links.
    if (is_numeric($key)) {

      // Hide on lower resolutions.
      $item['#attributes']['class'][] = 'hidden-sm';
      $item['#attributes']['class'][] = 'hidden-xs';

      // Use default theme rendering for the links.
      $rendered = theme('menu_link', ($item));
      $variables['left'][] = array(
        'content'    => $rendered,
        'no_wrapper' => TRUE,
      );
    }
  }

  // Append Search toggle.
  $variables['left'][] = array(
    'content'           => '<span class="glyphicon glyphicon-search" aria-hidden="true"></span>',
    'attributes'        => array(
      'class' => array('visible-xs'),
    ),
    'is_button'         => TRUE,
    'button_attributes' => array(
      'class'       => array('btn-custom'),
      'data-toggle' => array('class-toggle'),
      'data-target' => array('.js-header-search'),
      'data-class'  => array('header-search-xs-visible'),
    ),
  );

  // Append the search block.
  $search_block = module_invoke('search', 'block_view', 'form');
  $search_render = render($search_block['content']);
  $variables['left'][] = array(
    'content'    => $search_render,
    'attributes' => array(
      'class' => array('js-header-search header-search'),
    ),
  );

  // Append the Secondary links.
  $menu_items = menu_tree_all_data('user-menu');
  $menu_output = menu_tree_output($menu_items);

  foreach ($menu_output as $key => $item) {

    // Check if numeric, the numeric items are links.
    if (is_numeric($key)) {

      // Use default theme rendering for the links.
      $rendered = theme('menu_link', $item);
      $variables['right'][] = array(
        'content'    => $rendered,
        'no_wrapper' => TRUE,
      );
    }
  }

  // Append toggle for right sidebar.
  $variables['right'][] = array(
    'content'           => '<span class="glyphicon glyphicon-chevron-left"></span>',
    'attributes'        => array(
      'class' => array('hidden-md hidden-lg'),
    ),
    'button_attributes' => array(
      'class'       => array('navbar-toggle'),
      'data-toggle' => array('layout'),
      'data-action' => array('side_overlay_toggle'),
    ),
    'is_button'         => TRUE,
  );

  // Allow other modules to alter the variables.
  drupal_alter('openlucius_core_navbar_content', $variables);

  // Loop through and render items.
  foreach ($variables as &$section) {

    // Loop through and render each item.
    foreach ($section as &$item) {

      // Check if the item has attributes.
      if (!empty($item['attributes'])) {

        // TODO figure out why attributes is filtered out.
        $item['item_attributes'] = drupal_attributes($item['attributes']);
      }

      // Check if the item has button attributes.
      if (!empty($item['button_attributes'])) {
        $item['button_attributes'] = drupal_attributes($item['button_attributes']);
      }
      $item = theme('openlucius_core_nav_item', $item);
    }

    // Implode items.
    $section = implode($section);
  }

  return theme('openlucius_core_nav', $variables);
}

/**
 * Openlucius navbar aside constructor.
 */
function openlucius_core_navbar_aside_content() {
  global $user;

  $variables = array();

  // Fetch logo and site_name.
  $logo = array('path' => theme_get_setting('logo'), 'alt' => t('Home'));
  $logo_image = theme('image', $logo);
  $site_name = variable_get('site_name');

  // Append the logo to the variables.
  $variables['logo'] = l($logo_image . $site_name, '<front>', array(
    'html'       => TRUE,
    'attributes' => array(
      'class' => array(
        'logo navbar-btn',
        'pull-left',
      ),
    ),
  ));

  // Check if the user is logged in.
  if (user_is_logged_in()) {

    // Append main menu items.
    $menu_items = menu_tree_all_data('main-menu');
    $menu_output = menu_tree_output($menu_items);

    foreach ($menu_output as $key => $item) {

      // Check if numeric, the numeric items are links.
      if (is_numeric($key)) {

        if (!empty($item['#below'])) {

          // Keep below as children for this item.
          $below = $item['#below'];

          // Unset for render.
          unset($item['#below']);

          // Add attributes for unfolding the submenu.
          $item['#localized_options']['attributes']['class'][] = 'nav-submenu';
          $item['#localized_options']['attributes']['data-toggle'][] = 'nav-submenu';

          // Empty href just in case.
          $item['#href'] = NULL;
          $item['#localized_options']['fragment'] = FALSE;
          $item['#localized_options']['external'] = TRUE;

          // Use default theme rendering for the links.
          $rendered = theme('menu_link', $item);

          // Render children.
          $html = '';
          foreach ($below as $sub_key => $sub_item) {
            if (is_numeric($sub_key)) {

              // Use default theme rendering for the links.
              $sub_rendered = theme('menu_link', $sub_item);
              $html .= '<li>' . strip_tags($sub_rendered, '<a>') . '</li>';
            }
          }
          $variables['items'][] = array(
            'content'  => strip_tags($rendered, '<a>'),
            'children' => $html,
          );
        }
        else {
          // Use default theme rendering for the links.
          $rendered = theme('menu_link', ($item));
          $variables['items'][] = array('content' => strip_tags($rendered, '<a>'));
        }
      }

      // Calendar & Everyone.
      if (isset($item['#href']) == 'calendar') {
        $item['#title'] = t('Calendar');
        $item['#localized_options']['attributes']['class'][] = 'nav-submenu';
      }

      if (isset($item['#href']) && $item['#href'] == 'everyone') {
        $item['#title'] = t('Everyone');
        $item['#localized_options']['attributes']['class'][] = 'nav-submenu';
      }
    }

    // Append the Secondary links.
    $menu_items = menu_tree_all_data('user-menu');
    $menu_output = menu_tree_output($menu_items);

    foreach ($menu_output as $key => $item) {

      // Check if numeric, the numeric items are links.
      if (is_numeric($key)) {

        // Hide all users link on lower resolutions.
        if ($item['#href'] == 'user' || $item['#href'] == 'tasks') {
          continue;
        }

        // Use default theme rendering for the links.
        $rendered = theme('menu_link', $item);
        $variables['items'][] = array('content' => strip_tags($rendered, '<a>'));
      }
    }

    // Append user groups.
    $user_groups = openlucius_core_fetch_user_groups($user->uid, TRUE);

    // Order alphabetically.
    asort($user_groups);

    $html = '';

    // Create group links.
    foreach ($user_groups as $gid => $group) {
      if (!empty($group)) {
        $html .= '<li>' . l($group, 'node/' . $gid) . '</li>';
      }
    }

    // Append groups.
    $variables['items'][] = array(
      'content'         => l(variable_get('openlucius_core_group_dropdown_title', t('Groups')), NULL, array(
        'attributes' => array(
          'class'       => array('nav-submenu'),
          'data-toggle' => 'nav-submenu',
        ),
        'fragment'   => FALSE,
        'external'   => TRUE,
      )),
      'children'        => $html,
      'item_attributes' => array(
        'class' => array('open'),
      ),
    );

    // Allow other modules to modify the variables.
    drupal_alter('openlucius_core_navbar_aside_content', $variables);

    // Loop and theme each item.
    $html = '';
    foreach ($variables['items'] as &$item) {

      // Check if the item has attributes.
      if (isset($item['item_attributes'])) {
        $item['item_attributes'] = drupal_attributes($item['item_attributes']);
      }
      $html .= theme('openlucius_core_nav_left_sidebar_item', $item);
    }
    $variables['items'] = $html;
  }

  // Return themed sidebar.
  return theme('openlucius_core_nav_left_sidebar', $variables);
}

/**
 * Implements hook_preprocess_block().
 */
function openlucius_core_preprocess_block(&$vars) {

  // Get the menu item.
  $item = menu_get_item();

  /* Set shortcut variables. Hooray for less typing! */
  $block_id = $vars['block']->module . '-' . $vars['block']->delta;
  $classes = &$vars['classes_array'];

  // Change user dashboard block ids.
  if ($vars['block']->module == 'views' && $vars['block']->delta == 'dashboard_blocks-block') {
    $vars['block_html_id'] = drupal_html_id('user-info');
  }
  if ($vars['block']->module == 'views' && $vars['block']->delta == 'messages_in_a_group-block_2') {
    $vars['block_html_id'] = drupal_html_id('user-messages');
  }
  if ($vars['block']->module == 'openlucius_files' && $vars['block']->delta == 'ol_user_files') {
    $vars['block_html_id'] = drupal_html_id('user-files');
  }
  if ($vars['block']->module == 'openlucius_core' && $vars['block']->delta == 'use_as_app_info') {
    $vars['block_html_id'] = drupal_html_id('use-as-app');
  }
  if ($vars['block']->module == 'views' && $vars['block']->delta == '761e1b560a0820c9e32936c757e50fcd') {
    $vars['block_html_id'] = drupal_html_id('user-text-documents');
  }
  if ($vars['block']->module == 'openlucius_core' && $vars['block']->delta == 'ol_user_activity') {
    $vars['block_html_id'] = drupal_html_id('user_activity');
  }

  // Check the menu path for the user dashboard page.
  if (!empty($item['path']) && $item['path'] == 'user/dashboard') {
    if ($block_id == 'openlucius_core-ol_user_activity') {
      $classes[] = 'active';
    }
  }
  // Check for the system main on other pages.
  elseif ($block_id == 'system-main') {
    $classes[] = 'active';
  }

  // Only show diff inline block on mobile in the right sidebar.
  if ($block_id == 'diff-inline') {
    $classes[] = 'visible-xs';
  }
}

/**
 * Function to get unread comments for a node.
 *
 * @param int $nid
 *   The node to check.
 *
 * @return int
 *   Returns the amount of unread comments.
 */
function openlucius_core_get_unread_comment_count($nid) {
  global $user;

  $count = db_query("
    SELECT COUNT(c.cid) as num_comments
    FROM {node} n
    INNER JOIN {comment} c
    ON n.nid = c.nid
    LEFT JOIN {history} h
    ON h.nid = n.nid
    AND h.uid = :h_uid
    WHERE n.nid IN (:nids)
    AND c.changed > GREATEST(COALESCE(h.timestamp, :timestamp), :timestamp)
    AND c.status = :status
    GROUP BY n.nid", array(
      ':status'    => COMMENT_PUBLISHED,
      ':h_uid'     => $user->uid,
      ':nids'      => $nid,
      ':timestamp' => NODE_NEW_LIMIT,
    )
  )->fetchField();

  return !empty($count) && $count != 0 ? $count : 0;
}

/**
 * Function to get the signature of a specific user.
 *
 * @param int $uid
 *   The user id to get the signature from.
 *
 * @return string
 *   Returns the signature if found or an empty string.
 */
function openlucius_core_get_user_signature($uid) {

  // Query the user signature table.
  $signature = db_select('field_data_field_user_signature', 'f')
    ->fields('f', array('field_user_signature_value'))
    ->condition('f.entity_id ', $uid, '=')
    ->execute()
    ->fetchField();

  // Return the signature.
  return !empty($signature) ? check_markup($signature) : '';
}

/**
 * Implements hook_node_presave().
 */
function openlucius_core_node_presave($node) {
  global $user;

  // Check if the show signature checkbox is on.
  if (!empty($node->field_show_signature) && $node->field_show_signature == 1) {

    // Get the signature of the author of the comment.
    $signature = openlucius_core_get_user_signature($node->uid);

    // Check if the signature is not empty.
    if (!empty($signature)) {

      // Add the signature to the comment.
      $node->body[LANGUAGE_NONE][0]['value'] .= $signature;
    }
  }

  // Check if this node was created using the task modal.
  // As this one form is capable of creating either tasks or personal tasks.
  if (!empty($node->modalTask) && $node->personal_task == 1) {
    $node->type = 'ol_personal_todo';
    $node->field_todo_user_reference[LANGUAGE_NONE][0]['uid'] = $user->uid;

    // Unset field which are not in the personal todo type.
    foreach (
      array(
        'field_shared_group_reference',
        'field_shared_loopin_email',
        'field_shared_show_clients',
        'field_todo_list_reference',
        'field_todo_invoice_number',
      ) as $field
    ) {
      unset($node->{$field});
    }
  }
}

/**
 * Function to redirect to user edit screen.
 */
function openlucius_core_user_update_redirect() {
  global $user;
  drupal_goto('user/' . $user->uid . '/edit');
}

/**
 * Method to obtain a username using the uid.
 *
 * @param int $uid
 *   The user id for which a name should be fetched.
 *
 * @return mixed
 *   Returns either a string (the name) or FALSE when not found.
 */
function openlucius_core_fetch_user_name($uid) {
  if (!module_exists('realname')) {
    return db_query('SELECT name FROM {users} WHERE uid = :uid', array(':uid' => $uid))->fetchField();
  }
  else {
    return db_query("
        SELECT CASE
        WHEN LENGTH(r.realname) = 0
        OR r.realname IS NULL
        THEN u.name
        ELSE r.realname
        END AS name
        FROM {realname} r
        INNER JOIN {users} u
        ON r.uid = u.uid
        WHERE r.uid = :uid", array(':uid' => $uid))->fetchField();
  }
}

/**
 * Function to get content types with like button.
 */
function openlucius_core_get_content_types_with_like_button() {

  // The basic content types with like button.
  $content_types = array(
    'ol_event',
    'ol_message',
    'ol_text_document',
    'ol_todo',
  );

  // Allow other modules to override the content types with like button.
  drupal_alter('openlucius_core_content_types_with_like_button', $content_types);

  // Return.
  return $content_types;
}

/**
 * Function to check whether or not a node has been seen by a user.
 *
 * @param int $id
 *   The node id to check.
 * @param string $node_type
 *   The type to verify.
 * @param string $item_type
 *   The type being node or comment.
 *
 * @return bool Returns true or false.
 *   Returns true or false.
 */
function openlucius_core_item_has_been_seen($id, $node_type = '', $item_type = 'node') {

  global $user;

  if ($item_type == 'node') {

    // Check if the node type is empty.
    if (empty($node_type)) {
      // Get the node type from the id.
      $node_type = openlucius_core_fetch_node_type($id);
    }

    // Return true if it's a file folder. @todo, fix me.
    if (!empty($node_type) && $node_type == 'ol_file_folder') {
      return TRUE;
    }

    // Start at the node table.
    $node_query = db_select('node', 'n');

    // Select the node id.
    $node_query->fields('n', array('nid'));

    // Condition for the node id.
    $node_query->condition('n.nid', $id, '=');

    // Condition for the node new limit.
    $node_query->condition('n.changed', NODE_NEW_LIMIT, '>');

    // Execute the query and get the node id.
    $node_result = $node_query->execute()->fetchField();

    // If the node is older than the NODE_NEW_LIMIT, mark it as seen.
    if (empty($node_result)) {
      return TRUE;
    }
    else {

      // Check for the history table.
      $history_query = db_select('history', 'h');

      // Select the node id.
      $history_query->fields('h', array('nid'));

      // Condition for the node id to match.
      $history_query->condition('h.nid', $id, '=');

      // Condition for the user id to match.
      $history_query->condition('h.uid', $user->uid, '=');

      // Fetch the field, if it's there, the node has been seen.
      $history_result = $history_query->execute()->fetchField();

      // Return either true or false.
      return $history_result;
    }
  }
  // Check for comments.
  elseif ($item_type == 'comment') {

    $cid = $id;
    $nid = openlucius_core_comment_parent_load($id)->nid;

    // Get highest timestamp of when the node has been seen.
    $latest_seen = db_select('history', 'h')
      ->fields('h', array('timestamp'))
      ->condition('nid', $nid, '=')
      ->condition('uid', $user->uid, '=')
      ->orderBy('timestamp', 'desc')
      ->execute()
      ->fetchField();

    // Get the comment timestamp.
    $comment_timestamp = db_select('comment', 'c')
      ->fields('c', array('changed'))
      ->condition('cid', $cid, '=')
      ->execute()
      ->fetchField();

    // Check if timestamp is higher than the last time node node has been seen.
    if ($comment_timestamp < $latest_seen) {
      return TRUE;
    }

    // Return false by default.
    return FALSE;
  }

  // Return false by default.
  return FALSE;
}

/**
 * Function to get a node type from a node id.
 *
 * @param int $nid
 *   The node id to get the type from.
 *
 * @return bool
 *   Returns node type or false if no node id.
 */
function openlucius_core_fetch_node_type($nid) {
  if (!empty($nid)) {
    return db_select('node', 'n')
      ->fields('n', array('type'))
      ->condition('nid', $nid, '=')
      ->execute()
      ->fetchField(0);
  }

  // Return false if no node id.
  return FALSE;
}

/**
 * Function to shorten a string by letters, words or sentences.
 *
 * @param string $string
 *   The string to shorten.
 * @param int $amount
 *   The amount to shorten the string to.
 * @param int $type
 *   The type of shortening.
 *   1: By letter.
 *   2: By word.
 *
 * @return string|bool
 *   Returns the truncated string or FALSE.
 */
function openlucius_core_truncate_string($string, $amount, $type = 1) {

  // Check the string.
  if (!empty($string)) {

    // Switch on the type of truncating.
    switch ($type) {

      case 1:
        if (strlen($string) > $amount) {
          return substr($string, 0, strrpos(substr($string, 0, $amount), ' ')) . '...';
        }
        return $string;

      case 2:
        $phrase_array = explode(' ', $string);
        if (count($phrase_array) > $amount && $amount > 0) {
          $phrase = implode(' ', array_slice($phrase_array, 0, $amount));
          return $phrase . '...';
        }
        return $string;

      default:
        return substr($string, 0, strrpos(substr($string, 0, $amount), ' ')) . '...';
    }
  }

  // Return false.
  return FALSE;
}

/**
 * Function to get all the content types that can be moved.
 *
 * @return array
 *   List of the content types.
 */
function openlucius_core_get_content_types_with_move_option() {

  $content_types = array(
    'file',
    'ol_event',
    'ol_file_folder',
    'ol_message',
    'ol_text_document',
    'ol_todo',
    'ol_todo_list',
  );

  // Allow other modules to alter the content types list.
  drupal_alter('openlucius_core_content_types_with_move_option', $content_types);

  return $content_types;
}

/**
 * Function to get the pager id for a page will increase by one for each call.
 *
 * @param string|bool $pager_fragment
 *   Parameter for adding fragments to pager links (optional).
 *
 * @return int
 *   Returns the current pager id.
 */
function openlucius_core_pager_counter($pager_fragment = FALSE) {
  if (!isset($GLOBALS['pager_id'])) {
    $GLOBALS['pager_id'] = 0;
    $GLOBALS['pager_fragments'] = array();
  }
  else {
    $GLOBALS['pager_id']++;
  }

  // Check if the pager needs a fragment (for tabs).
  if (!empty($pager_fragment)) {
    $GLOBALS['pager_fragments'][$GLOBALS['pager_id']] = $pager_fragment;
  }

  return $GLOBALS['pager_id'];
}

/**
 * Function to check if a node has been published.
 *
 * @param int $nid
 *   The node to check.
 *
 * @return bool
 *   Returns true if node is published.
 */
function openlucius_core_node_published($nid) {

  // Check if there is a node id.
  if (!empty($nid)) {
    $status = db_select('node', 'n')
      ->fields('n', array('status'))
      ->condition('nid', $nid, '=')
      ->execute()
      ->fetchField();

    // Check the status.
    if (isset($status) && $status == 1) {
      return TRUE;
    }
  }

  // Return false.
  return FALSE;
}

/**
 * Import translation po file.
 *
 * @param string $file
 *   The name of the file to import from.
 * @param string $lang_code
 *   Language code.
 * @param string $file_path
 *   The full path to the po file.
 * @param string $mode
 *   Should existing translations be replaced or overwritten.
 *
 * @see http://dcycleproject.org/blog/28/approach-deploying-translations-multilingual-site
 */
function openlucius_core_import_translations($file, $lang_code, $file_path, $mode = 'LOCALE_IMPORT_KEEP') {
  try {
    // Create a new file.
    $file = new stdClass();

    // Set the uri.
    $file->uri = $file_path;

    // Set the filename.
    $file->filename = basename($file_path);

    // Require locale.inc.
    require_once DRUPAL_ROOT . '/includes/locale.inc';

    // Import the file.
    _locale_import_po($file, $lang_code, $mode, 'default');
  }
  catch (Exception $e) {
    // don't break the update process for translations.
    drupal_set_message(t('Oops, could not import the translation @f. Other updates will still take place (@r).', array(
      '@f' => $file,
      '@r' => $e->getMessage(),
    )));
  }
}

/**
 * Function to fetch the amount of unread items of a given type.
 *
 * @param string $type
 *   The type to be fetched.
 * @param bool $badge
 *   Whether the count should be rendered as a badge.
 *
 * @return string|int
 *   Either a rendered badge or a numeric count.
 */
function openlucius_core_fetch_unread_count($type, $badge = FALSE) {
  global $user;

  // All nodes of type.
  $node_ids = openlucius_core_fetch_nodes_of_type($type, NODE_NEW_LIMIT);

  // Initiate at 0.
  $user_read_node_ids = 0;
  if (!empty($node_ids)) {

    // Fetch read nodes based on node ids.
    $user_read_node_ids = openlucius_core_fetch_read_nodes($user->uid, $node_ids);
  }

  // Calculate unread.
  $unread = count($node_ids) - $user_read_node_ids;

  if ($badge) {
    return '<span class="badge">' . $unread . '</span>';
  }

  return $unread;
}

/**
 * Function to mark nodes as read using the history table.
 *
 * @param array $node_ids
 *   Array containing the node id's to be marked as read for a given user.
 */
function openlucius_core_mark_nodes_as_read(array $node_ids) {

  if (!empty($node_ids)) {

    // Loop through node id's.
    foreach ($node_ids as $nid) {

      // Create dummy node as the node_tag_new method expects an object with a
      // nid.
      $dummy_node = new stdClass();
      $dummy_node->nid = $nid;

      node_tag_new($dummy_node);
    }
  }
}

/**
 * Function to mark all nodes of a given type to read in the history table.
 *
 * @param string $type
 *   The type to be marked as read.
 * @param string $token
 *   A valid user token to verify the user identity.
 */
function openlucius_core_mark_type_as_read($type, $token) {
  global $user;

  // Check if we have a valid token.
  if (drupal_valid_token($token)) {

    // All nodes of type.
    $node_ids = openlucius_core_fetch_nodes_of_type($type);

    // Fetch read nodes.
    $read_nodes = openlucius_core_fetch_read_nodes($user->uid, $node_ids, TRUE);

    // Exclude read nodes.
    $remaining_unread = array_diff($node_ids, $read_nodes);

    // Mark these nodes as read in the history table.
    openlucius_core_mark_nodes_as_read($remaining_unread);

    drupal_json_output(TRUE);
    drupal_exit();
  }

  drupal_json_output(FALSE);
  drupal_exit();
}

/**
 * Function to fetch users that are in at least one group you are in.
 *
 * @param bool $raw
 *   Whether you need the raw results or loaded user objects.
 *
 * @return array
 *   Returns an array containing either loaded users or user ids.
 */
function openlucius_core_fetch_associated_users($raw = FALSE) {

  // Get the logged in user.
  global $user;

  // Get all groups you are in.
  $groups = openlucius_core_fetch_user_groups($user->uid);

  // Check if there are groups.
  if (!empty($groups)) {

    // Query the users table to get user id and username.
    $query = db_select('users', 'u')->fields('u', array('uid'));

    // Join for group id.
    $query->join('field_data_field_groups', 'f', 'u.uid = f.entity_id');

    // Add condition for group id to be in.
    $query->condition('field_groups_nid', $groups, 'IN');

    // Add condition for enabled / disabled users.
    $query->condition('status', 1, '=');

    // Order alphabetically.
    $query->orderBy('u.name', 'asc');

    // Store result.
    $result = $query->distinct()->execute()->fetchCol();

    // Check the results.
    if (!empty($result)) {
      if (!$raw) {
        // Return user objects.
        return user_load_multiple($result);
      }
      // Return result.
      return $result;
    }
  }

  // Return array by default.
  return array();
}

/**
 * Function to add everyone in a group.
 *
 * @param int $nid
 *   The node id of the group to add everyone in.
 */
function openlucius_core_place_everyone_in_group($nid) {

  // Load all active users.
  $query = db_select('users', 'u')
    ->fields('u', array('uid'))
    ->condition('u.uid', 0, '>')
    ->condition('status', 1, '=');

  // Execute the query and fetch all users.
  $users = $query->execute()->fetchAll();

  // Loop through the users.
  foreach ($users as $u) {

    // Load the user.
    $account = user_load($u->uid);

    // Check if user in group, if not add them to the group.
    if (!openlucius_core_user_in_group($nid, $account->guid)) {

      // Check if the field is set.
      if (!empty($account->field_groups[LANGUAGE_NONE])) {

        // Add the group.
        $account->field_groups[LANGUAGE_NONE][] = array('nid' => $nid);

        // Save the user.
        user_save($account);
      }
    }
  }
}

/**
 * Function to get group reference from node id.
 *
 * @param int $nid
 *   The node id to get the group reference for.
 */
function openlucius_core_get_group_from_nid($nid) {

  // Query the shared group reference table.
  return db_select('field_data_field_shared_group_reference', 'g')
    ->fields('g', array('field_shared_group_reference_nid'))
    ->condition('entity_id', $nid, '=')
    ->execute()
    ->fetchField();
}

/**
 * Function to get view results with specific settings.
 *
 * @param string $view_name
 *   The view machine name.
 * @param string $view_display
 *   The view display defaults to default.
 * @param array $view_arguments
 *   An array of key value arguments.
 *
 * @return mixed
 *   Returns the view result count or all results as object.
 */
function openlucius_core_get_view_result_count($view_name, $view_display = 'default', array $view_arguments) {

  // Get the view.
  $view = views_get_view($view_name);

  // Set the display for this view and initialize the display handler.
  $view->init_display($view_display);

  // Pre execute.
  $view->pre_execute();

  // Check the view arguments.
  if (is_array($view_arguments)) {

    // Set exposed filters.
    $alter = array('exposed' => $view_arguments);

    // Check the alter.
    if (isset($alter['exposed'])) {

      // Loop through the alter.
      foreach ($alter['exposed'] as $key => $valor) {

        // Set teh exposed input value.
        $view->exposed_input[$key] = $valor;
      }
    }
  }

  // Check for error.
  if (empty($view->exposed_data['combine'])) {
    $view->exposed_data['combine'] = $view->exposed_input['combine'];
  }

  // Set the items per page to all.
  $view->set_items_per_page(0);

  // Set to preview to get row count.
  $view->display_handler->preview();

  // Return total rows.
  return (!empty($view->result)) ? $view->total_rows : '';
}

/**
 * Implements hook_views_post_execute().
 */
function openlucius_core_views_post_execute(&$view) {
  // Hide results if there is no search data.
  if ($view->name == 'user_search' && empty($view->exposed_data['combine'])) {
    $view->result = array();
  }
}

/**
 * Function to get all comments on a status update.
 *
 * @param int $nid
 *   The node id of the status update.
 *
 * @return bool
 *   Returns either the array of comments or FALSE.
 */
function openlucius_core_comments_on_node($nid) {

  // Query the comments table.
  $query = db_select('comment', 'c');

  // Select required fields.
  $query->fields('c', array('cid', 'nid', 'uid', 'name', 'changed'));

  // Select the comment body.
  $query->fields('b', array('comment_body_value'));

  // Select the user image fid.
  $query->fields('u', array('picture'));

  // Make sure the comment is on the specific node.
  $query->condition('c.nid', $nid, '=');

  // Check for status.
  if (!user_access('administer comments')) {
    $query->condition('c.status', COMMENT_PUBLISHED);
  }

  // Join to get the comment body.
  $query->join('field_data_comment_body', 'b', 'c.cid = b.entity_id');

  // Join to get the user image.
  $query->leftJoin('users', 'u', 'c.uid = u.uid');

  // Order the results by comment id.
  $query->addExpression('SUBSTRING(c.thread, 1, (LENGTH(c.thread) - 1))', 'torder');
  $query->orderBy('torder', 'ASC');

  // Execute and fetch all.
  $result = $query->execute()->fetchAll();

  // Return.
  return !empty($result) ? $result : FALSE;
}

/**
 * Function to load all todos in a specific list.
 *
 * @param int $nid
 *   The node id of the todo list.
 * @param bool $raw
 *   False gets you the ids only, true gets you the node objects.
 *
 * @return array
 *   Returns array of items.
 */
function openlucius_core_get_todos_in_list($nid, $raw = TRUE) {

  // Select all nodes that have the $nid as list reference.
  $query = db_select('node', 'n');
  $query->fields('n', array('nid'));
  $query->condition('type', 'ol_todo', '=');
  $query->condition('field_todo_list_reference_nid', $nid, '=');
  $query->join('field_data_field_todo_list_reference', 'f', 'n.nid = f.entity_id');

  // Store the result.
  $result = $query->execute()->fetchCol();

  // Check the result.
  if (!empty($result)) {
    if (!$raw) {
      // Return user objects.
      return node_load_multiple($result);
    }
    // Return result.
    return $result;
  }

  // Return array by default.
  return array();
}

/**
 * Function for move nodes access.
 *
 * @param \stdClass $node
 *   The node to be checked.
 *
 * @return bool
 *   Returns either TRUE or FALSE
 */
function openlucius_core_move_nodes_access(\stdClass $node) {

  // The logged in user.
  global $user;

  // Allow super admin.
  if ($user->uid == 1) {
    return TRUE;
  }

  // Allow if you have the permission.
  if (user_access('move nodes')) {

    // Check if you may edit any content.
    if (user_access('edit any ' . $node->type . ' content')) {
      return TRUE;
    }
    // Check if it's your content.
    elseif ($node->uid == $user->uid) {
      return TRUE;
    }
  }

  // Return false by default.
  return FALSE;
}

/**
 * Implements hook_page_build().
 */
function openlucius_core_page_build(&$page) {

  // Get the menu item.
  $item = menu_get_item();

  // The forms which should have the login title.
  $form_ids = array('user_pass', 'user_login');

  if (!empty($page['content']['system_main']['#form_id']) && in_array($page['content']['system_main']['#form_id'], $form_ids)) {
    $login_title = t('Login');
    drupal_set_title($login_title);
  }

  // Check for user dashboard.
  if (!empty($item['path']) && $item['path'] == 'user/dashboard') {
    // Check the map for the uid.
    if (!empty($item['map'][2]) && is_numeric($item['map'][2])) {

      // Get the username.
      $username = openlucius_core_fetch_user_name($item['map'][2]);

      // Set the title.
      drupal_set_title($username);
    }
  }

  // If this is the group node page add the inline edit js.
  if (isset($item['page_arguments'][0]->type) && $item['page_arguments'][0]->type == 'ol_group' && user_access('access inline editing')) {

    // Add date picker.
    drupal_add_library('system', 'ui.datepicker');

    // Fetch path to module.
    $path_to_module = drupal_get_path('module', 'openlucius_core');

    // Add the javascript.
    drupal_add_js($path_to_module . '/js/ol_core_inline_edit.js');
  }

  // Add modal requirements.
  ctools_include('ajax');
  ctools_include('modal');
  ctools_modal_add_js();

  // Fetch the active group to check for a default.
  $active_group = openlucius_core_get_active_group();

  // FALSE can be returned which should be 0 for the modals.
  if ($active_group === FALSE) {
    $active_group = 0;
  }

  // Add task modal (a bit of hack but this works for now.
  // TODO figure out why our ajax callback is missing behaviours after the date
  // component.
  // Fetch active list.
  $active_list = openlucius_core_get_active_list();
  if (empty($active_list)) {
    $page['task_modal_callback'] = ctools_modal_text_button('', 'openlucius-core/task-modal/' . $active_group, t('Task modal'), 'task-modal-trigger');
  }
  else {
    $page['task_modal_callback'] = ctools_modal_text_button('', 'openlucius-core/task-modal/' . $active_group . '/' . $active_list, t('Task modal'), 'task-modal-trigger');
  }
}

/**
 * Function to get the sidebar content for node operations.
 *
 * @return string
 *   Returns empty string that will be filled with the page_alter().
 */
function openlucius_core_get_node_operations_block_content() {
  return '<button class="btn btn-primary form-submit" id="node-submit" data-loading-text="' . t('Saving ...') . '" value="Save">' . t('Save') . '</button>';
}

/**
 * Function to get the user dashboard tabs.
 *
 * @return string
 *   Returns the html for the user dashboard tabs.
 */
function openlucius_core_get_user_dashboard_tabs() {

  // Initialize empty array.
  $items = array();
  $output = '';

  // Get the router item.
  $router_item = menu_get_item(current_path());

  // Check if the user has access.
  if (!$router_item || !$router_item['access']) {

    // If not, return empty string.
    return '';
  }

  // The activity one.
  $items[] = array(
    'target'     => 'user-activity',
    'title'      => t("Activity"),
    'list-class' => 'active',
    'link-class' => 'user-activity',
    'icon'       => 'glyphicon glyphicon-transfer',
  );

  // The assigned tasks one.
  $items['tasks'] = array(
    'target'     => 'block-system-main',
    'title'      => t("Assigned tasks"),
    'list-class' => '',
    'link-class' => 'assigned-todos',
    'icon'       => 'glyphicon glyphicon-check',
  );

  // The messages one.
  $items['messages'] = array(
    'target'     => 'user-messages',
    'title'      => t('Messages'),
    'list-class' => '',
    'link-class' => 'user-messages',
    'icon'       => 'glyphicon glyphicon-envelope',
  );

  // The files one.
  $items['files'] = array(
    'target'     => 'user-files',
    'title'      => t('Files'),
    'list-class' => '',
    'link-class' => 'user-files',
    'icon'       => 'glyphicon glyphicon-file',
  );

  // The text documents one.
  $items['text_documents'] = array(
    'target'     => 'user-text-documents',
    'title'      => t('Book pages'),
    'list-class' => '',
    'link-class' => 'user-text-documents',
    'icon'       => 'glyphicon glyphicon-font',
  );

  // The user info one.
  $items['user_info'] = array(
    'target'     => 'user-info',
    'title'      => t('Information'),
    'list-class' => '',
    'link-class' => 'user-info',
    'icon'       => 'glyphicon glyphicon-user',
  );

  // Allow other items to be added.
  drupal_alter('openlucius_core_user_dashboard_tabs', $items);

  // The user info one.
  $items['app'] = array(
    'target'     => '',
    'title'      => t('Use as App'),
    'list-class' => '',
    'link-class' => 'use-as-app',
    'icon'       => 'glyphicon glyphicon-phone',
  );

  // Check if there are items.
  if (count($items) > 1) {

    $output = '<ul id="tabs" class="nav nav-tabs user-dashboard-tabs" data-tabs="tabs">';

    // Fetch token for read actions.
    $token = drupal_get_token();

    // Loop through items.
    foreach ($items as $item) {

      // Check if this tab has an unread count if not set as empty string.
      $unread = isset($item['unread']) ? $item['unread'] : '';
      $mark = isset($item['mark_read']) ? $item['mark_read'] : '';

      // The link icon.
      $icon = '<span class="tab-icon ' . $item['icon'] . '"></span>';

      // Set the link text.
      $text = '<span class="button-text">' . $item['title'] . '</span>';

      // Concatenate html.
      $output .= '<li class="' . $item['list-class'] . '"><a class="btn btn-xs btn-default ' . $item['link-class'] . '" href="#' . $item['target'] . '" data-token="' . $token . '" data-mark_read="' . $mark . '" data-toggle="tab">' . $icon . $text . ' ' . $unread . '</a></li>';
    }

    $output .= '</ul>';
  }

  // Return output.
  return $output;
}

/**
 * Function to display 'Use as App' information and permanent link.
 */
function openlucius_core_auto_login_page($hash) {

  // Check if there user is not logged in yet.
  if (!user_is_logged_in()) {

    // Get the uid from the hash in the URL.
    $uid = openlucius_core_hash_to_uid($hash);

    // Check if there is a uid.
    if (!empty($uid)) {

      // Auto login the user.
      $account = array('uid' => $uid);
      user_login_submit(array(), $account);

      // Notify the user of the automated login.
      drupal_set_message(t('You have been logged in automatically. You can now bookmark this page by using the instructions below.'));
    }

    // Redirect to the app page.
    drupal_goto('recent-stuff', array('query' => array('hash' => $hash)));
  }

  // Display the information on how to bookmark the page.
  return openlucius_core_get_bookmark_info_block_content();
}

/**
 * Access check for user auto login.
 *
 * @param string $hash
 *   Code that passes through URL.
 *
 * @return bool
 *   Returns TRUE|FALSE.
 */
function openlucius_core_auto_login_access($hash) {
  return !empty($hash);
}

/**
 * Get the information for using as app.
 */
function openlucius_core_get_bookmark_info_block_content() {

  global $user;

  // Get the menu item.
  $menu_item = menu_get_item();

  // Set variables array.
  $vars = array();

  // Check the menu path for user dashboard.
  if ($menu_item['path'] == 'user/dashboard') {

    // Check if you're on your own dashboard.
    if ($user->uid == $menu_item['map'][2]) {

      // Get your personal hash.
      $hash = openlucius_core_uid_to_hash($user->uid);

      // Check if the hash exists.
      if (!empty($hash)) {

        // Create your bookmark link.
        $vars['your_bookmark_link'] = l(t('Your bookmark link'), 'recent-stuff',
          array(
            'attributes' => array(
              'class' => 'bookmark-link',
            ),
            'query'      => array(
              'hash' => $hash,
            ),
          )
        );
      }
    }
  }

  // Theme the phone image.
  $phone_image = theme('image', array(
    'path'       => path_to_theme() . '/images/iphone-bookmark.jpg',
    'width'      => 200,
    'height'     => 356,
    'alt'        => t('iPhone bookmark'),
    'attributes' => array(
      'class' => 'pull-right',
    ),
  ));

  // Create a variable for the image.
  $vars['phone_image'] = $phone_image;

  // Display the information on how to bookmark the page.
  return theme('openlucius_core_bookmark_info', array('vars' => $vars));
}

/**
 * Function for creating a link back to the page you were at.
 *
 * @param int $nid
 *   The node id of the item you are on.
 * @param int $gid
 *   The group id the node is in.
 *
 * @return float
 *   Returns a page number if found otherwise zero (first page).
 */
function openlucius_core_get_pager_link($nid, $gid) {

  // Check for install task.
  if (variable_get('install_task') != 'done') {
    return 0;
  }

  // Get the view.
  $view = views_get_view('messages_in_a_group');

  // Set the display for this view and initialize the display handler.
  $view->init_display('default');

  // Set argument for group id.
  $view->set_arguments(array($gid));

  // Get the items per page.
  $items_per_page = $view->display_handler->options['pager']['options']['items_per_page'];

  // Set the items per page to all.
  $view->set_items_per_page(0);

  // Set to preview to get row count.
  $view->display_handler->preview();

  // Check if there are view results.
  if (!empty($view->result)) {

    // Loop through view results.
    foreach ($view->result as $key => $results) {

      // Check if the result nid is the nid.
      if ($results->nid == $nid) {

        // Set the number to the result key.
        $number = $key;
      }
    }

    // Check if we have a number.
    if (isset($number)) {

      // Get the page.
      $page = floor($number / $items_per_page);

      // Check if the page is a number.
      if (isset($page) && is_float($page)) {

        // Return the page number.
        return $page;
      }
    }
  }

  // Return page zero by default.
  return 0;
}

/**
 * Function to check if the user has a status in the bookmarks table.
 *
 * @param int $uid
 *   The user id to get the bookmark status for.
 *
 * @return bool
 *   Returns either the status as integer or FALSE if not found.
 */
function openlucius_core_get_bookmark_status($uid) {

  // First check if the bookmarks table actually exists.
  if (db_table_exists('openlucius_core_bookmarks')) {

    // Select the status from the bookmarks table.
    $result = db_select('openlucius_core_bookmarks', 'b')
      ->fields('b', array('status'))
      ->condition('uid', $uid, '=')
      ->execute()->fetchField();

    // Return the integer result or FALSE if not found.
    return $result;
  }

  // Return false by default.
  return FALSE;
}

/**
 * Function to get the absolute link to the bookmark page of a user.
 *
 * @param int $uid
 *   The numeric user id.
 *
 * @return string
 *   Returns the absolute link for the bookmark page of the user.
 */
function openlucius_core_create_bookmark_link_for_user($uid) {

  global $base_url;

  // Return the absolute link for the bookmark page of the user.
  return $base_url . '/recent-stuff?hash=' . openlucius_core_uid_to_hash($uid);
}

/**
 * Function to register the bookmark status as 0.
 *
 * @param int $uid
 *   The numeric user id to insert the bookmark status for.
 */
function openlucius_core_bookmark_status_insert($uid) {

  try {

    // Try to insert the status as 1 for the user.
    db_insert('openlucius_core_bookmarks')
      ->fields(array(
        'uid'    => $uid,
        'status' => 0,
      ))
      ->execute();
  }
  catch (Exception $e) {

    // Log the error.
    watchdog('openlucius_bookmark', 'Something went wrong, here\'s the error: <br />%error', array(
      '%error' => $e->getMessage(),
    ), WATCHDOG_ERROR);
  }
}

/**
 * Function to update the bookmark status to 1.
 *
 * @param int $uid
 *   The numeric user id to update the bookmark status for.
 */
function openlucius_core_bookmark_status_update($uid) {

  // Perhaps search for 'Integrity constraint violation' or 'Duplicate entry'.
  try {
    db_update('openlucius_core_bookmarks')
      ->fields(array(
        'status' => 1,
      ))
      ->condition('uid', $uid, '=')
      ->execute();
  }
  catch (Exception $e) {
    // Log the error.
    watchdog('openlucius_bookmark', 'Could not update the bookmark status for user id %id', array('%id' => $uid));
    // Notify the user.
    drupal_set_message(t('Oops, something went terribly wrong, the error has been logged.'), 'error');
  }
}

/**
 * Function to reset the bookmark status to 0.
 *
 * @param int $uid
 *   The numeric user id to update the bookmark status for.
 */
function openlucius_core_bookmark_status_reset($uid) {

  // Perhaps search for 'Integrity constraint violation' or 'Duplicate entry'.
  try {
    db_update('openlucius_core_bookmarks')
      ->fields(array(
        'status' => 0,
      ))
      ->condition('uid', $uid, '=')
      ->execute();
  }
  catch (Exception $e) {
    // Log the error.
    watchdog('openlucius_bookmark', 'Could not update the bookmark status for user id ' . $uid);
    // Notify the user.
    drupal_set_message(t('Oops, something went terribly wrong, the error has been logged.'), 'error');
  }
}

/**
 * Callback function to mark as bookmarked by user.
 */
function openlucius_core_mark_as_bookmarked() {

  global $user;

  // Check the token.
  if (isset($_POST['token']) && drupal_valid_token($_POST['token'])) {
    // Register the bookmark for the user.
    openlucius_core_bookmark_status_update($user->uid);
  }
}

/**
 * Callback function to mark as bookmarked by user.
 */
function openlucius_core_unmark_as_bookmarked() {

  global $user;

  // Check the token.
  if (isset($_POST['token']) && drupal_valid_token($_POST['token'])) {
    // Reset the bookmark for the user.
    openlucius_core_bookmark_status_reset($user->uid);
  }
}

/**
 * Function to get group local tasks for specific node ids.
 *
 * @param int $nid
 *   Node id of the group.
 * @param int $level
 *   The level of tasks you ask for. Primary tasks are 0, secondary are 1.
 *
 * @see menu_local_tasks()
 *
 * @return string
 *   Returns local tasks as string.
 */
function openlucius_core_get_specific_local_tasks($nid, $level = 0) {
  $data = &drupal_static(__FUNCTION__);
  $root_path = &drupal_static(__FUNCTION__ . ':root_path', '');

  $empty = array(
    'tabs'      => array('count' => 0, 'output' => array()),
    'actions'   => array('count' => 0, 'output' => array()),
    'root_path' => &$root_path,
  );

  // Initialize data array.
  $data = array();

  // Set defaults in case there are no actions or tabs.
  $actions = $empty['actions'];

  // Initialize tabs array.
  $tabs = array();

  $router_item = menu_get_item('node/' . $nid);

  // If this router item points to its parent, start from the parents to
  // compute tabs and actions.
  if ($router_item && ($router_item['type'] & MENU_LINKS_TO_PARENT)) {
    $router_item = menu_get_item($router_item['tab_parent_href']);
  }

  // If we failed to fetch a router item or the current user doesn't have
  // access to it, don't bother computing the tabs.
  if (!$router_item || !$router_item['access']) {
    return $empty;
  }

  // Get all tabs (also known as local tasks) and the root page.
  $cid = 'local_tasks:' . $router_item['tab_root'];
  if ($cache = cache_get($cid, 'cache_menu')) {
    $result = $cache->data;
  }
  else {
    $result = db_select('menu_router', NULL, array('fetch' => PDO::FETCH_ASSOC))
      ->fields('menu_router')
      ->condition('tab_root', $router_item['tab_root'])
      ->condition('context', MENU_CONTEXT_INLINE, '<>')
      ->orderBy('weight')
      ->orderBy('title')
      ->execute()
      ->fetchAll();
    cache_set($cid, $result, 'cache_menu');
  }
  $map = $router_item['original_map'];
  $children = array();
  $tasks = array();
  $root_path = $router_item['path'];

  foreach ($result as $item) {
    _menu_translate($item, $map, TRUE);
    if ($item['tab_parent']) {
      // All tabs, but not the root page.
      $children[$item['tab_parent']][$item['path']] = $item;
    }
    // Store the translated item for later use.
    $tasks[$item['path']] = $item;
  }

  // Find all tabs below the current path.
  $path = $router_item['path'];
  // Tab parenting may skip levels, so the number of parts in the path may not
  // equal the depth. Thus we use the $depth counter (offset by 1000 for ksort).
  $depth = 1001;
  $actions['count'] = 0;
  $actions['output'] = array();
  while (isset($children[$path])) {
    $tabs_current = array();
    $actions_current = array();
    $next_path = '';
    $tab_count = 0;
    $action_count = 0;
    foreach ($children[$path] as $item) {
      // Local tasks can be normal items too, so bitmask with
      // MENU_IS_LOCAL_TASK before checking.
      if (!($item['type'] & MENU_IS_LOCAL_TASK)) {
        // This item is not a tab, skip it.
        continue;
      }
      if ($item['access']) {
        $link = $item;
        // The default task is always active. As tabs can be normal items
        // too, so bitmask with MENU_LINKS_TO_PARENT before checking.
        if (($item['type'] & MENU_LINKS_TO_PARENT) == MENU_LINKS_TO_PARENT) {
          // Find the first parent which is not a default local task or action.
          for ($p = $item['tab_parent']; ($tasks[$p]['type'] & MENU_LINKS_TO_PARENT) == MENU_LINKS_TO_PARENT; $p = $tasks[$p]['tab_parent']) {
            ;
          }
          // Use the path of the parent instead.
          $link['href'] = $tasks[$p]['href'];
          // Mark the link as active, if the current path happens to be the
          // path of the default local task itself (i.e., instead of its
          // tab_parent_href or tab_root_href). Normally, links for default
          // local tasks link to their parent, but the path of default local
          // tasks can still be accessed directly, in which case this link
          // would not be marked as active, since l() only compares the href
          // with $_GET['q'].
          if ($link['href'] != $_GET['q']) {
            $link['localized_options']['attributes']['class'][] = 'active';
          }
          $tabs_current[] = array(
            '#theme'  => 'menu_local_task',
            '#link'   => $link,
            '#active' => TRUE,
          );
          $next_path = $item['path'];
          $tab_count++;
        }
        else {
          // Actions can be normal items too, so bitmask with
          // MENU_IS_LOCAL_ACTION before checking.
          if (($item['type'] & MENU_IS_LOCAL_ACTION) == MENU_IS_LOCAL_ACTION) {
            // The item is an action, display it as such.
            $actions_current[] = array(
              '#theme' => 'menu_local_action',
              '#link'  => $link,
            );
            $action_count++;
          }
          else {
            // Otherwise, it's a normal tab.
            $tabs_current[] = array(
              '#theme' => 'menu_local_task',
              '#link'  => $link,
            );
            $tab_count++;
          }
        }
      }
    }
    $path = $next_path;
    $tabs[$depth]['count'] = $tab_count;
    $tabs[$depth]['output'] = $tabs_current;
    $actions['count'] += $action_count;
    $actions['output'] = array_merge($actions['output'], $actions_current);
    $depth++;
  }
  $data['actions'] = $actions;

  // Find all tabs at the same level or above the current one.
  $parent = $router_item['tab_parent'];
  $path = $router_item['path'];
  $depth = 1000;
  while (isset($children[$parent])) {
    $tabs_current = array();
    $next_path = '';
    $next_parent = '';
    $count = 0;
    foreach ($children[$parent] as $item) {
      // Skip local actions.
      if ($item['type'] & MENU_IS_LOCAL_ACTION) {
        continue;
      }
      if ($item['access']) {
        $count++;
        $link = $item;
        // Local tasks can be normal items too, so bitmask with
        // MENU_LINKS_TO_PARENT before checking.
        if (($item['type'] & MENU_LINKS_TO_PARENT) == MENU_LINKS_TO_PARENT) {
          // Find the first parent which is not a default local task.
          for ($p = $item['tab_parent']; ($tasks[$p]['type'] & MENU_LINKS_TO_PARENT) == MENU_LINKS_TO_PARENT; $p = $tasks[$p]['tab_parent']) {
            ;
          }
          // Use the path of the parent instead.
          $link['href'] = $tasks[$p]['href'];
          if ($item['path'] == $router_item['path']) {
            $root_path = $tasks[$p]['path'];
          }
        }
        // We check for the active tab.
        if ($item['path'] == $path) {
          // Mark the link as active, if the current path is a (second-level)
          // local task of a default local task. Since this default local task
          // links to its parent, l() will not mark it as active, as it only
          // compares the link's href to $_GET['q'].
          if ($link['href'] != $_GET['q']) {
            $link['localized_options']['attributes']['class'][] = 'active';
          }
          $tabs_current[] = array(
            '#theme'  => 'menu_local_task',
            '#link'   => $link,
            '#active' => TRUE,
          );
          $next_path = $item['tab_parent'];
          if (isset($tasks[$next_path])) {
            $next_parent = $tasks[$next_path]['tab_parent'];
          }
        }
        else {
          $tabs_current[] = array(
            '#theme' => 'menu_local_task',
            '#link'  => $link,
          );
        }
      }
    }
    $path = $next_path;
    $parent = $next_parent;
    $tabs[$depth]['count'] = $count;
    $tabs[$depth]['output'] = $tabs_current;
    $depth--;
  }
  // Sort by depth.
  ksort($tabs);

  // Remove the depth, we are interested only in their relative placement.
  $tabs = array_values($tabs);
  $data['tabs'] = $tabs;

  // Make sure that the specific local tasks method is also affected by th
  // alters.
  drupal_alter('menu_local_tasks', $data, $router_item, $root_path);

  if (isset($data['tabs'][$level])) {
    return array(
      'tabs'      => $data['tabs'][$level],
      'actions'   => $data['actions'],
      'root_path' => $root_path,
    );
  }
  // @todo If there are no tabs, then there still can be actions; for example,
  //   when added via hook_menu_local_tasks_alter().
  elseif (!empty($data['actions']['output'])) {
    return array('actions' => $data['actions']) + $empty;
  }
  return $empty;
}

/**
 * Implements hook_element_info_alter().
 */
function openlucius_core_element_info_alter(&$type) {

  // Check if type is text format.
  if (isset($type['text_format']['#process'])) {

    // Add custom format.
    $type['text_format']['#process'][] = '_openlucius_core_process_format';
  }
}

/**
 * Custom callback for hiding text format pane.
 *
 * @return mixed
 *   Returns the element.
 */
function _openlucius_core_process_format($element) {

  // Array of field names to restrict.
  $fields = array(
    'body',
    'field_todolist_description',
    'comment_body',
  );

  // Hide the 'text format' pane below certain text area fields.
  if (isset($element['#field_name']) && in_array($element['#field_name'], $fields)) {

    $element['format']['guidelines']['#access'] = FALSE;
    $element['format']['help']['#access'] = FALSE;
    $element['format']['#theme_wrappers'] = NULL;
  }

  return $element;
}

/**
 * Function to check whether a group has new information.
 *
 * @param int $gid
 *   Numeric group id to check for unseen content.
 *
 * @return bool
 *   Returns true if there is at least one item that has not been seen or false.
 */
function openlucius_core_group_has_unseen_content($gid) {

  global $user;

  // Check if one of the node ids is NOT in the history table for the user.
  $query = db_select('field_data_field_shared_group_reference', 'g');

  // Select node id in history table.
  $query->fields('g', array('entity_id'));

  // Left join on history table.
  $query->leftJoin('history', 'h', 'h.nid = g.entity_id AND h.uid = :uid', array(':uid' => $user->uid));

  $query->leftJoin('node', 'n', 'g.entity_id = n.nid');

  // Where group reference is $gid.
  $query->condition('g.field_shared_group_reference_nid', $gid, '=');

  // Add time limit.
  $query->condition('n.changed', NODE_NEW_LIMIT, '>');

  // Check is null.
  $query->isNull('h.nid');

  // Limit to 1 result.
  $query->range(0, 1);

  // If there is no match it will return FALSE.
  return $query->execute()->fetchField();
}

/**
 * Function to obtain unseen content.
 *
 * @param int $gid
 *   The group id for which the content is to be fetched.
 *
 * @return array|bool
 *   Either returns an array containing node id's or FALSE.
 */
function openlucius_core_get_unseen_group_content($gid) {

  global $user;

  // Check if one of the node ids is NOT in the history table for the user.
  $query = db_select('field_data_field_shared_group_reference', 'g');

  // Select node id in history table.
  $query->fields('g', array('entity_id'));

  // Left join on history table.
  $query->leftJoin('history', 'h', 'h.nid = g.entity_id AND h.uid = :uid', array(':uid' => $user->uid));

  // Where group reference is $gid.
  $query->condition('g.field_shared_group_reference_nid', $gid, '=');

  // Check is null.
  $query->isNull('h.nid');

  // Store the result.
  return $query->execute()->fetchCol();
}

/**
 * Function to check whether the user has unseen content.
 *
 * @return bool
 *   Returns TRUE or FALSE based on whether the user has unseen content.
 */
function openlucius_core_user_has_unseen_content() {

  // Get all groups.
  $groups = openlucius_core_fetch_groups();

  // Check the groups.
  if (!empty($groups)) {

    // Loop through the groups.
    foreach ($groups as &$gid) {

      // Check if there is unseen content in the group.
      $unread_count = openlucius_core_group_has_unseen_content($gid);

      // Check for false | 0.
      if (!empty($unread_count)) {

        // Return true, there was unread content found.
        return TRUE;
      }
    }
  }

  // Return false by default.
  return FALSE;
}

/**
 * Function to mark all content in group as read.
 *
 * @param int $gid
 *   The numeric node id of the group.
 */
function openlucius_core_mark_group_content_read($gid) {

  global $user;

  // Get all unseen content.
  $unseen = openlucius_core_get_unseen_group_content($gid);

  // Start the insert query.
  $query = db_insert('history')->fields(array('uid', 'nid', 'timestamp'));

  // Loop through all unseen nodes.
  foreach ($unseen as $nid) {

    // Add query value for each node.
    $query->values(array(
      'uid'       => $user->uid,
      'nid'       => $nid,
      'timestamp' => time(),
    ));
  }

  // Execute the query.
  try {
    $query->execute();
  }
  catch (Exception $e) {
    watchdog('mark_group_content_read', 'Something went wrong, the error: <br />%error', array('%error' => $e->getMessage()));
  }
}

/**
 * Implements hook_user_login().
 */
function openlucius_core_user_login(&$edit, $account) {

  // Redirect first login to frontpage.
  if (!empty($account) && $account->access == 0 && variable_get('install_task') == 'done') {
    if (module_exists('openlucius_onboarding')) {
      drupal_goto('<front>');
    }
  }
}

/**
 * Implements hook_openlucius_core_group_local_tasks_alter().
 */
function openlucius_core_openlucius_core_group_local_tasks_alter(&$group_local_tasks) {

  // Add extra local task for ordering the tabs.
  if (user_access('administer group app settings')) {

    // Get the active group node.
    $gid = openlucius_core_get_active_group();

    // Check if there is a group id before adding the local task.
    if (!empty($gid)) {

      // Add the local task for ordering the apps.
      $group_local_tasks['tabs']['output'][0]['#theme'] = 'menu_local_task';
      $group_local_tasks['tabs']['output'][0]['#link'] = array(
        'title'             => t('Order apps'),
        'href'              => '',
        'path'              => '',
        'localized_options' => array(
          'html'       => TRUE,
          'attributes' => array(
            'class'      => array(
              'order-apps',
            ),
            'data-gid'   => $gid,
            'data-token' => drupal_get_token(),
          ),
        ),
      );
    }
  }

  // Get the hidden group tabs.
  $paths = openlucius_core_get_hidden_group_tab_paths();

  // Loop through the group tabs output.
  foreach ($group_local_tasks['tabs']['output'] as $key => $tab) {
    if (!empty($tab['#link']) && !empty($tab['#link']['path']) && in_array($tab['#link']['path'], $paths)) {
      // Unset the tab.
      unset($group_local_tasks['tabs']['output'][$key]);

      // Decrease the tab count.
      $group_local_tasks['tabs']['count']--;
    }
  }
}

/**
 * Menu callback for updating group app settings.
 *
 * @param int $gid
 *   The node id of the group to update.
 */
function openlucius_core_update_group_app_settings($gid) {

  // Check the token.
  if (isset($_POST['token']) && drupal_valid_token($_POST['token'])) {

    // Get the group id.
    $gid = check_plain($_POST['gid']);

    // Check the group id.
    if (!empty($gid) && is_numeric($gid)) {

      // Get the posted items.
      $items = $_POST['items'];

      // Update the settings based on the items.
      $new_order = array_values($items);

      // Get old values.
      $settings = variable_get('openlucius_core_group_settings_order', array());

      // Set new order.
      $settings[$gid] = $new_order;

      // Save variable for order.
      variable_set('openlucius_core_group_settings_order', $settings);
    }
  }
}

/**
 * Function to build the taxonomy term overview table.
 *
 * @param string $vocabulary
 *   The machine name of the taxonomy vocabulary.
 *
 * @return string
 *   Returns the themed table.
 */
function openlucius_core_build_vocabulary_terms_table($vocabulary) {

  // Translate the strings for the header.
  $name_string = openlucius_core_custom_i18n_string_translate('Name', OPENLUCIUS_CORE_LOCALE);
  $operations_string = openlucius_core_custom_i18n_string_translate('Operations', OPENLUCIUS_CORE_LOCALE);
  $edit_string = openlucius_core_custom_i18n_string_translate('Edit', OPENLUCIUS_CORE_LOCALE);
  $delete_string = openlucius_core_custom_i18n_string_translate('Delete', OPENLUCIUS_CORE_LOCALE);

  // Set the table header.
  $header = array($name_string, $operations_string);

  // Load the todo labels vocabulary.
  $vocabulary = taxonomy_vocabulary_machine_name_load($vocabulary);

  // Get the term tree with loaded entities.
  $terms = taxonomy_get_tree($vocabulary->vid, 0, NULL, TRUE);

  // Initialize rows array.
  $rows = array();

  // Get the open and closed status.
  $closed_term = variable_get('todo_closedstatus_tid');
  $open_term = variable_get('todo_openstatus_tid');

  // Loop through the taxonomy terms.
  foreach ($terms as $term) {

    // The operation links.
    $edit_link = '<a href="task-status/term/' . $term->tid . '/edit">' . $edit_string . '</a>';
    $delete_link = '<a href="task-status/term/' . $term->tid . '/delete">' . $delete_string . '</a>';

    // Initialize edit.
    $edit = FALSE;

    // Check if the term may be edited.
    if (($term->tid != $closed_term) && ($term->tid != $open_term)) {
      $edit = TRUE;
    }

    // Add term to the rows.
    $rows[] = array(
      $term->name,
      $edit ? ($edit_link . ' ' . $delete_link) : '',
    );
  }

  // Return the table.
  return theme('table', array(
    'header'     => $header,
    'rows'       => $rows,
    'attributes' => array('id' => 'taxonomy'),
  ));
}

/**
 * Form constructor for editing taxonomy terms.
 *
 * @param \stdClass $term
 *   The taxonomy term that is loaded from the url.
 *
 * @see openlucius_core_term_edit_submit()
 *
 * @ingroup forms.
 *
 * @return bool
 *   Returns false if no term was found.
 */
function openlucius_core_taxonomy_term_edit($form, &$form_state, \stdClass $term) {

  // Set an array of editable vocabularies.
  $editable_vocabularies = array(
    OPENLUCIUS_CORE_TODO_STATUS_VOCABULARY_NAME,
  );

  // Allow other modules to alter this.
  drupal_alter('openlucius_core_editable_vocabularies', $editable_vocabularies);

  // Check term.
  if (!empty($term)) {

    // Check if the vocabulary may be edited.
    if (in_array($term->vocabulary_machine_name, $editable_vocabularies)) {

      // The hidden term id.
      $form['tid'] = array(
        '#type'  => 'hidden',
        '#value' => $term->tid,
      );

      // The term.
      $form['name'] = array(
        '#type'          => 'textfield',
        '#title'         => t('Term name'),
        '#default_value' => $term->name,
      );

      // The submit.
      $form['submit'] = array(
        '#type'  => 'submit',
        '#value' => t('Update'),
      );

      // Return the form.
      return $form;
    }
    else {
      drupal_access_denied();
      drupal_exit();
    }
  }

  // Return false if no term.
  return FALSE;
}

/**
 * Form constructor for deleting taxonomy terms.
 *
 * @param \stdClass $term
 *   The taxonomy term that is loaded from the url.
 *
 * @see openlucius_core_term_edit_submit()
 *
 * @ingroup forms.
 *
 * @return bool
 *   Returns false if no term was found.
 */
function openlucius_core_taxonomy_term_delete($form, &$form_state, \stdClass $term) {

  // Set an array of editable vocabularies.
  $deletable_vocabularies = array(
    OPENLUCIUS_CORE_TODO_STATUS_VOCABULARY_NAME,
  );

  // Allow other modules to alter this.
  drupal_alter('openlucius_core_deletable_vocabularies', $deletable_vocabularies);

  // Check term.
  if (!empty($term)) {

    // Check if the vocabulary may be edited.
    if (in_array($term->vocabulary_machine_name, $deletable_vocabularies)) {

      // The hidden term id.
      $form['old_tid'] = array(
        '#type'  => 'hidden',
        '#value' => $term->tid,
      );

      // Get the todo terms.
      $new_terms = openlucius_core_get_terms(OPENLUCIUS_CORE_TODO_STATUS_VOCABULARY_NAME);

      // Check if the current term is in there.
      if (!empty($new_terms[$term->tid])) {

        // Remove the current term from the list.
        unset($new_terms[$term->tid]);
      }

      // Get the todos with the status.
      $todos_with_status = openlucius_core_get_todos_with_status($term->tid);

      // Check if there are todos.
      if (!empty($todos_with_status)) {

        // Get the amount of todos.
        $count = count($todos_with_status);

        // Check if there are todos with this status.
        if ($count > 0) {

          // Info about todos count.
          $form['info'] = array(
            '#type'   => 'markup',
            '#markup' => '<p>' . t('There are @count task(s) with this status, please select a new status to change these task(s) to.',
                array(
                  '@count' => $count,
                )) . '</p>',
          );

          // The term.
          $form['new_tid'] = array(
            '#type'    => 'select',
            '#title'   => t('New status'),
            '#options' => $new_terms,
          );
        }
      }

      // Return the form.
      return confirm_form($form, t('Are you sure you want to delete this term?'), 'admin/config/openlucius/task-status');
    }
    else {
      drupal_access_denied();
      drupal_exit();
    }
  }

  // Return false if no term.
  return FALSE;
}

/**
 * Form submit constructor for editing todo status taxonomy term.
 *
 * @see openlucius_core_taxonomy_term_edit()
 *
 * @ingroup forms.
 */
function openlucius_core_taxonomy_term_edit_submit($form, &$form_state) {

  // Check the name.
  if (!empty($form_state['values']['name'])) {

    // Load the taxonomy term.
    $term = taxonomy_term_load($form_state['values']['tid']);

    // Set the name.
    $term->name = $form_state['values']['name'];

    // Save the taxonomy term.
    taxonomy_term_save($term);

    // Redirect to the timetracker configuration screen.
    $form_state['redirect'] = 'admin/config/openlucius/task-status';
  }
  else {
    // Don't allow empty taxonomy terms.
    form_set_error('name', t('The name can not be empty.'));
  }
}

/**
 * Menu callback for moving calendar items.
 */
function openlucius_core_move_calendar_item() {

  // Check the token.
  if (isset($_POST['token']) && drupal_valid_token($_POST['token'])) {

    // Check the node id.
    if (!empty($_POST['nid']) && is_numeric($_POST['nid'])) {

      // Load the node.
      $node = node_load($_POST['nid']);

      // Change the date.
      $node->field_todo_due_date_singledate[LANGUAGE_NONE][0]['value'] = (int) $_POST['timestamp'];

      // Save the node.
      node_save($node);
    }
  }

  // Do return something.
  drupal_json_output(TRUE);
  drupal_exit();
}

/**
 * Form submit constructor for editing todo status taxonomy term.
 *
 * @see openlucius_core_taxonomy_term_edit()
 *
 * @ingroup forms.
 */
function openlucius_core_taxonomy_term_delete_submit($form, &$form_state) {

  // Get both old and new term ids.
  $old_term = (!empty($form_state['values']['old_tid']) ? $form_state['values']['old_tid'] : '');
  $new_term = (!empty($form_state['values']['new_tid']) ? $form_state['values']['new_tid'] : '');

  // Check if both old and new term ids are set.
  if (!empty($old_term)) {

    // Check if there is a new term.
    if (!empty($new_term)) {

      // Get the terms with the status.
      $todos_with_status = openlucius_core_get_todos_with_status($old_term, TRUE);

      // Check if there are todos.
      if (!empty($todos_with_status)) {

        // Loop through the todos.
        foreach ($todos_with_status as $node) {

          // Check the old status of the node.
          if (!empty($node->field_todo_label[LANGUAGE_NONE][0]['tid'])) {

            // Change the status.
            $node->field_todo_label[LANGUAGE_NONE][0]['tid'] = $new_term;

            // Save the node.
            node_save($node);
          }
        }
      }
    }

    // Load the terms.
    $term = taxonomy_term_load($old_term);

    // Delete the taxonomy term.
    taxonomy_term_delete($old_term);

    // Notify the user.
    drupal_set_message(t('The term @old_term was successfully deleted.', array('@old_term' => $term->name)));

    // Redirect back to the form.
    drupal_goto('admin/config/openlucius/task-status');
  }
}

/**
 * Implements hook_locale().
 */
function openlucius_core_locale($op = 'groups') {
  switch ($op) {
    case 'groups':
      return array(OPENLUCIUS_CORE_LOCALE => t('OpenLucius core'));
  }
}

/**
 * Function for posting a reply on an activity item.
 */
function openlucius_core_reply_on_activity_item() {

  // Check token.
  if (!empty($_POST['token']) && drupal_valid_token($_POST['token']) && isset($_POST['nid'])) {

    // The logged in user.
    global $user;

    $nid = check_plain($_POST['nid']);
    $body = check_markup($_POST['value']);

    $comment = new stdClass();

    // Check for the comment body.
    if (!empty($body)) {

      // Create comment subject, @see comment_submit().
      $comment_text = check_markup($body);
      $subject = truncate_utf8(trim(decode_entities(strip_tags($comment_text))), 29, TRUE);

      // Create new comment object.
      $comment = (object) array(
        'nid'          => $nid,
        'cid'          => 0,
        'pid'          => 0,
        'uid'          => $user->uid,
        'mail'         => '',
        'is_anonymous' => 0,
        'homepage'     => '',
        'status'       => COMMENT_PUBLISHED,
        'subject'      => $subject,
        'language'     => LANGUAGE_NONE,
        'comment_body' => array(
          LANGUAGE_NONE => array(
            0 => array(
              'value'  => $body,
              'format' => 'plain_text',
            ),
          ),
        ),
      );

      // Store values for below.
      $cid = $comment->cid;
      $user = user_load($user->uid);
      $user_picture_fid = isset($user->picture->fid) ? $user->picture->fid : 0;

      // Submit and save the comment.
      comment_submit($comment);
      comment_save($comment);

      // Create the like button. @fixme.
      $like = openlucius_core_social_create_like_comment_flag($comment->cid);

      // Create the timestamp.
      $timestamp = format_interval(($_SERVER['REQUEST_TIME'] - time()), 1);

      // Build the comment html.
      $comment = openlucius_core_social_format_comment(array(
        'timestamp' => $timestamp,
        'like'      => $like,
        'uid'       => $user->uid,
        'cid'       => $cid,
        'nid'       => $nid,
        'name'      => $user->name,
        'body'      => $body,
        'picture'   => $user_picture_fid,
      ));
    }

    // Output the themed comment to javascript.
    drupal_json_output($comment);
  }

  // Exit.
  drupal_exit();
}

/**
 * Function to check if a group has a todolist.
 *
 * @param int $gid
 *   The group id to be verified.
 *
 * @return bool
 *   Returns either TRUE when a group was found or FALSE when not.
 */
function openlucius_core_group_has_todolist($gid) {
  $results = db_select('field_data_field_shared_group_reference', 'f')
    ->fields('f', array('entity_id'))
    ->condition('bundle', 'ol_todo_list', '=')
    ->condition('field_shared_group_reference_nid', $gid, '=')
    ->execute()
    ->fetchCol();

  return count($results) > 0;
}

/**
 * Implements hook_views_pre_view().
 */
function openlucius_core_views_pre_view(&$view, &$display_id, &$args) {

  // Array of task views.
  $todo_pages = array(
    'all_todo_lists_in_a_group',
    'todos_on_todo_list_page',
  );

  // Check for the view name in the array.
  if (in_array($view->name, $todo_pages)) {

    // Fetch the filters from the view.
    $filters = $view->display_handler->get_option('filters');

    // Get the query parameters.
    $parameters = drupal_get_query_parameters();

    // Check if the closed checkbox is set.
    if (!empty($parameters['closed']) && $parameters['closed'] == 1) {
      $filters['field_todo_label_tid_1'] = array();
    }
    else {

      // Get the variable values for the open and closed taxonomy terms.
      $closed_term = taxonomy_term_load(variable_get('todo_closedstatus_tid'))->tid;

      $filters['field_todo_label_tid_1']['value'] = array(
        $closed_term => $closed_term,
      );
    }

    // Set the filters.
    $view->display_handler->set_option('filters', $filters);
  }
}

/**
 * Form constructor for the default apps form.
 */
function openlucius_core_default_apps_form($form, &$form_state) {
  $default_buttons = openlucius_core_default_group_header_buttons();

  $form['buttons']['#tree'] = TRUE;

  foreach ($default_buttons as $key => $button_values) {

    // The title field.
    $form['buttons'][$key]['title'] = array(
      '#type'   => 'markup',
      '#markup' => $button_values['text'],
    );

    $form['buttons'][$key]['enabled'] = array(
      '#type'          => 'checkbox',
      '#default_value' => variable_get('openlucius_core_' . $key . '_enabled', 0),
    );

    // This field is invisible, but contains sort info (weights).
    $form['buttons'][$key]['weight'] = array(
      '#type'          => 'weight',
      '#title'         => t('Weight'),
      '#title_display' => 'invisible',
      '#default_value' => variable_get('openlucius_core_' . $key . '_weight', $button_values['weight']),
    );
  }

  // Now we add our submit button, for submitting the form results.
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type'  => 'submit',
    '#value' => t('Save Changes'),
  );

  return $form;
}

/**
 * Theme function for openlucius_core_default_apps_form().
 */
function theme_openlucius_core_default_apps_form($variables) {
  $form = $variables['form'];

  // Initialize rows.
  $rows = array();

  // Loop through form products.
  foreach (element_children($form['buttons']) as $key) {

    // Add weight class.
    $form['buttons'][$key]['weight']['#attributes']['class'] = array('apps-order-weight');

    // Create a row for the product.
    $rows[] = array(
      'data'  => array(
        drupal_render($form['buttons'][$key]['title']),
        drupal_render($form['buttons'][$key]['enabled']),
        drupal_render($form['buttons'][$key]['weight']),
      ),
      // The draggable class.
      'class' => array('draggable'),
    );
  }

  $table_id = 'app-order';

  // Create the table header.
  $header = array(t('Title'), t('Enabled'), t('Weight'));

  // Add the table with products-order id.
  $output = theme('table', array(
    'header'     => $header,
    'rows'       => $rows,
    'attributes' => array('id' => $table_id),
  ));

  // Render the form children.
  $output .= drupal_render_children($form);

  // Add the tabledrag.
  drupal_add_tabledrag($table_id, 'order', 'sibling', 'apps-order-weight', NULL, NULL, FALSE);

  // Return the complete output.
  return $output;
}

/**
 * Form submit handler of openlucius_core_default_apps_form().
 */
function openlucius_core_default_apps_form_submit($form, &$form_state) {
  $buttons = $form_state['values']['buttons'];
  foreach ($buttons as $key => $button_settings) {
    variable_set('openlucius_core_' . $key . '_enabled', $button_settings['enabled']);
    variable_set('openlucius_core_' . $key . '_weight', $button_settings['weight']);
  }
}

/**
 * Custom theming for a checkbox.
 */
function openlucius_core_theme_checkbox($variables) {

  // Store the array of checkbox ids.
  $app_checkbox_ids = array(
    'edit-openlucius-core-group-settings-activity',
    'edit-openlucius-core-group-settings-dashboard',
    'edit-openlucius-core-group-settings-board',
    'edit-openlucius-core-group-settings-tasks',
    'edit-openlucius-core-group-settings-calendar',
    'edit-openlucius-core-group-settings-messages',
    'edit-openlucius-core-group-settings-text-documents',
    'edit-openlucius-core-group-settings-files',
    'edit-openlucius-core-group-settings-users',
  );

  // Allow other modules to alter this.
  drupal_alter('openlucius_core_checkbox_ids', $app_checkbox_ids);

  $regular_checkbox_ids = array(
    'edit-field-group-is-open-und',
    'edit-field-shared-show-clients-und',
  );

  // Allow other modules to alter this.
  drupal_alter('openlucius_core_regular_checkbox_ids', $regular_checkbox_ids);

  // Get the element.
  $element = $variables['element'];

  // Set the type.
  $element['#attributes']['type'] = 'checkbox';

  // Set the attributes.
  element_set_attributes($element, array(
    'id',
    'name',
    '#return_value' => 'value',
  ));

  // Unchecked checkbox has #value of integer 0.
  if (!empty($element['#checked'])) {

    // Set the checked value.
    $element['#attributes']['checked'] = 'checked';
  }

  // Set the class.
  _form_set_class($element, array('form-checkbox'));

  // Check if the id is in the array.
  if (in_array($element['#id'], $app_checkbox_ids)) {

    // Get the icon.
    $icon = openlucius_core_get_app_icons($element['#return_value']);

    // Check the icon.
    if (!empty($icon)) {

      // Get the class.
      $icon_class = openlucius_core_icon_classes($icon);

      if (!empty($icon_class)) {

        // The description.
        $description = openlucius_core_get_app_description($element['#return_value']);

        // Return the row with html.
        return '<div class="app-row row">
          <div class="hidden-xs col-sm-2 col-lg-1 column-icon"><i class="' . $icon_class . '"></i></div>
          <div class="col-xs-6 col-sm-3 col-lg-2 column-name">' . $element['#title'] . '</div>
          <div class="hidden-xs col-sm-5 col-lg-7 column-description"><div class="description">' . $description . '</div></div>
          <div class="col-xs-6 col-sm-2 column-checkbox">
            <label class="css-input switch switch switch-success">
              <input' . drupal_attributes($element['#attributes']) . ' />
              <span></span>
            </label>        
          </div>
        </div>';
      }
    }
  }
  else if (in_array($element['#id'], $regular_checkbox_ids)) {
    return '<label class="css-input switch switch switch-success"><input' . drupal_attributes($element['#attributes']) . ' /><span></span></label>';
  }

  // Return the default.
  return '<input' . drupal_attributes($element['#attributes']) . ' />';
}

/**
 * Get the description for the apps.
 *
 * @param string $type
 *   The type of the app.
 *
 * @return string
 *   Returns the description as string.
 */
function openlucius_core_get_app_description($type) {

  // Initialize the description.
  $description = '';

  // Switch on the type.
  switch ($type) {
    case 'dashboard':
      $description = t("Central overview: a dashboard and an activity stream of this group, which provides insight into the group statistics and recent activity.");
      break;
    case 'board':
      $description = t("See what work has been done - and what is not done, without constantly having to ask for status updates. A board where all tasks are clearly presented, similar to a <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Kanban_board\">Kanban board</a>. Tasks can be dragged to change status and you can instantly change assigned user + due date.");
      break;
    case 'tasks':
      $description = t("See what's done -and what's not done, without constantly having to ask for status updates. These tasks can be divided into different lists. You can easily (inline) add new tasks and also drag-and-drop to indicate priority. You can also change due date + the assigned person quickly.");
      break;
    case 'calendar':
      $description = t("A central place for planning. Post all events here, for example: milestones, deadlines, weekly meetings and annual events.");
      break;
    case 'messages':
      $description = t("Central communication, no more messy email chains: place messages here so all group members can reply. Group members can see all message traffic from start to finish. All responses are recorded instantly and easy to find.");
      break;
    case 'text_documents':
      $description = t("A place for documentation, similar to a wiki. Think of a staff handbook, project agreements or project notes. Revisions are tracked automatically, so all group members can contribute safely.");
      break;
    case 'files':
      $description = t("Folder Manage files and folders in a central place. Prevents messy documents management on 'G-drives' and in email boxes.");
      break;
    case 'users':
      $description = t("An overview of all the members in this group.");
      break;
  }

  return $description;
}

/**
 * Get the hidden group tab paths for hiding specific local tasks.
 *
 * @return array
 *   Returns the array of paths.
 */
function openlucius_core_get_hidden_group_tab_paths() {

  // Initialize the paths.
  $paths = array(
    'node/%/revisions',
  );

  // Allow other modules to alter the paths.
  drupal_alter('openlucius_core_hidden_group_tab_paths', $paths);

  // Return the paths.
  return $paths;
}
